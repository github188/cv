/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -v -c CvPerfProcessIf -p CvPerfProcessIf.h:CvPerfProcessIf.cpp .\com.dcampus.coolview.performance.process.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CVPERFPROCESSIF_H_1299737945
#define CVPERFPROCESSIF_H_1299737945

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.dcampus.coolview.performance.process
 */
class CvPerfProcessIf: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.dcampus.coolview.performance.process"; }

public:
    CvPerfProcessIf(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~CvPerfProcessIf();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> ExitProcess()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("ExitProcess"), argumentList);
    }

    inline QDBusPendingReply<> Recover(const QByteArray &processImage)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(processImage);
        return asyncCallWithArgumentList(QLatin1String("Recover"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace com {
  namespace dcampus {
    namespace coolview {
      namespace performance {
        typedef ::CvPerfProcessIf process;
      }
    }
  }
}
#endif
