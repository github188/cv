/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -v -c CvSipWrapperIf -p CvSipWrapperIf.h:CvSipWrapperIf.cpp .\com.dcampus.coolview.sipwrapper.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CVSIPWRAPPERIF_H_1308193114
#define CVSIPWRAPPERIF_H_1308193114

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.dcampus.coolview.sipWrapper
 */
class CvSipWrapperIf: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.dcampus.coolview.sipWrapper"; }

public:
    CvSipWrapperIf(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~CvSipWrapperIf();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> acceptCall(const QString &username, const QString &memberURI, bool enableVideo, const QByteArray &sdpMessage)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(username) << qVariantFromValue(memberURI) << qVariantFromValue(enableVideo) << qVariantFromValue(sdpMessage);
        return asyncCallWithArgumentList(QLatin1String("acceptCall"), argumentList);
    }

    inline QDBusPendingReply<> acceptSubscription(int sid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(sid);
        return asyncCallWithArgumentList(QLatin1String("acceptSubscription"), argumentList);
    }

    inline QDBusPendingReply<> addVirtualLine(const QString &displayName, const QString &username, const QString &identity, const QString &password, const QString &realm, const QString &proxyServer, const QString &registerServer, int address_family)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(displayName) << qVariantFromValue(username) << qVariantFromValue(identity) << qVariantFromValue(password) << qVariantFromValue(realm) << qVariantFromValue(proxyServer) << qVariantFromValue(registerServer) << qVariantFromValue(address_family);
        return asyncCallWithArgumentList(QLatin1String("addVirtualLine"), argumentList);
    }

    inline QDBusPendingReply<> closeCall(const QString &username, const QString &memberURI)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(username) << qVariantFromValue(memberURI);
        return asyncCallWithArgumentList(QLatin1String("closeCall"), argumentList);
    }

    inline QDBusPendingReply<> exitConference(const QString &confURI)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(confURI);
        return asyncCallWithArgumentList(QLatin1String("exitConference"), argumentList);
    }

    inline QDBusPendingReply<> holdCall(const QString &username, const QString &memberURI)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(username) << qVariantFromValue(memberURI);
        return asyncCallWithArgumentList(QLatin1String("holdCall"), argumentList);
    }

    inline QDBusPendingReply<> init(int ipv6_enable)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(ipv6_enable);
        return asyncCallWithArgumentList(QLatin1String("init"), argumentList);
    }

    inline QDBusPendingReply<bool> isInitialized()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("isInitialized"), argumentList);
    }

    inline QDBusPendingReply<> makeCall(const QString &username, const QString &memberURI, const QByteArray &sdpMessage)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(username) << qVariantFromValue(memberURI) << qVariantFromValue(sdpMessage);
        return asyncCallWithArgumentList(QLatin1String("makeCall"), argumentList);
    }

    inline QDBusPendingReply<> makeInfoCall(const QString &sipURI, const QString &szContent)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(sipURI) << qVariantFromValue(szContent);
        return asyncCallWithArgumentList(QLatin1String("makeInfoCall"), argumentList);
    }

    inline QDBusPendingReply<> makeJoinConfInvite(const QString &username, const QString &focusURI, const QString &szContent, const QByteArray &sdpMessage)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(username) << qVariantFromValue(focusURI) << qVariantFromValue(szContent) << qVariantFromValue(sdpMessage);
        return asyncCallWithArgumentList(QLatin1String("makeJoinConfInvite"), argumentList);
    }

    inline QDBusPendingReply<> registerVirtualLine(const QString &username, const QString &content)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(username) << qVariantFromValue(content);
        return asyncCallWithArgumentList(QLatin1String("registerVirtualLine"), argumentList);
    }

    inline QDBusPendingReply<> rejectCall(const QString &username, const QString &memberURI)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(username) << qVariantFromValue(memberURI);
        return asyncCallWithArgumentList(QLatin1String("rejectCall"), argumentList);
    }

    inline QDBusPendingReply<> rejectSubscription(int sid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(sid);
        return asyncCallWithArgumentList(QLatin1String("rejectSubscription"), argumentList);
    }

    inline QDBusPendingReply<> removeVirtualLine(const QString &username, bool force)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(username) << qVariantFromValue(force);
        return asyncCallWithArgumentList(QLatin1String("removeVirtualLine"), argumentList);
    }

    inline QDBusPendingReply<> resumeCall(const QString &username, const QString &memberURI)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(username) << qVariantFromValue(memberURI);
        return asyncCallWithArgumentList(QLatin1String("resumeCall"), argumentList);
    }

    inline QDBusPendingReply<> sendQosPara(const QString &currentUserID, const QString &focusURI, const QString &szContent)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(currentUserID) << qVariantFromValue(focusURI) << qVariantFromValue(szContent);
        return asyncCallWithArgumentList(QLatin1String("sendQosPara"), argumentList);
    }

    inline QDBusPendingReply<> sendSipMsg(const QString &currentUserID, const QString &remoteURI, const QString &msgContent)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(currentUserID) << qVariantFromValue(remoteURI) << qVariantFromValue(msgContent);
        return asyncCallWithArgumentList(QLatin1String("sendSipMsg"), argumentList);
    }

    inline QDBusPendingReply<> setNatType(int natType)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(natType);
        return asyncCallWithArgumentList(QLatin1String("setNatType"), argumentList);
    }

    inline QDBusPendingReply<> setProxy(const QString &address, int port, const QString &login, const QString &password)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(address) << qVariantFromValue(port) << qVariantFromValue(login) << qVariantFromValue(password);
        return asyncCallWithArgumentList(QLatin1String("setProxy"), argumentList);
    }

    inline QDBusPendingReply<> setSIP(const QString &server, int serverPort, int localPort)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(server) << qVariantFromValue(serverPort) << qVariantFromValue(localPort);
        return asyncCallWithArgumentList(QLatin1String("setSIP"), argumentList);
    }

    inline QDBusPendingReply<> setSipOptions(const QString &optname, const QString &optval)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(optname) << qVariantFromValue(optval);
        return asyncCallWithArgumentList(QLatin1String("setSipOptions"), argumentList);
    }

    inline QDBusPendingReply<> setTunnel(const QString &address, int port, bool ssl)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(address) << qVariantFromValue(port) << qVariantFromValue(ssl);
        return asyncCallWithArgumentList(QLatin1String("setTunnel"), argumentList);
    }

    inline QDBusPendingReply<> setUaName(const QString &name)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(name);
        return asyncCallWithArgumentList(QLatin1String("setUaName"), argumentList);
    }

    inline QDBusPendingReply<> startConference(const QString &username, const QString &confURI, const QString &szContent)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(username) << qVariantFromValue(confURI) << qVariantFromValue(szContent);
        return asyncCallWithArgumentList(QLatin1String("startConference"), argumentList);
    }

    inline QDBusPendingReply<> terminate()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("terminate"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void cvMessageReceivedEvent(const QString &message, const QString &from);
    void incomingSubscribeSignal(int sid, const QString &from, const QString &evtType);
    void phoneCallStateChangedSignal(const QString &callId, int state, const QString &from);
    void phoneLineStateChangedSignal(const QString &lineId, int state);
};

namespace com {
  namespace dcampus {
    namespace coolview {
      typedef ::CvSipWrapperIf sipWrapper;
    }
  }
}
#endif
