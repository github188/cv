/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c CvSipWrapperAdaptor -a CvSipWrapperAdaptor.h:CvSipWrapperAdaptor.cpp .\com.dcampus.coolview.sipwrapper.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "CvSipWrapperAdaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class CvSipWrapperAdaptor
 */

CvSipWrapperAdaptor::CvSipWrapperAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

CvSipWrapperAdaptor::~CvSipWrapperAdaptor()
{
    // destructor
}

void CvSipWrapperAdaptor::acceptCall(const QString &username, const QString &memberURI, bool enableVideo, const QByteArray &sdpMessage)
{
    // handle method call com.dcampus.coolview.sipWrapper.acceptCall
    QMetaObject::invokeMethod(parent(), "acceptCall", Q_ARG(QString, username), Q_ARG(QString, memberURI), Q_ARG(bool, enableVideo), Q_ARG(QByteArray, sdpMessage));
}

void CvSipWrapperAdaptor::acceptSubscription(int sid)
{
    // handle method call com.dcampus.coolview.sipWrapper.acceptSubscription
    QMetaObject::invokeMethod(parent(), "acceptSubscription", Q_ARG(int, sid));
}

void CvSipWrapperAdaptor::addVirtualLine(const QString &displayName, const QString &username, const QString &identity, const QString &password, const QString &realm, const QString &proxyServer, const QString &registerServer, int address_family)
{
    // handle method call com.dcampus.coolview.sipWrapper.addVirtualLine
    QMetaObject::invokeMethod(parent(), "addVirtualLine", Q_ARG(QString, displayName), Q_ARG(QString, username), Q_ARG(QString, identity), Q_ARG(QString, password), Q_ARG(QString, realm), Q_ARG(QString, proxyServer), Q_ARG(QString, registerServer), Q_ARG(int, address_family));
}

void CvSipWrapperAdaptor::closeCall(const QString &username, const QString &memberURI)
{
    // handle method call com.dcampus.coolview.sipWrapper.closeCall
    QMetaObject::invokeMethod(parent(), "closeCall", Q_ARG(QString, username), Q_ARG(QString, memberURI));
}

void CvSipWrapperAdaptor::exitConference(const QString &confURI)
{
    // handle method call com.dcampus.coolview.sipWrapper.exitConference
    QMetaObject::invokeMethod(parent(), "exitConference", Q_ARG(QString, confURI));
}

void CvSipWrapperAdaptor::holdCall(const QString &username, const QString &memberURI)
{
    // handle method call com.dcampus.coolview.sipWrapper.holdCall
    QMetaObject::invokeMethod(parent(), "holdCall", Q_ARG(QString, username), Q_ARG(QString, memberURI));
}

void CvSipWrapperAdaptor::init(int ipv6_enable)
{
    // handle method call com.dcampus.coolview.sipWrapper.init
    QMetaObject::invokeMethod(parent(), "init", Q_ARG(int, ipv6_enable));
}

bool CvSipWrapperAdaptor::isInitialized()
{
    // handle method call com.dcampus.coolview.sipWrapper.isInitialized
    bool isInitialized;
    QMetaObject::invokeMethod(parent(), "isInitialized", Q_RETURN_ARG(bool, isInitialized));
    return isInitialized;
}

void CvSipWrapperAdaptor::makeCall(const QString &username, const QString &memberURI, const QByteArray &sdpMessage)
{
    // handle method call com.dcampus.coolview.sipWrapper.makeCall
    QMetaObject::invokeMethod(parent(), "makeCall", Q_ARG(QString, username), Q_ARG(QString, memberURI), Q_ARG(QByteArray, sdpMessage));
}

void CvSipWrapperAdaptor::makeInfoCall(const QString &sipURI, const QString &szContent)
{
    // handle method call com.dcampus.coolview.sipWrapper.makeInfoCall
    QMetaObject::invokeMethod(parent(), "makeInfoCall", Q_ARG(QString, sipURI), Q_ARG(QString, szContent));
}

void CvSipWrapperAdaptor::makeJoinConfInvite(const QString &username, const QString &focusURI, const QString &szContent, const QByteArray &sdpMessage)
{
    // handle method call com.dcampus.coolview.sipWrapper.makeJoinConfInvite
    QMetaObject::invokeMethod(parent(), "makeJoinConfInvite", Q_ARG(QString, username), Q_ARG(QString, focusURI), Q_ARG(QString, szContent), Q_ARG(QByteArray, sdpMessage));
}

void CvSipWrapperAdaptor::registerVirtualLine(const QString &username, const QString &content)
{
    // handle method call com.dcampus.coolview.sipWrapper.registerVirtualLine
    QMetaObject::invokeMethod(parent(), "registerVirtualLine", Q_ARG(QString, username), Q_ARG(QString, content));
}

void CvSipWrapperAdaptor::rejectCall(const QString &username, const QString &memberURI)
{
    // handle method call com.dcampus.coolview.sipWrapper.rejectCall
    QMetaObject::invokeMethod(parent(), "rejectCall", Q_ARG(QString, username), Q_ARG(QString, memberURI));
}

void CvSipWrapperAdaptor::rejectSubscription(int sid)
{
    // handle method call com.dcampus.coolview.sipWrapper.rejectSubscription
    QMetaObject::invokeMethod(parent(), "rejectSubscription", Q_ARG(int, sid));
}

void CvSipWrapperAdaptor::removeVirtualLine(const QString &username, bool force)
{
    // handle method call com.dcampus.coolview.sipWrapper.removeVirtualLine
    QMetaObject::invokeMethod(parent(), "removeVirtualLine", Q_ARG(QString, username), Q_ARG(bool, force));
}

void CvSipWrapperAdaptor::resumeCall(const QString &username, const QString &memberURI)
{
    // handle method call com.dcampus.coolview.sipWrapper.resumeCall
    QMetaObject::invokeMethod(parent(), "resumeCall", Q_ARG(QString, username), Q_ARG(QString, memberURI));
}

void CvSipWrapperAdaptor::sendQosPara(const QString &currentUserID, const QString &focusURI, const QString &szContent)
{
    // handle method call com.dcampus.coolview.sipWrapper.sendQosPara
    QMetaObject::invokeMethod(parent(), "sendQosPara", Q_ARG(QString, currentUserID), Q_ARG(QString, focusURI), Q_ARG(QString, szContent));
}

void CvSipWrapperAdaptor::sendSipMsg(const QString &currentUserID, const QString &remoteURI, const QString &msgContent)
{
    // handle method call com.dcampus.coolview.sipWrapper.sendSipMsg
    QMetaObject::invokeMethod(parent(), "sendSipMsg", Q_ARG(QString, currentUserID), Q_ARG(QString, remoteURI), Q_ARG(QString, msgContent));
}

void CvSipWrapperAdaptor::setNatType(int natType)
{
    // handle method call com.dcampus.coolview.sipWrapper.setNatType
    QMetaObject::invokeMethod(parent(), "setNatType", Q_ARG(int, natType));
}

void CvSipWrapperAdaptor::setProxy(const QString &address, int port, const QString &login, const QString &password)
{
    // handle method call com.dcampus.coolview.sipWrapper.setProxy
    QMetaObject::invokeMethod(parent(), "setProxy", Q_ARG(QString, address), Q_ARG(int, port), Q_ARG(QString, login), Q_ARG(QString, password));
}

void CvSipWrapperAdaptor::setSIP(const QString &server, int serverPort, int localPort)
{
    // handle method call com.dcampus.coolview.sipWrapper.setSIP
    QMetaObject::invokeMethod(parent(), "setSIP", Q_ARG(QString, server), Q_ARG(int, serverPort), Q_ARG(int, localPort));
}

void CvSipWrapperAdaptor::setSipOptions(const QString &optname, const QString &optval)
{
    // handle method call com.dcampus.coolview.sipWrapper.setSipOptions
    QMetaObject::invokeMethod(parent(), "setSipOptions", Q_ARG(QString, optname), Q_ARG(QString, optval));
}

void CvSipWrapperAdaptor::setTunnel(const QString &address, int port, bool ssl)
{
    // handle method call com.dcampus.coolview.sipWrapper.setTunnel
    QMetaObject::invokeMethod(parent(), "setTunnel", Q_ARG(QString, address), Q_ARG(int, port), Q_ARG(bool, ssl));
}

void CvSipWrapperAdaptor::setUaName(const QString &name)
{
    // handle method call com.dcampus.coolview.sipWrapper.setUaName
    QMetaObject::invokeMethod(parent(), "setUaName", Q_ARG(QString, name));
}

void CvSipWrapperAdaptor::startConference(const QString &username, const QString &confURI, const QString &szContent)
{
    // handle method call com.dcampus.coolview.sipWrapper.startConference
    QMetaObject::invokeMethod(parent(), "startConference", Q_ARG(QString, username), Q_ARG(QString, confURI), Q_ARG(QString, szContent));
}

void CvSipWrapperAdaptor::terminate()
{
    // handle method call com.dcampus.coolview.sipWrapper.terminate
    QMetaObject::invokeMethod(parent(), "terminate");
}

