//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace test.TestNS {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TestNS.IMonitorService")]
    public interface IMonitorService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/GetTerminalInfo", ReplyAction="http://tempuri.org/IMonitorService/GetTerminalInfoResponse")]
        string GetTerminalInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/GetHardwareInfo", ReplyAction="http://tempuri.org/IMonitorService/GetHardwareInfoResponse")]
        string GetHardwareInfo();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/GetProcessInfo", ReplyAction="http://tempuri.org/IMonitorService/GetProcessInfoResponse")]
        string GetProcessInfo(string filter);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/GetThreadInfo", ReplyAction="http://tempuri.org/IMonitorService/GetThreadInfoResponse")]
        string[] GetThreadInfo(int pid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/KillProcess", ReplyAction="http://tempuri.org/IMonitorService/KillProcessResponse")]
        bool KillProcess(int PID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/SetProcessPriority", ReplyAction="http://tempuri.org/IMonitorService/SetProcessPriorityResponse")]
        bool SetProcessPriority(int PID, string priority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMonitorService/SetThreadPriority", ReplyAction="http://tempuri.org/IMonitorService/SetThreadPriorityResponse")]
        bool SetThreadPriority(int PID, int TID, string priority);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonitorService/ShutDown")]
        void ShutDown();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMonitorService/Restart")]
        void Restart();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMonitorServiceChannel : test.TestNS.IMonitorService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MonitorServiceClient : System.ServiceModel.ClientBase<test.TestNS.IMonitorService>, test.TestNS.IMonitorService {
        
        public MonitorServiceClient() {
        }
        
        public MonitorServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MonitorServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MonitorServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MonitorServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetTerminalInfo() {
            return base.Channel.GetTerminalInfo();
        }
        
        public string GetHardwareInfo() {
            return base.Channel.GetHardwareInfo();
        }
        
        public string GetProcessInfo(string filter) {
            return base.Channel.GetProcessInfo(filter);
        }
        
        public string[] GetThreadInfo(int pid) {
            return base.Channel.GetThreadInfo(pid);
        }
        
        public bool KillProcess(int PID) {
            return base.Channel.KillProcess(PID);
        }
        
        public bool SetProcessPriority(int PID, string priority) {
            return base.Channel.SetProcessPriority(PID, priority);
        }
        
        public bool SetThreadPriority(int PID, int TID, string priority) {
            return base.Channel.SetThreadPriority(PID, TID, priority);
        }
        
        public void ShutDown() {
            base.Channel.ShutDown();
        }
        
        public void Restart() {
            base.Channel.Restart();
        }
    }
}
