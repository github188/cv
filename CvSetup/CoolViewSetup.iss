; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!  
; Debug与Release版本脚本区别：
; 1. CompileMode定义
; 2. [setup]中，OutputBaseFilename不同   
; 3. Filter注册时，注意排除pdb文件

; 指明程序的编译模式，应该与MyAppVersion宏中的设置一致（应为不能使用嵌套宏）
#define CompileMode "Release"

#define MyAppName "CoolView"#define MyAppVersion GetFileVersion(AddBackslash(SourcePath) + "Release\CoolView\CoolView.exe")
#define MyAppPublisher "DCampus Networks Ltd."
#define MyAppURL "http://www.dcampus.com/"
#define MyAppExeName "CoolView.exe"

#define IntallTxTaskDesc "Install as TX"  
#define IntallCvHDTaskDesc "Install as CoolView HD"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={#MyAppName}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
OutputBaseFilename={#MyAppName}_Setup_{#MyAppVersion}
OutputDir="."
Compression=lzma
SolidCompression=yes
DisableFinishedPage=yes
;安装后更新环境变量
ChangesEnvironment=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"    


[Code] 
var
  InstallModelModified: Boolean; // 仅第一次自动检测安装类型；这样如果用户更改选择，在点击了回退或前进后不会再次自动识别          

function InitializeSetup(): Boolean;
var
  ResultStr: String;
  ErrorCode: Integer;
  ResultCode: Integer;
begin
  //首先关闭主进程coolview.exe及其子进程
  ShellExec('open' , ExpandConstant('{cmd}') , '/c taskkill /f /im coolview.exe /t' , '', SW_HIDE, ewWaitUntilTerminated, ErrorCode);

  //关闭CvMoitor
  ShellExec('open' , ExpandConstant('{cmd}') , '/c taskkill /f /im CvMonitor.exe ' , '', SW_HIDE, ewNoWait, ErrorCode);
  
  //关闭Telecontroler
  ShellExec('open' , ExpandConstant('{cmd}') , '/c taskkill /f /im CvTelecontrollerSocket.exe ' , '', SW_HIDE, ewNoWait, ErrorCode);

  //关闭会议室界面
  ShellExec('open' , ExpandConstant('{cmd}') , '/c taskkill /f /im CvConferenceRoom.exe ' , '', SW_HIDE, ewNoWait, ErrorCode);

  //SipWrapper
  ShellExec('open' , ExpandConstant('{cmd}') , '/c taskkill /f /im CvSipWrapper.exe ' , '', SW_HIDE, ewNoWait, ErrorCode);

  //ChannelDispatcher
  ShellExec('open' , ExpandConstant('{cmd}') , '/c taskkill /f /im CvChannelDispatcher.exe ' , '', SW_HIDE, ewWaitUntilTerminated, ErrorCode);

  //关闭远程更新
  ShellExec('open' , ExpandConstant('{cmd}') , '/c taskkill /f /im CoolViewUpgrader.exe ' , '', SW_HIDE, ewNoWait, ErrorCode);

  //关闭进程监控
  ShellExec('open' , ExpandConstant('{cmd}') , '/c taskkill /f /im CvLocalMonitorWinForm.exe ' , '', SW_HIDE, ewNoWait, ErrorCode);
  
  //关闭网络测量进程
  ShellExec('open' , ExpandConstant('{cmd}') , '/c taskkill /f /im NetworkMeasurer.exe ' , '', SW_HIDE, ewNoWait, ErrorCode);
  
  //关闭CvMoitor，需要执行两次采用效果
  ShellExec('open' , ExpandConstant('{cmd}') , '/c taskkill /f /im CvMonitor.exe ' , '', SW_HIDE, ewNoWait, ErrorCode);      
  
  //关闭TxMoitor
  ShellExec('open' , ExpandConstant('{cmd}') , '/c taskkill /f /im TxMonitor.exe ' , '', SW_HIDE, ewNoWait, ErrorCode);   
	
  //关闭所有dbus相关的服务
  ShellExec('open' , ExpandConstant('{cmd}') , '/c taskkill /f /im dbus-daemon.exe ' , '', SW_HIDE, ewNoWait, ErrorCode);  
	
  //关闭AirServer
  ShellExec('open' , ExpandConstant('{cmd}') , '/c taskkill /f /im AirServer.exe ' , '', SW_HIDE, ewNoWait, ErrorCode);

  //卸载旧版CoolView
  if RegQueryStringValue(HKLM, 'SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1', 'UninstallString', ResultStr) then
  begin
    ResultStr := RemoveQuotes(ResultStr);
    Exec(ResultStr, '/silent', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  end;

  InstallModelModified := False;
  result := true;
end;


function PrepareToInstall(var NeedsRestart: Boolean): String;
var
  ProgInstalled: Boolean; 
  ResultCode: Integer;
  Index: Integer;
begin
  Result := '';

  //如果没有安装WinPcap，则自动安装，为性能监控提供服务
  ProgInstalled := RegKeyExists(HKLM,'SOFTWARE\WinPcap');
  if not ProgInstalled then
  begin
    //MsgBox('CoolView将安装WinPcap',mbInformation,MB_OK);
    ExtractTemporaryFile('WinPcap_4_1_3.exe');
    Exec(ExpandConstant('{tmp}\WinPcap_4_1_3.exe'), '/d', '', SW_SHOW,ewWaitUntilTerminated, ResultCode);
  end; 

  //如果安装TX，则不安装以下组件
  Index := WizardForm.TasksList.Items.IndexOf('{#IntallTxTaskDesc}');
  if (Index <> -1) and WizardForm.TasksList.Checked[Index] then
  begin
    exit;
  end;

  //如果没有安装foxit reader，则要求用户安装
  ProgInstalled := RegKeyExists(HKLM,'SOFTWARE\Classes\CLSID\{05563215-225C-45EB-BB34-AFA47217B1DE}\ProgID');
  if not ProgInstalled then
  begin
    //MsgBox('CoolView将安装福昕阅读器来播放pdf',mbInformation,MB_OK);
    ExtractTemporaryFile('FoxitReader431_chs_Setup.exe');
    Exec(ExpandConstant('{tmp}\FoxitReader431_chs_Setup.exe'), '/disallow /baidu /joyinker', '', SW_SHOW,ewWaitUntilTerminated, ResultCode);
  end;
    
  //如果没有安装power point viewer，则要求用户安装
  ProgInstalled := RegKeyExists(HKLM,'SOFTWARE\Classes\PowerPointViewer.Show.12\shell\Show\command');
  if not ProgInstalled then
  begin
    //MsgBox('CoolView将安装PowerPointViewer2010来播放ppt',mbInformation,MB_OK);
    ExtractTemporaryFile('PowerPointViewer2010.exe');
    Exec(ExpandConstant('{tmp}\PowerPointViewer2010.exe'), '/q', '', SW_SHOW,ewWaitUntilTerminated, ResultCode);
  end;
end;

// 用于在安装任务选择安装类型时，根据之前的安装，自动选择安装终端类型
procedure CurPageChanged(CurPageID: Integer);
var
  Index: Integer;
  InstallModel: Integer;
begin
  if (CurPageID = wpSelectTasks) and not InstallModelModified then
  begin       
    InstallModel := GetIniInt('Settings', 'ModelCategory', 0, 0, 1, ExpandConstant('{app}\cfg\CoolView.ini'));
    Index := WizardForm.TasksList.Items.IndexOf('{#IntallTxTaskDesc}');
    if Index <> -1 then
    begin
      WizardForm.TasksList.Checked[Index - 1] := InstallModel = 0;
      WizardForm.TasksList.Checked[Index] := InstallModel = 1;
      InstallModelModified := True;
    end;
  end;
end;


[Registry];为dbus添加环境变量
Root: HKCU; Subkey: "Environment"; ValueType: expandsz; ValueName: "DBUS_SESSION_BUS_ADDRESS"; ValueData: "tcp:host=localhost,port=12434"; Flags: uninsdeletevalue


[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: checkedonce 
Name: "installCvHD"; Description: "{#IntallCvHDTaskDesc}"; GroupDescription: "Terminal Model"; Flags: exclusive 
Name: "installTx"; Description: "{#IntallTxTaskDesc}"; GroupDescription: "Terminal Model"; Flags: exclusive


[Dirs]

;日志文件夹
Name: "{app}\log"


[Files] 

;Common components

;3rd party software
;foxit reader
Source: "Common\3rdparty\FoxitReader431_chs_Setup.exe"; Flags: dontcopy
;PowerPointViewer
Source: "Common\3rdparty\PowerPointViewer2010.exe"; Flags: dontcopy
;WinPcap
Source: "Common\3rdparty\WinPcap_4_1_3.exe"; Flags: dontcopy

;config files
Source: "Common\cfg\*";             DestDir:"{app}\cfg";  Flags: onlyifdoesntexist; 

;image and resourcesSource: "Common\Resources\*"; DestDir: "{app}\Resources";  

;dbus
Source: "Common\dbus\*"; DestDir: "{app}\dbus"; Flags: recursesubdirs; 
Source: "Common\dbus\bin\dbus-1.dll"; DestDir: "{sys}";    

;tx ultilities      
Source: "Common\tx\tools\*";   DestDir: "{app}\tools"; Flags: recursesubdirs;
;Source: "Common\tx\txuploader\*";   DestDir: "{app}\txuploader"; Flags: recursesubdirs; Tasks: installTx;

;3rd party lib
Source: "common\filter\*"; DestDir: "{app}\filter"; Flags: ignoreversion restartreplace  
Source: "common\openssl\*"; DestDir: "{app}\filter"; Flags: ignoreversion restartreplace
Source: "common\openssl\*"; DestDir: "{app}"; Flags: ignoreversion restartreplace

;Other
Source: "Common\CvUpgrader\*";    DestDir: "{app}"; Flags: ignoreversion
Source: "Common\CvPerfMonitor\*"; DestDir: "{app}"; Flags: ignoreversion restartreplace recursesubdirs 

;Compile specific components  

;qt and vc runtime
Source: "{#CompileMode}\qt\*";   DestDir: "{app}"; Flags: recursesubdirs;
Source: "{#CompileMode}\msvc\*"; DestDir: "{sys}";

;ortp
;ortp组件在CvSipWrapper, NetworkMeasure, rtp相关filter中都用到
Source: "{#CompileMode}\ortp\*";   DestDir: "{app}"; Flags: ignoreversion restartreplace
Source: "{#CompileMode}\ortp\*";   DestDir: "{app}\filter"; Flags: ignoreversion restartreplace

;main processes
Source: "{#CompileMode}\CoolView\*";      DestDir: "{app}"; Flags: ignoreversion restartreplace
;NOTE: Don't use "Flags: ignoreversion" on any shared system files 
Source: "{#CompileMode}\CvSipWrapper\*";  DestDir: "{app}"; Flags: ignoreversion restartreplace
Source: "{#CompileMode}\msdx\*";          DestDir: "{app}"; Flags: ignoreversion restartreplace 

;filters files need register
Source: "{#CompileMode}\filter\*";    DestDir: "{app}\filter"; Flags: ignoreversion restartreplace regserver; 
 

[INI]
;根据安装时选择的模式，设置配置文件（如果程序实现中不再使用数字表示终端类型，此处也要修改哦）
Filename: "{app}\cfg\CoolView.ini"; Section: "Settings"; Key: "ModelCategory"; String: "1"; Tasks: installTx;


[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall

                 
[UninstallDelete]
type:filesandordirs ; Name: "{app}\Log"
