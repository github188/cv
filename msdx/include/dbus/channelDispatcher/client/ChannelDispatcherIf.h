/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -v -c ChannelDispatcherIf -p ChannelDispatcherIf.h:ChannelDispatcherIf.cpp .\com.dcampus.coolview.channelDispatcher.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef CHANNELDISPATCHERIF_H_1397028803
#define CHANNELDISPATCHERIF_H_1397028803

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.dcampus.coolview.channelDispatcher
 */
class ChannelDispatcherIf: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.dcampus.coolview.channelDispatcher"; }

public:
    ChannelDispatcherIf(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ChannelDispatcherIf();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> ChannelStateChanged(const QString &channel_id, const QString &user_id, const QString &channel_type, int channel_state)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(channel_id) << QVariant::fromValue(user_id) << QVariant::fromValue(channel_type) << QVariant::fromValue(channel_state);
        return asyncCallWithArgumentList(QLatin1String("ChannelStateChanged"), argumentList);
    }

    inline QDBusPendingReply<> CreateChannel(const QString &channel_id, const QString &channel_type, const QByteArray &input_garray)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(channel_id) << QVariant::fromValue(channel_type) << QVariant::fromValue(input_garray);
        return asyncCallWithArgumentList(QLatin1String("CreateChannel"), argumentList);
    }

    inline QDBusPendingReply<> Destroy()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Destroy"), argumentList);
    }

    inline QDBusPendingReply<> ModifyChannel(const QString &channel_id, const QString &channel_type, int modify_type, const QByteArray &input_garray)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(channel_id) << QVariant::fromValue(channel_type) << QVariant::fromValue(modify_type) << QVariant::fromValue(input_garray);
        return asyncCallWithArgumentList(QLatin1String("ModifyChannel"), argumentList);
    }

    inline QDBusPendingReply<> ReleaseChannel(const QString &channel_id, const QString &channel_type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(channel_id) << QVariant::fromValue(channel_type);
        return asyncCallWithArgumentList(QLatin1String("ReleaseChannel"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void NofityChannelStateChanged(const QString &channel_id, const QString &user_id, const QString &channel_type, int channel_state);
};

namespace com {
  namespace dcampus {
    namespace coolview {
      typedef ::ChannelDispatcherIf channelDispatcher;
    }
  }
}
#endif
