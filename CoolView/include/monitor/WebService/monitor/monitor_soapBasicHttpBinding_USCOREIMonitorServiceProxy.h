/* monitor_soapBasicHttpBinding_USCOREIMonitorServiceProxy.h
   Generated by gSOAP 2.8.21 from monitor.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef monitor_soapBasicHttpBinding_USCOREIMonitorServiceProxy_H
#define monitor_soapBasicHttpBinding_USCOREIMonitorServiceProxy_H
#include "monitor_soapH.h"

namespace monitor_soap {

class SOAP_CMAC BasicHttpBinding_USCOREIMonitorServiceProxy : public soap
{ public:
	/// Endpoint URL of service 'BasicHttpBinding_USCOREIMonitorServiceProxy' (change as needed)
	const char *soap_endpoint;
	/// Variables globally declared in monitor.h (non-static)
	/// Constructor
	BasicHttpBinding_USCOREIMonitorServiceProxy();
	/// Construct from another engine state
	BasicHttpBinding_USCOREIMonitorServiceProxy(const struct soap&);
	/// Constructor with endpoint URL
	BasicHttpBinding_USCOREIMonitorServiceProxy(const char *url);
	/// Constructor with engine input+output mode control
	BasicHttpBinding_USCOREIMonitorServiceProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	BasicHttpBinding_USCOREIMonitorServiceProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	BasicHttpBinding_USCOREIMonitorServiceProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~BasicHttpBinding_USCOREIMonitorServiceProxy();
	/// Initializer used by constructors
	virtual	void BasicHttpBinding_USCOREIMonitorServiceProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'GetTerminalInfo' (returns error code or SOAP_OK)
	virtual	int GetTerminalInfo(_ns1__GetTerminalInfo *ns1__GetTerminalInfo, _ns1__GetTerminalInfoResponse *ns1__GetTerminalInfoResponse) { return this->GetTerminalInfo(NULL, NULL, ns1__GetTerminalInfo, ns1__GetTerminalInfoResponse); }
	virtual	int GetTerminalInfo(const char *endpoint, const char *soap_action, _ns1__GetTerminalInfo *ns1__GetTerminalInfo, _ns1__GetTerminalInfoResponse *ns1__GetTerminalInfoResponse);

	/// Web service operation 'GetHardwareInfo' (returns error code or SOAP_OK)
	virtual	int GetHardwareInfo(_ns1__GetHardwareInfo *ns1__GetHardwareInfo, _ns1__GetHardwareInfoResponse *ns1__GetHardwareInfoResponse) { return this->GetHardwareInfo(NULL, NULL, ns1__GetHardwareInfo, ns1__GetHardwareInfoResponse); }
	virtual	int GetHardwareInfo(const char *endpoint, const char *soap_action, _ns1__GetHardwareInfo *ns1__GetHardwareInfo, _ns1__GetHardwareInfoResponse *ns1__GetHardwareInfoResponse);

	/// Web service operation 'GetProcessInfo' (returns error code or SOAP_OK)
	virtual	int GetProcessInfo(_ns1__GetProcessInfo *ns1__GetProcessInfo, _ns1__GetProcessInfoResponse *ns1__GetProcessInfoResponse) { return this->GetProcessInfo(NULL, NULL, ns1__GetProcessInfo, ns1__GetProcessInfoResponse); }
	virtual	int GetProcessInfo(const char *endpoint, const char *soap_action, _ns1__GetProcessInfo *ns1__GetProcessInfo, _ns1__GetProcessInfoResponse *ns1__GetProcessInfoResponse);

	/// Web service operation 'GetThreadInfo' (returns error code or SOAP_OK)
	virtual	int GetThreadInfo(_ns1__GetThreadInfo *ns1__GetThreadInfo, _ns1__GetThreadInfoResponse *ns1__GetThreadInfoResponse) { return this->GetThreadInfo(NULL, NULL, ns1__GetThreadInfo, ns1__GetThreadInfoResponse); }
	virtual	int GetThreadInfo(const char *endpoint, const char *soap_action, _ns1__GetThreadInfo *ns1__GetThreadInfo, _ns1__GetThreadInfoResponse *ns1__GetThreadInfoResponse);

	/// Web service operation 'KillProcess' (returns error code or SOAP_OK)
	virtual	int KillProcess(_ns1__KillProcess *ns1__KillProcess, _ns1__KillProcessResponse *ns1__KillProcessResponse) { return this->KillProcess(NULL, NULL, ns1__KillProcess, ns1__KillProcessResponse); }
	virtual	int KillProcess(const char *endpoint, const char *soap_action, _ns1__KillProcess *ns1__KillProcess, _ns1__KillProcessResponse *ns1__KillProcessResponse);

	/// Web service operation 'SetProcessPriority' (returns error code or SOAP_OK)
	virtual	int SetProcessPriority(_ns1__SetProcessPriority *ns1__SetProcessPriority, _ns1__SetProcessPriorityResponse *ns1__SetProcessPriorityResponse) { return this->SetProcessPriority(NULL, NULL, ns1__SetProcessPriority, ns1__SetProcessPriorityResponse); }
	virtual	int SetProcessPriority(const char *endpoint, const char *soap_action, _ns1__SetProcessPriority *ns1__SetProcessPriority, _ns1__SetProcessPriorityResponse *ns1__SetProcessPriorityResponse);

	/// Web service operation 'SetThreadPriority' (returns error code or SOAP_OK)
	virtual	int SetThreadPriority(_ns1__SetThreadPriority *ns1__SetThreadPriority, _ns1__SetThreadPriorityResponse *ns1__SetThreadPriorityResponse) { return this->SetThreadPriority(NULL, NULL, ns1__SetThreadPriority, ns1__SetThreadPriorityResponse); }
	virtual	int SetThreadPriority(const char *endpoint, const char *soap_action, _ns1__SetThreadPriority *ns1__SetThreadPriority, _ns1__SetThreadPriorityResponse *ns1__SetThreadPriorityResponse);

	/// Web service one-way send operation 'send_ShutDown' (returns error code or SOAP_OK)
	virtual	int send_ShutDown(_ns1__ShutDown *ns1__ShutDown) { return this->send_ShutDown(NULL, NULL, ns1__ShutDown); }
	virtual	int send_ShutDown(const char *endpoint, const char *soap_action, _ns1__ShutDown *ns1__ShutDown);
	/// Web service one-way receive operation 'recv_ShutDown' (returns error code or SOAP_OK);
	virtual	int recv_ShutDown(struct __ns1__ShutDown&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_ShutDown' (returns error code or SOAP_OK)
	virtual	int recv_ShutDown_empty_response() { return soap_recv_empty_response(this); }
	/// Web service one-way synchronous send operation 'ShutDown' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int ShutDown(_ns1__ShutDown *ns1__ShutDown) { return this->ShutDown(NULL, NULL, ns1__ShutDown); }
	virtual	int ShutDown(const char *endpoint, const char *soap_action, _ns1__ShutDown *ns1__ShutDown) { if (this->send_ShutDown(endpoint, soap_action, ns1__ShutDown) || soap_recv_empty_response(this)) return this->error; return SOAP_OK; }

	/// Web service one-way send operation 'send_Restart' (returns error code or SOAP_OK)
	virtual	int send_Restart(_ns1__Restart *ns1__Restart) { return this->send_Restart(NULL, NULL, ns1__Restart); }
	virtual	int send_Restart(const char *endpoint, const char *soap_action, _ns1__Restart *ns1__Restart);
	/// Web service one-way receive operation 'recv_Restart' (returns error code or SOAP_OK);
	virtual	int recv_Restart(struct __ns1__Restart&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_Restart' (returns error code or SOAP_OK)
	virtual	int recv_Restart_empty_response() { return soap_recv_empty_response(this); }
	/// Web service one-way synchronous send operation 'Restart' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int Restart(_ns1__Restart *ns1__Restart) { return this->Restart(NULL, NULL, ns1__Restart); }
	virtual	int Restart(const char *endpoint, const char *soap_action, _ns1__Restart *ns1__Restart) { if (this->send_Restart(endpoint, soap_action, ns1__Restart) || soap_recv_empty_response(this)) return this->error; return SOAP_OK; }

	/// Web service one-way send operation 'send_BeepForAWhile' (returns error code or SOAP_OK)
	virtual	int send_BeepForAWhile(_ns1__BeepForAWhile *ns1__BeepForAWhile) { return this->send_BeepForAWhile(NULL, NULL, ns1__BeepForAWhile); }
	virtual	int send_BeepForAWhile(const char *endpoint, const char *soap_action, _ns1__BeepForAWhile *ns1__BeepForAWhile);
	/// Web service one-way receive operation 'recv_BeepForAWhile' (returns error code or SOAP_OK);
	virtual	int recv_BeepForAWhile(struct __ns1__BeepForAWhile&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_BeepForAWhile' (returns error code or SOAP_OK)
	virtual	int recv_BeepForAWhile_empty_response() { return soap_recv_empty_response(this); }
	/// Web service one-way synchronous send operation 'BeepForAWhile' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int BeepForAWhile(_ns1__BeepForAWhile *ns1__BeepForAWhile) { return this->BeepForAWhile(NULL, NULL, ns1__BeepForAWhile); }
	virtual	int BeepForAWhile(const char *endpoint, const char *soap_action, _ns1__BeepForAWhile *ns1__BeepForAWhile) { if (this->send_BeepForAWhile(endpoint, soap_action, ns1__BeepForAWhile) || soap_recv_empty_response(this)) return this->error; return SOAP_OK; }
};

} // namespace monitor_soap

#endif
