/* monitor_soapH.h
   Generated by gSOAP 2.8.21 from monitor.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef monitor_soapH_H
#define monitor_soapH_H
#include "monitor_soapStub.h"

namespace monitor_soap {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 monitor_soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 monitor_soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

#ifndef SOAP_TYPE_monitor_soap_xsd__byte
#define SOAP_TYPE_monitor_soap_xsd__byte (23)
#endif

#define soap_default_xsd__byte(soap, a) soap_default_byte(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_xsd__byte
#define soap_write_xsd__byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_xsd__byte(soap, data),0) || monitor_soap::soap_put_xsd__byte(soap, data, "xsd:byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_xsd__byte
#define soap_read_xsd__byte(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_byte
#define SOAP_TYPE_monitor_soap_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_byte(soap, data),0) || monitor_soap::soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_short
#define SOAP_TYPE_monitor_soap_short (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap*, short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

#ifndef soap_write_short
#define soap_write_short(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_short(soap, data),0) || monitor_soap::soap_put_short(soap, data, "short", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

#ifndef soap_read_short
#define soap_read_short(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_short(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_ns3__char
#define SOAP_TYPE_monitor_soap_ns3__char (66)
#endif

#define soap_default_ns3__char(soap, a) soap_default_int(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__char(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ns3__char(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__char(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_ns3__char
#define soap_write_ns3__char(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_ns3__char(soap, data),0) || monitor_soap::soap_put_ns3__char(soap, data, "ns3:char", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ns3__char(struct soap*, int *, const char*, const char*);

#ifndef soap_read_ns3__char
#define soap_read_ns3__char(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_ns3__char(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_int
#define SOAP_TYPE_monitor_soap_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_int(soap, data),0) || monitor_soap::soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_LONG64
#define SOAP_TYPE_monitor_soap_LONG64 (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_LONG64(soap, data),0) || monitor_soap::soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_float
#define SOAP_TYPE_monitor_soap_float (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap*, float *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap*, const char*, int, const float *, const char*);
SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap*, const char*, float *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap*, const float *, const char*, const char*);

#ifndef soap_write_float
#define soap_write_float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_float(soap, data),0) || monitor_soap::soap_put_float(soap, data, "float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap*, float *, const char*, const char*);

#ifndef soap_read_float
#define soap_read_float(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_double
#define SOAP_TYPE_monitor_soap_double (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_double(soap, data),0) || monitor_soap::soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_xsd__unsignedByte
#define SOAP_TYPE_monitor_soap_xsd__unsignedByte (41)
#endif

#define soap_default_xsd__unsignedByte(soap, a) soap_default_unsignedByte(soap, a)

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_xsd__unsignedByte
#define soap_write_xsd__unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_xsd__unsignedByte(soap, data),0) || monitor_soap::soap_put_xsd__unsignedByte(soap, data, "xsd:unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_xsd__unsignedByte
#define soap_read_xsd__unsignedByte(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_unsignedByte
#define SOAP_TYPE_monitor_soap_unsignedByte (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap*, unsigned char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap*, const char*, int, const unsigned char *, const char*);
SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap*, const char*, unsigned char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap*, const unsigned char *, const char*, const char*);

#ifndef soap_write_unsignedByte
#define soap_write_unsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_unsignedByte(soap, data),0) || monitor_soap::soap_put_unsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap*, unsigned char *, const char*, const char*);

#ifndef soap_read_unsignedByte
#define soap_read_unsignedByte(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_unsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_unsignedShort
#define SOAP_TYPE_monitor_soap_unsignedShort (47)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap*, unsigned short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap*, const char*, int, const unsigned short *, const char*);
SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap*, const char*, unsigned short *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap*, const unsigned short *, const char*, const char*);

#ifndef soap_write_unsignedShort
#define soap_write_unsignedShort(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_unsignedShort(soap, data),0) || monitor_soap::soap_put_unsignedShort(soap, data, "unsignedShort", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap*, unsigned short *, const char*, const char*);

#ifndef soap_read_unsignedShort
#define soap_read_unsignedShort(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_unsignedShort(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_unsignedInt
#define SOAP_TYPE_monitor_soap_unsignedInt (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_unsignedInt(soap, data),0) || monitor_soap::soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_unsignedLONG64
#define SOAP_TYPE_monitor_soap_unsignedLONG64 (45)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap*, ULONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap*, const ULONG64 *, const char*, const char*);

#ifndef soap_write_unsignedLONG64
#define soap_write_unsignedLONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_unsignedLONG64(soap, data),0) || monitor_soap::soap_put_unsignedLONG64(soap, data, "unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap*, ULONG64 *, const char*, const char*);

#ifndef soap_read_unsignedLONG64
#define soap_read_unsignedLONG64(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_unsignedLONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_time
#define SOAP_TYPE_monitor_soap_time (26)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap*, time_t *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap*, const char*, int, const time_t *, const char*);
SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap*, const char*, time_t *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap*, const time_t *, const char*, const char*);

#ifndef soap_write_time
#define soap_write_time(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_time(soap, data),0) || monitor_soap::soap_put_time(soap, data, "dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap*, time_t *, const char*, const char*);

#ifndef soap_read_time
#define soap_read_time(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_time(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_bool
#define SOAP_TYPE_monitor_soap_bool (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_bool(soap, data),0) || monitor_soap::soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_ns3__guid__
#define SOAP_TYPE_monitor_soap_ns3__guid__ (71)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__guid__(struct soap*, const char*, int, const ns3__guid__ *, const char*);
SOAP_FMAC3 ns3__guid__ * SOAP_FMAC4 soap_in_ns3__guid__(struct soap*, const char*, ns3__guid__ *, const char*);

#ifndef soap_write_ns3__guid__
#define soap_write_ns3__guid__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:guid", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__guid__ * SOAP_FMAC4 soap_get_ns3__guid__(struct soap*, ns3__guid__ *, const char*, const char*);

#ifndef soap_read_ns3__guid__
#define soap_read_ns3__guid__(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_ns3__guid__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__guid__ * SOAP_FMAC2 soap_instantiate_ns3__guid__(struct soap*, int, const char*, const char*, size_t*);

inline ns3__guid__ * soap_new_ns3__guid__(struct soap *soap, int n = -1) { return soap_instantiate_ns3__guid__(soap, n, NULL, NULL, NULL); }

inline ns3__guid__ * soap_new_req_ns3__guid__(struct soap *soap) { ns3__guid__ *_p = soap_instantiate_ns3__guid__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__guid__ * soap_new_set_ns3__guid__(struct soap *soap, char *__item, char *__item1) { ns3__guid__ *_p = soap_instantiate_ns3__guid__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__guid__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns3__guid__(struct soap *soap, ns3__guid__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__guid__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_ns3__duration__
#define SOAP_TYPE_monitor_soap_ns3__duration__ (69)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__duration__(struct soap*, const char*, int, const ns3__duration__ *, const char*);
SOAP_FMAC3 ns3__duration__ * SOAP_FMAC4 soap_in_ns3__duration__(struct soap*, const char*, ns3__duration__ *, const char*);

#ifndef soap_write_ns3__duration__
#define soap_write_ns3__duration__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__duration__ * SOAP_FMAC4 soap_get_ns3__duration__(struct soap*, ns3__duration__ *, const char*, const char*);

#ifndef soap_read_ns3__duration__
#define soap_read_ns3__duration__(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_ns3__duration__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__duration__ * SOAP_FMAC2 soap_instantiate_ns3__duration__(struct soap*, int, const char*, const char*, size_t*);

inline ns3__duration__ * soap_new_ns3__duration__(struct soap *soap, int n = -1) { return soap_instantiate_ns3__duration__(soap, n, NULL, NULL, NULL); }

inline ns3__duration__ * soap_new_req_ns3__duration__(struct soap *soap) { ns3__duration__ *_p = soap_instantiate_ns3__duration__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__duration__ * soap_new_set_ns3__duration__(struct soap *soap, char *__item, char *__item1) { ns3__duration__ *_p = soap_instantiate_ns3__duration__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__duration__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns3__duration__(struct soap *soap, ns3__duration__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__duration__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_ns3__char__
#define SOAP_TYPE_monitor_soap_ns3__char__ (67)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__char__(struct soap*, const char*, int, const ns3__char__ *, const char*);
SOAP_FMAC3 ns3__char__ * SOAP_FMAC4 soap_in_ns3__char__(struct soap*, const char*, ns3__char__ *, const char*);

#ifndef soap_write_ns3__char__
#define soap_write_ns3__char__(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns3:char", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns3__char__ * SOAP_FMAC4 soap_get_ns3__char__(struct soap*, ns3__char__ *, const char*, const char*);

#ifndef soap_read_ns3__char__
#define soap_read_ns3__char__(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_ns3__char__(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns3__char__ * SOAP_FMAC2 soap_instantiate_ns3__char__(struct soap*, int, const char*, const char*, size_t*);

inline ns3__char__ * soap_new_ns3__char__(struct soap *soap, int n = -1) { return soap_instantiate_ns3__char__(soap, n, NULL, NULL, NULL); }

inline ns3__char__ * soap_new_req_ns3__char__(struct soap *soap, int __item) { ns3__char__ *_p = soap_instantiate_ns3__char__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__char__::__item = __item; } return _p; }

inline ns3__char__ * soap_new_set_ns3__char__(struct soap *soap, int __item, char *__item1) { ns3__char__ *_p = soap_instantiate_ns3__char__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__char__::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns3__char__(struct soap *soap, ns3__char__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__char__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_ns4__ArrayOfstring
#define SOAP_TYPE_monitor_soap_ns4__ArrayOfstring (65)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ArrayOfstring(struct soap*, const char*, int, const ns4__ArrayOfstring *, const char*);
SOAP_FMAC3 ns4__ArrayOfstring * SOAP_FMAC4 soap_in_ns4__ArrayOfstring(struct soap*, const char*, ns4__ArrayOfstring *, const char*);

#ifndef soap_write_ns4__ArrayOfstring
#define soap_write_ns4__ArrayOfstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns4:ArrayOfstring", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__ArrayOfstring * SOAP_FMAC4 soap_get_ns4__ArrayOfstring(struct soap*, ns4__ArrayOfstring *, const char*, const char*);

#ifndef soap_read_ns4__ArrayOfstring
#define soap_read_ns4__ArrayOfstring(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_ns4__ArrayOfstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns4__ArrayOfstring * SOAP_FMAC2 soap_instantiate_ns4__ArrayOfstring(struct soap*, int, const char*, const char*, size_t*);

inline ns4__ArrayOfstring * soap_new_ns4__ArrayOfstring(struct soap *soap, int n = -1) { return soap_instantiate_ns4__ArrayOfstring(soap, n, NULL, NULL, NULL); }

inline ns4__ArrayOfstring * soap_new_req_ns4__ArrayOfstring(struct soap *soap, int __sizestring, char **string) { ns4__ArrayOfstring *_p = soap_instantiate_ns4__ArrayOfstring(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__ArrayOfstring::__sizestring = __sizestring; _p->ns4__ArrayOfstring::string = string; } return _p; }

inline ns4__ArrayOfstring * soap_new_set_ns4__ArrayOfstring(struct soap *soap, int __sizestring, char **string, char *__item1) { ns4__ArrayOfstring *_p = soap_instantiate_ns4__ArrayOfstring(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__ArrayOfstring::__sizestring = __sizestring; _p->ns4__ArrayOfstring::string = string; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_ns4__ArrayOfstring(struct soap *soap, ns4__ArrayOfstring *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__ArrayOfstring(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__BeepForAWhile
#define SOAP_TYPE_monitor_soap__ns1__BeepForAWhile (64)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__BeepForAWhile(struct soap*, const char*, int, const _ns1__BeepForAWhile *, const char*);
SOAP_FMAC3 _ns1__BeepForAWhile * SOAP_FMAC4 soap_in__ns1__BeepForAWhile(struct soap*, const char*, _ns1__BeepForAWhile *, const char*);

#ifndef soap_write__ns1__BeepForAWhile
#define soap_write__ns1__BeepForAWhile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:BeepForAWhile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__BeepForAWhile * SOAP_FMAC4 soap_get__ns1__BeepForAWhile(struct soap*, _ns1__BeepForAWhile *, const char*, const char*);

#ifndef soap_read__ns1__BeepForAWhile
#define soap_read__ns1__BeepForAWhile(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__BeepForAWhile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__BeepForAWhile * SOAP_FMAC2 soap_instantiate__ns1__BeepForAWhile(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__BeepForAWhile * soap_new__ns1__BeepForAWhile(struct soap *soap, int n = -1) { return soap_instantiate__ns1__BeepForAWhile(soap, n, NULL, NULL, NULL); }

inline _ns1__BeepForAWhile * soap_new_req__ns1__BeepForAWhile(struct soap *soap) { _ns1__BeepForAWhile *_p = soap_instantiate__ns1__BeepForAWhile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__BeepForAWhile * soap_new_set__ns1__BeepForAWhile(struct soap *soap, int *ms) { _ns1__BeepForAWhile *_p = soap_instantiate__ns1__BeepForAWhile(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__BeepForAWhile::ms = ms; } return _p; }

inline void soap_delete__ns1__BeepForAWhile(struct soap *soap, _ns1__BeepForAWhile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__BeepForAWhile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__Restart
#define SOAP_TYPE_monitor_soap__ns1__Restart (63)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Restart(struct soap*, const char*, int, const _ns1__Restart *, const char*);
SOAP_FMAC3 _ns1__Restart * SOAP_FMAC4 soap_in__ns1__Restart(struct soap*, const char*, _ns1__Restart *, const char*);

#ifndef soap_write__ns1__Restart
#define soap_write__ns1__Restart(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:Restart", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Restart * SOAP_FMAC4 soap_get__ns1__Restart(struct soap*, _ns1__Restart *, const char*, const char*);

#ifndef soap_read__ns1__Restart
#define soap_read__ns1__Restart(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__Restart(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__Restart * SOAP_FMAC2 soap_instantiate__ns1__Restart(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Restart * soap_new__ns1__Restart(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Restart(soap, n, NULL, NULL, NULL); }

inline _ns1__Restart * soap_new_req__ns1__Restart(struct soap *soap) { _ns1__Restart *_p = soap_instantiate__ns1__Restart(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__Restart * soap_new_set__ns1__Restart(struct soap *soap) { _ns1__Restart *_p = soap_instantiate__ns1__Restart(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__Restart(struct soap *soap, _ns1__Restart *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Restart(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__ShutDown
#define SOAP_TYPE_monitor_soap__ns1__ShutDown (62)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ShutDown(struct soap*, const char*, int, const _ns1__ShutDown *, const char*);
SOAP_FMAC3 _ns1__ShutDown * SOAP_FMAC4 soap_in__ns1__ShutDown(struct soap*, const char*, _ns1__ShutDown *, const char*);

#ifndef soap_write__ns1__ShutDown
#define soap_write__ns1__ShutDown(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:ShutDown", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__ShutDown * SOAP_FMAC4 soap_get__ns1__ShutDown(struct soap*, _ns1__ShutDown *, const char*, const char*);

#ifndef soap_read__ns1__ShutDown
#define soap_read__ns1__ShutDown(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__ShutDown(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__ShutDown * SOAP_FMAC2 soap_instantiate__ns1__ShutDown(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ShutDown * soap_new__ns1__ShutDown(struct soap *soap, int n = -1) { return soap_instantiate__ns1__ShutDown(soap, n, NULL, NULL, NULL); }

inline _ns1__ShutDown * soap_new_req__ns1__ShutDown(struct soap *soap) { _ns1__ShutDown *_p = soap_instantiate__ns1__ShutDown(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__ShutDown * soap_new_set__ns1__ShutDown(struct soap *soap) { _ns1__ShutDown *_p = soap_instantiate__ns1__ShutDown(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__ShutDown(struct soap *soap, _ns1__ShutDown *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ShutDown(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__SetThreadPriorityResponse
#define SOAP_TYPE_monitor_soap__ns1__SetThreadPriorityResponse (61)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetThreadPriorityResponse(struct soap*, const char*, int, const _ns1__SetThreadPriorityResponse *, const char*);
SOAP_FMAC3 _ns1__SetThreadPriorityResponse * SOAP_FMAC4 soap_in__ns1__SetThreadPriorityResponse(struct soap*, const char*, _ns1__SetThreadPriorityResponse *, const char*);

#ifndef soap_write__ns1__SetThreadPriorityResponse
#define soap_write__ns1__SetThreadPriorityResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:SetThreadPriorityResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetThreadPriorityResponse * SOAP_FMAC4 soap_get__ns1__SetThreadPriorityResponse(struct soap*, _ns1__SetThreadPriorityResponse *, const char*, const char*);

#ifndef soap_read__ns1__SetThreadPriorityResponse
#define soap_read__ns1__SetThreadPriorityResponse(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__SetThreadPriorityResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetThreadPriorityResponse * SOAP_FMAC2 soap_instantiate__ns1__SetThreadPriorityResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetThreadPriorityResponse * soap_new__ns1__SetThreadPriorityResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetThreadPriorityResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SetThreadPriorityResponse * soap_new_req__ns1__SetThreadPriorityResponse(struct soap *soap) { _ns1__SetThreadPriorityResponse *_p = soap_instantiate__ns1__SetThreadPriorityResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__SetThreadPriorityResponse * soap_new_set__ns1__SetThreadPriorityResponse(struct soap *soap, bool *SetThreadPriorityResult) { _ns1__SetThreadPriorityResponse *_p = soap_instantiate__ns1__SetThreadPriorityResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetThreadPriorityResponse::SetThreadPriorityResult = SetThreadPriorityResult; } return _p; }

inline void soap_delete__ns1__SetThreadPriorityResponse(struct soap *soap, _ns1__SetThreadPriorityResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetThreadPriorityResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__SetThreadPriority
#define SOAP_TYPE_monitor_soap__ns1__SetThreadPriority (60)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetThreadPriority(struct soap*, const char*, int, const _ns1__SetThreadPriority *, const char*);
SOAP_FMAC3 _ns1__SetThreadPriority * SOAP_FMAC4 soap_in__ns1__SetThreadPriority(struct soap*, const char*, _ns1__SetThreadPriority *, const char*);

#ifndef soap_write__ns1__SetThreadPriority
#define soap_write__ns1__SetThreadPriority(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:SetThreadPriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetThreadPriority * SOAP_FMAC4 soap_get__ns1__SetThreadPriority(struct soap*, _ns1__SetThreadPriority *, const char*, const char*);

#ifndef soap_read__ns1__SetThreadPriority
#define soap_read__ns1__SetThreadPriority(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__SetThreadPriority(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetThreadPriority * SOAP_FMAC2 soap_instantiate__ns1__SetThreadPriority(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetThreadPriority * soap_new__ns1__SetThreadPriority(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetThreadPriority(soap, n, NULL, NULL, NULL); }

inline _ns1__SetThreadPriority * soap_new_req__ns1__SetThreadPriority(struct soap *soap) { _ns1__SetThreadPriority *_p = soap_instantiate__ns1__SetThreadPriority(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__SetThreadPriority * soap_new_set__ns1__SetThreadPriority(struct soap *soap, int *PID, int *TID, char *priority) { _ns1__SetThreadPriority *_p = soap_instantiate__ns1__SetThreadPriority(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetThreadPriority::PID = PID; _p->_ns1__SetThreadPriority::TID = TID; _p->_ns1__SetThreadPriority::priority = priority; } return _p; }

inline void soap_delete__ns1__SetThreadPriority(struct soap *soap, _ns1__SetThreadPriority *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetThreadPriority(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__SetProcessPriorityResponse
#define SOAP_TYPE_monitor_soap__ns1__SetProcessPriorityResponse (59)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetProcessPriorityResponse(struct soap*, const char*, int, const _ns1__SetProcessPriorityResponse *, const char*);
SOAP_FMAC3 _ns1__SetProcessPriorityResponse * SOAP_FMAC4 soap_in__ns1__SetProcessPriorityResponse(struct soap*, const char*, _ns1__SetProcessPriorityResponse *, const char*);

#ifndef soap_write__ns1__SetProcessPriorityResponse
#define soap_write__ns1__SetProcessPriorityResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:SetProcessPriorityResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetProcessPriorityResponse * SOAP_FMAC4 soap_get__ns1__SetProcessPriorityResponse(struct soap*, _ns1__SetProcessPriorityResponse *, const char*, const char*);

#ifndef soap_read__ns1__SetProcessPriorityResponse
#define soap_read__ns1__SetProcessPriorityResponse(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__SetProcessPriorityResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetProcessPriorityResponse * SOAP_FMAC2 soap_instantiate__ns1__SetProcessPriorityResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetProcessPriorityResponse * soap_new__ns1__SetProcessPriorityResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetProcessPriorityResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__SetProcessPriorityResponse * soap_new_req__ns1__SetProcessPriorityResponse(struct soap *soap) { _ns1__SetProcessPriorityResponse *_p = soap_instantiate__ns1__SetProcessPriorityResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__SetProcessPriorityResponse * soap_new_set__ns1__SetProcessPriorityResponse(struct soap *soap, bool *SetProcessPriorityResult) { _ns1__SetProcessPriorityResponse *_p = soap_instantiate__ns1__SetProcessPriorityResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetProcessPriorityResponse::SetProcessPriorityResult = SetProcessPriorityResult; } return _p; }

inline void soap_delete__ns1__SetProcessPriorityResponse(struct soap *soap, _ns1__SetProcessPriorityResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetProcessPriorityResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__SetProcessPriority
#define SOAP_TYPE_monitor_soap__ns1__SetProcessPriority (58)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SetProcessPriority(struct soap*, const char*, int, const _ns1__SetProcessPriority *, const char*);
SOAP_FMAC3 _ns1__SetProcessPriority * SOAP_FMAC4 soap_in__ns1__SetProcessPriority(struct soap*, const char*, _ns1__SetProcessPriority *, const char*);

#ifndef soap_write__ns1__SetProcessPriority
#define soap_write__ns1__SetProcessPriority(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:SetProcessPriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetProcessPriority * SOAP_FMAC4 soap_get__ns1__SetProcessPriority(struct soap*, _ns1__SetProcessPriority *, const char*, const char*);

#ifndef soap_read__ns1__SetProcessPriority
#define soap_read__ns1__SetProcessPriority(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__SetProcessPriority(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__SetProcessPriority * SOAP_FMAC2 soap_instantiate__ns1__SetProcessPriority(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__SetProcessPriority * soap_new__ns1__SetProcessPriority(struct soap *soap, int n = -1) { return soap_instantiate__ns1__SetProcessPriority(soap, n, NULL, NULL, NULL); }

inline _ns1__SetProcessPriority * soap_new_req__ns1__SetProcessPriority(struct soap *soap) { _ns1__SetProcessPriority *_p = soap_instantiate__ns1__SetProcessPriority(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__SetProcessPriority * soap_new_set__ns1__SetProcessPriority(struct soap *soap, int *PID, char *priority) { _ns1__SetProcessPriority *_p = soap_instantiate__ns1__SetProcessPriority(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__SetProcessPriority::PID = PID; _p->_ns1__SetProcessPriority::priority = priority; } return _p; }

inline void soap_delete__ns1__SetProcessPriority(struct soap *soap, _ns1__SetProcessPriority *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SetProcessPriority(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__KillProcessResponse
#define SOAP_TYPE_monitor_soap__ns1__KillProcessResponse (57)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__KillProcessResponse(struct soap*, const char*, int, const _ns1__KillProcessResponse *, const char*);
SOAP_FMAC3 _ns1__KillProcessResponse * SOAP_FMAC4 soap_in__ns1__KillProcessResponse(struct soap*, const char*, _ns1__KillProcessResponse *, const char*);

#ifndef soap_write__ns1__KillProcessResponse
#define soap_write__ns1__KillProcessResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:KillProcessResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__KillProcessResponse * SOAP_FMAC4 soap_get__ns1__KillProcessResponse(struct soap*, _ns1__KillProcessResponse *, const char*, const char*);

#ifndef soap_read__ns1__KillProcessResponse
#define soap_read__ns1__KillProcessResponse(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__KillProcessResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__KillProcessResponse * SOAP_FMAC2 soap_instantiate__ns1__KillProcessResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__KillProcessResponse * soap_new__ns1__KillProcessResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__KillProcessResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__KillProcessResponse * soap_new_req__ns1__KillProcessResponse(struct soap *soap) { _ns1__KillProcessResponse *_p = soap_instantiate__ns1__KillProcessResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__KillProcessResponse * soap_new_set__ns1__KillProcessResponse(struct soap *soap, bool *KillProcessResult) { _ns1__KillProcessResponse *_p = soap_instantiate__ns1__KillProcessResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__KillProcessResponse::KillProcessResult = KillProcessResult; } return _p; }

inline void soap_delete__ns1__KillProcessResponse(struct soap *soap, _ns1__KillProcessResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__KillProcessResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__KillProcess
#define SOAP_TYPE_monitor_soap__ns1__KillProcess (56)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__KillProcess(struct soap*, const char*, int, const _ns1__KillProcess *, const char*);
SOAP_FMAC3 _ns1__KillProcess * SOAP_FMAC4 soap_in__ns1__KillProcess(struct soap*, const char*, _ns1__KillProcess *, const char*);

#ifndef soap_write__ns1__KillProcess
#define soap_write__ns1__KillProcess(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:KillProcess", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__KillProcess * SOAP_FMAC4 soap_get__ns1__KillProcess(struct soap*, _ns1__KillProcess *, const char*, const char*);

#ifndef soap_read__ns1__KillProcess
#define soap_read__ns1__KillProcess(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__KillProcess(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__KillProcess * SOAP_FMAC2 soap_instantiate__ns1__KillProcess(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__KillProcess * soap_new__ns1__KillProcess(struct soap *soap, int n = -1) { return soap_instantiate__ns1__KillProcess(soap, n, NULL, NULL, NULL); }

inline _ns1__KillProcess * soap_new_req__ns1__KillProcess(struct soap *soap) { _ns1__KillProcess *_p = soap_instantiate__ns1__KillProcess(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__KillProcess * soap_new_set__ns1__KillProcess(struct soap *soap, int *PID) { _ns1__KillProcess *_p = soap_instantiate__ns1__KillProcess(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__KillProcess::PID = PID; } return _p; }

inline void soap_delete__ns1__KillProcess(struct soap *soap, _ns1__KillProcess *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__KillProcess(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__GetThreadInfoResponse
#define SOAP_TYPE_monitor_soap__ns1__GetThreadInfoResponse (55)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetThreadInfoResponse(struct soap*, const char*, int, const _ns1__GetThreadInfoResponse *, const char*);
SOAP_FMAC3 _ns1__GetThreadInfoResponse * SOAP_FMAC4 soap_in__ns1__GetThreadInfoResponse(struct soap*, const char*, _ns1__GetThreadInfoResponse *, const char*);

#ifndef soap_write__ns1__GetThreadInfoResponse
#define soap_write__ns1__GetThreadInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetThreadInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetThreadInfoResponse * SOAP_FMAC4 soap_get__ns1__GetThreadInfoResponse(struct soap*, _ns1__GetThreadInfoResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetThreadInfoResponse
#define soap_read__ns1__GetThreadInfoResponse(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__GetThreadInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetThreadInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__GetThreadInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetThreadInfoResponse * soap_new__ns1__GetThreadInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetThreadInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetThreadInfoResponse * soap_new_req__ns1__GetThreadInfoResponse(struct soap *soap) { _ns1__GetThreadInfoResponse *_p = soap_instantiate__ns1__GetThreadInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetThreadInfoResponse * soap_new_set__ns1__GetThreadInfoResponse(struct soap *soap, ns4__ArrayOfstring *GetThreadInfoResult) { _ns1__GetThreadInfoResponse *_p = soap_instantiate__ns1__GetThreadInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetThreadInfoResponse::GetThreadInfoResult = GetThreadInfoResult; } return _p; }

inline void soap_delete__ns1__GetThreadInfoResponse(struct soap *soap, _ns1__GetThreadInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetThreadInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__GetThreadInfo
#define SOAP_TYPE_monitor_soap__ns1__GetThreadInfo (54)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetThreadInfo(struct soap*, const char*, int, const _ns1__GetThreadInfo *, const char*);
SOAP_FMAC3 _ns1__GetThreadInfo * SOAP_FMAC4 soap_in__ns1__GetThreadInfo(struct soap*, const char*, _ns1__GetThreadInfo *, const char*);

#ifndef soap_write__ns1__GetThreadInfo
#define soap_write__ns1__GetThreadInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetThreadInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetThreadInfo * SOAP_FMAC4 soap_get__ns1__GetThreadInfo(struct soap*, _ns1__GetThreadInfo *, const char*, const char*);

#ifndef soap_read__ns1__GetThreadInfo
#define soap_read__ns1__GetThreadInfo(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__GetThreadInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetThreadInfo * SOAP_FMAC2 soap_instantiate__ns1__GetThreadInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetThreadInfo * soap_new__ns1__GetThreadInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetThreadInfo(soap, n, NULL, NULL, NULL); }

inline _ns1__GetThreadInfo * soap_new_req__ns1__GetThreadInfo(struct soap *soap) { _ns1__GetThreadInfo *_p = soap_instantiate__ns1__GetThreadInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetThreadInfo * soap_new_set__ns1__GetThreadInfo(struct soap *soap, int *pid) { _ns1__GetThreadInfo *_p = soap_instantiate__ns1__GetThreadInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetThreadInfo::pid = pid; } return _p; }

inline void soap_delete__ns1__GetThreadInfo(struct soap *soap, _ns1__GetThreadInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetThreadInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__GetProcessInfoResponse
#define SOAP_TYPE_monitor_soap__ns1__GetProcessInfoResponse (53)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetProcessInfoResponse(struct soap*, const char*, int, const _ns1__GetProcessInfoResponse *, const char*);
SOAP_FMAC3 _ns1__GetProcessInfoResponse * SOAP_FMAC4 soap_in__ns1__GetProcessInfoResponse(struct soap*, const char*, _ns1__GetProcessInfoResponse *, const char*);

#ifndef soap_write__ns1__GetProcessInfoResponse
#define soap_write__ns1__GetProcessInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetProcessInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetProcessInfoResponse * SOAP_FMAC4 soap_get__ns1__GetProcessInfoResponse(struct soap*, _ns1__GetProcessInfoResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetProcessInfoResponse
#define soap_read__ns1__GetProcessInfoResponse(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__GetProcessInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetProcessInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__GetProcessInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetProcessInfoResponse * soap_new__ns1__GetProcessInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetProcessInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetProcessInfoResponse * soap_new_req__ns1__GetProcessInfoResponse(struct soap *soap) { _ns1__GetProcessInfoResponse *_p = soap_instantiate__ns1__GetProcessInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetProcessInfoResponse * soap_new_set__ns1__GetProcessInfoResponse(struct soap *soap, char *GetProcessInfoResult) { _ns1__GetProcessInfoResponse *_p = soap_instantiate__ns1__GetProcessInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetProcessInfoResponse::GetProcessInfoResult = GetProcessInfoResult; } return _p; }

inline void soap_delete__ns1__GetProcessInfoResponse(struct soap *soap, _ns1__GetProcessInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetProcessInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__GetProcessInfo
#define SOAP_TYPE_monitor_soap__ns1__GetProcessInfo (52)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetProcessInfo(struct soap*, const char*, int, const _ns1__GetProcessInfo *, const char*);
SOAP_FMAC3 _ns1__GetProcessInfo * SOAP_FMAC4 soap_in__ns1__GetProcessInfo(struct soap*, const char*, _ns1__GetProcessInfo *, const char*);

#ifndef soap_write__ns1__GetProcessInfo
#define soap_write__ns1__GetProcessInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetProcessInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetProcessInfo * SOAP_FMAC4 soap_get__ns1__GetProcessInfo(struct soap*, _ns1__GetProcessInfo *, const char*, const char*);

#ifndef soap_read__ns1__GetProcessInfo
#define soap_read__ns1__GetProcessInfo(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__GetProcessInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetProcessInfo * SOAP_FMAC2 soap_instantiate__ns1__GetProcessInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetProcessInfo * soap_new__ns1__GetProcessInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetProcessInfo(soap, n, NULL, NULL, NULL); }

inline _ns1__GetProcessInfo * soap_new_req__ns1__GetProcessInfo(struct soap *soap) { _ns1__GetProcessInfo *_p = soap_instantiate__ns1__GetProcessInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetProcessInfo * soap_new_set__ns1__GetProcessInfo(struct soap *soap, char *filter) { _ns1__GetProcessInfo *_p = soap_instantiate__ns1__GetProcessInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetProcessInfo::filter = filter; } return _p; }

inline void soap_delete__ns1__GetProcessInfo(struct soap *soap, _ns1__GetProcessInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetProcessInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__GetHardwareInfoResponse
#define SOAP_TYPE_monitor_soap__ns1__GetHardwareInfoResponse (51)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetHardwareInfoResponse(struct soap*, const char*, int, const _ns1__GetHardwareInfoResponse *, const char*);
SOAP_FMAC3 _ns1__GetHardwareInfoResponse * SOAP_FMAC4 soap_in__ns1__GetHardwareInfoResponse(struct soap*, const char*, _ns1__GetHardwareInfoResponse *, const char*);

#ifndef soap_write__ns1__GetHardwareInfoResponse
#define soap_write__ns1__GetHardwareInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetHardwareInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetHardwareInfoResponse * SOAP_FMAC4 soap_get__ns1__GetHardwareInfoResponse(struct soap*, _ns1__GetHardwareInfoResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetHardwareInfoResponse
#define soap_read__ns1__GetHardwareInfoResponse(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__GetHardwareInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetHardwareInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__GetHardwareInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetHardwareInfoResponse * soap_new__ns1__GetHardwareInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetHardwareInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetHardwareInfoResponse * soap_new_req__ns1__GetHardwareInfoResponse(struct soap *soap) { _ns1__GetHardwareInfoResponse *_p = soap_instantiate__ns1__GetHardwareInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetHardwareInfoResponse * soap_new_set__ns1__GetHardwareInfoResponse(struct soap *soap, char *GetHardwareInfoResult) { _ns1__GetHardwareInfoResponse *_p = soap_instantiate__ns1__GetHardwareInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetHardwareInfoResponse::GetHardwareInfoResult = GetHardwareInfoResult; } return _p; }

inline void soap_delete__ns1__GetHardwareInfoResponse(struct soap *soap, _ns1__GetHardwareInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetHardwareInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__GetHardwareInfo
#define SOAP_TYPE_monitor_soap__ns1__GetHardwareInfo (50)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetHardwareInfo(struct soap*, const char*, int, const _ns1__GetHardwareInfo *, const char*);
SOAP_FMAC3 _ns1__GetHardwareInfo * SOAP_FMAC4 soap_in__ns1__GetHardwareInfo(struct soap*, const char*, _ns1__GetHardwareInfo *, const char*);

#ifndef soap_write__ns1__GetHardwareInfo
#define soap_write__ns1__GetHardwareInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetHardwareInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetHardwareInfo * SOAP_FMAC4 soap_get__ns1__GetHardwareInfo(struct soap*, _ns1__GetHardwareInfo *, const char*, const char*);

#ifndef soap_read__ns1__GetHardwareInfo
#define soap_read__ns1__GetHardwareInfo(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__GetHardwareInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetHardwareInfo * SOAP_FMAC2 soap_instantiate__ns1__GetHardwareInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetHardwareInfo * soap_new__ns1__GetHardwareInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetHardwareInfo(soap, n, NULL, NULL, NULL); }

inline _ns1__GetHardwareInfo * soap_new_req__ns1__GetHardwareInfo(struct soap *soap) { _ns1__GetHardwareInfo *_p = soap_instantiate__ns1__GetHardwareInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetHardwareInfo * soap_new_set__ns1__GetHardwareInfo(struct soap *soap) { _ns1__GetHardwareInfo *_p = soap_instantiate__ns1__GetHardwareInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetHardwareInfo(struct soap *soap, _ns1__GetHardwareInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetHardwareInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__GetTerminalInfoResponse
#define SOAP_TYPE_monitor_soap__ns1__GetTerminalInfoResponse (49)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTerminalInfoResponse(struct soap*, const char*, int, const _ns1__GetTerminalInfoResponse *, const char*);
SOAP_FMAC3 _ns1__GetTerminalInfoResponse * SOAP_FMAC4 soap_in__ns1__GetTerminalInfoResponse(struct soap*, const char*, _ns1__GetTerminalInfoResponse *, const char*);

#ifndef soap_write__ns1__GetTerminalInfoResponse
#define soap_write__ns1__GetTerminalInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetTerminalInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetTerminalInfoResponse * SOAP_FMAC4 soap_get__ns1__GetTerminalInfoResponse(struct soap*, _ns1__GetTerminalInfoResponse *, const char*, const char*);

#ifndef soap_read__ns1__GetTerminalInfoResponse
#define soap_read__ns1__GetTerminalInfoResponse(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__GetTerminalInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetTerminalInfoResponse * SOAP_FMAC2 soap_instantiate__ns1__GetTerminalInfoResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetTerminalInfoResponse * soap_new__ns1__GetTerminalInfoResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetTerminalInfoResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__GetTerminalInfoResponse * soap_new_req__ns1__GetTerminalInfoResponse(struct soap *soap) { _ns1__GetTerminalInfoResponse *_p = soap_instantiate__ns1__GetTerminalInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetTerminalInfoResponse * soap_new_set__ns1__GetTerminalInfoResponse(struct soap *soap, char *GetTerminalInfoResult) { _ns1__GetTerminalInfoResponse *_p = soap_instantiate__ns1__GetTerminalInfoResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__GetTerminalInfoResponse::GetTerminalInfoResult = GetTerminalInfoResult; } return _p; }

inline void soap_delete__ns1__GetTerminalInfoResponse(struct soap *soap, _ns1__GetTerminalInfoResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetTerminalInfoResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap__ns1__GetTerminalInfo
#define SOAP_TYPE_monitor_soap__ns1__GetTerminalInfo (48)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTerminalInfo(struct soap*, const char*, int, const _ns1__GetTerminalInfo *, const char*);
SOAP_FMAC3 _ns1__GetTerminalInfo * SOAP_FMAC4 soap_in__ns1__GetTerminalInfo(struct soap*, const char*, _ns1__GetTerminalInfo *, const char*);

#ifndef soap_write__ns1__GetTerminalInfo
#define soap_write__ns1__GetTerminalInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:GetTerminalInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetTerminalInfo * SOAP_FMAC4 soap_get__ns1__GetTerminalInfo(struct soap*, _ns1__GetTerminalInfo *, const char*, const char*);

#ifndef soap_read__ns1__GetTerminalInfo
#define soap_read__ns1__GetTerminalInfo(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__ns1__GetTerminalInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__GetTerminalInfo * SOAP_FMAC2 soap_instantiate__ns1__GetTerminalInfo(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetTerminalInfo * soap_new__ns1__GetTerminalInfo(struct soap *soap, int n = -1) { return soap_instantiate__ns1__GetTerminalInfo(soap, n, NULL, NULL, NULL); }

inline _ns1__GetTerminalInfo * soap_new_req__ns1__GetTerminalInfo(struct soap *soap) { _ns1__GetTerminalInfo *_p = soap_instantiate__ns1__GetTerminalInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline _ns1__GetTerminalInfo * soap_new_set__ns1__GetTerminalInfo(struct soap *soap) { _ns1__GetTerminalInfo *_p = soap_instantiate__ns1__GetTerminalInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete__ns1__GetTerminalInfo(struct soap *soap, _ns1__GetTerminalInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetTerminalInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__unsignedShort
#define SOAP_TYPE_monitor_soap_xsd__unsignedShort (46)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap*, const char*, int, const xsd__unsignedShort *, const char*);
SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap*, const char*, xsd__unsignedShort *, const char*);

#ifndef soap_write_xsd__unsignedShort
#define soap_write_xsd__unsignedShort(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:unsignedShort", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap*, xsd__unsignedShort *, const char*, const char*);

#ifndef soap_read_xsd__unsignedShort
#define soap_read_xsd__unsignedShort(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__unsignedShort(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__unsignedShort * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedShort * soap_new_xsd__unsignedShort(struct soap *soap, int n = -1) { return soap_instantiate_xsd__unsignedShort(soap, n, NULL, NULL, NULL); }

inline xsd__unsignedShort * soap_new_req_xsd__unsignedShort(struct soap *soap, unsigned short __item) { xsd__unsignedShort *_p = soap_instantiate_xsd__unsignedShort(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedShort::__item = __item; } return _p; }

inline xsd__unsignedShort * soap_new_set_xsd__unsignedShort(struct soap *soap, unsigned short __item, char *__item1) { xsd__unsignedShort *_p = soap_instantiate_xsd__unsignedShort(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedShort::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedShort(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__unsignedLong
#define SOAP_TYPE_monitor_soap_xsd__unsignedLong (44)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap*, const char*, int, const xsd__unsignedLong *, const char*);
SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap*, const char*, xsd__unsignedLong *, const char*);

#ifndef soap_write_xsd__unsignedLong
#define soap_write_xsd__unsignedLong(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap*, xsd__unsignedLong *, const char*, const char*);

#ifndef soap_read_xsd__unsignedLong
#define soap_read_xsd__unsignedLong(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__unsignedLong(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedLong * soap_new_xsd__unsignedLong(struct soap *soap, int n = -1) { return soap_instantiate_xsd__unsignedLong(soap, n, NULL, NULL, NULL); }

inline xsd__unsignedLong * soap_new_req_xsd__unsignedLong(struct soap *soap, ULONG64 __item) { xsd__unsignedLong *_p = soap_instantiate_xsd__unsignedLong(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedLong::__item = __item; } return _p; }

inline xsd__unsignedLong * soap_new_set_xsd__unsignedLong(struct soap *soap, ULONG64 __item, char *__item1) { xsd__unsignedLong *_p = soap_instantiate_xsd__unsignedLong(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedLong::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedLong(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__unsignedInt
#define SOAP_TYPE_monitor_soap_xsd__unsignedInt (43)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap*, const char*, int, const xsd__unsignedInt *, const char*);
SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap*, const char*, xsd__unsignedInt *, const char*);

#ifndef soap_write_xsd__unsignedInt
#define soap_write_xsd__unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap*, xsd__unsignedInt *, const char*, const char*);

#ifndef soap_read_xsd__unsignedInt
#define soap_read_xsd__unsignedInt(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__unsignedInt * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedInt * soap_new_xsd__unsignedInt(struct soap *soap, int n = -1) { return soap_instantiate_xsd__unsignedInt(soap, n, NULL, NULL, NULL); }

inline xsd__unsignedInt * soap_new_req_xsd__unsignedInt(struct soap *soap, unsigned int __item) { xsd__unsignedInt *_p = soap_instantiate_xsd__unsignedInt(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedInt::__item = __item; } return _p; }

inline xsd__unsignedInt * soap_new_set_xsd__unsignedInt(struct soap *soap, unsigned int __item, char *__item1) { xsd__unsignedInt *_p = soap_instantiate_xsd__unsignedInt(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedInt::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedInt(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__unsignedByte_
#define SOAP_TYPE_monitor_soap_xsd__unsignedByte_ (42)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte_(struct soap*, const char*, int, const xsd__unsignedByte_ *, const char*);
SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_in_xsd__unsignedByte_(struct soap*, const char*, xsd__unsignedByte_ *, const char*);

#ifndef soap_write_xsd__unsignedByte_
#define soap_write_xsd__unsignedByte_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_get_xsd__unsignedByte_(struct soap*, xsd__unsignedByte_ *, const char*, const char*);

#ifndef soap_read_xsd__unsignedByte_
#define soap_read_xsd__unsignedByte_(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__unsignedByte_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__unsignedByte_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__unsignedByte_ * soap_new_xsd__unsignedByte_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__unsignedByte_(soap, n, NULL, NULL, NULL); }

inline xsd__unsignedByte_ * soap_new_req_xsd__unsignedByte_(struct soap *soap, unsigned char __item) { xsd__unsignedByte_ *_p = soap_instantiate_xsd__unsignedByte_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedByte_::__item = __item; } return _p; }

inline xsd__unsignedByte_ * soap_new_set_xsd__unsignedByte_(struct soap *soap, unsigned char __item, char *__item1) { xsd__unsignedByte_ *_p = soap_instantiate_xsd__unsignedByte_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__unsignedByte_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedByte_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__string
#define SOAP_TYPE_monitor_soap_xsd__string (40)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const xsd__string *, const char*);
SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, xsd__string *, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, xsd__string *, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap*, int, const char*, const char*, size_t*);

inline xsd__string * soap_new_xsd__string(struct soap *soap, int n = -1) { return soap_instantiate_xsd__string(soap, n, NULL, NULL, NULL); }

inline xsd__string * soap_new_req_xsd__string(struct soap *soap) { xsd__string *_p = soap_instantiate_xsd__string(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__string * soap_new_set_xsd__string(struct soap *soap, char *__item, char *__item1) { xsd__string *_p = soap_instantiate_xsd__string(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__string::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__string(struct soap *soap, xsd__string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__short
#define SOAP_TYPE_monitor_soap_xsd__short (38)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short(struct soap*, const char*, int, const xsd__short *, const char*);
SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_in_xsd__short(struct soap*, const char*, xsd__short *, const char*);

#ifndef soap_write_xsd__short
#define soap_write_xsd__short(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:short", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_get_xsd__short(struct soap*, xsd__short *, const char*, const char*);

#ifndef soap_read_xsd__short
#define soap_read_xsd__short(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__short(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__short * SOAP_FMAC2 soap_instantiate_xsd__short(struct soap*, int, const char*, const char*, size_t*);

inline xsd__short * soap_new_xsd__short(struct soap *soap, int n = -1) { return soap_instantiate_xsd__short(soap, n, NULL, NULL, NULL); }

inline xsd__short * soap_new_req_xsd__short(struct soap *soap, short __item) { xsd__short *_p = soap_instantiate_xsd__short(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__short::__item = __item; } return _p; }

inline xsd__short * soap_new_set_xsd__short(struct soap *soap, short __item, char *__item1) { xsd__short *_p = soap_instantiate_xsd__short(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__short::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__short(struct soap *soap, xsd__short *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__short(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__long
#define SOAP_TYPE_monitor_soap_xsd__long (36)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap*, const char*, int, const xsd__long *, const char*);
SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap*, const char*, xsd__long *, const char*);

#ifndef soap_write_xsd__long
#define soap_write_xsd__long(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap*, xsd__long *, const char*, const char*);

#ifndef soap_read_xsd__long
#define soap_read_xsd__long(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__long(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap*, int, const char*, const char*, size_t*);

inline xsd__long * soap_new_xsd__long(struct soap *soap, int n = -1) { return soap_instantiate_xsd__long(soap, n, NULL, NULL, NULL); }

inline xsd__long * soap_new_req_xsd__long(struct soap *soap, LONG64 __item) { xsd__long *_p = soap_instantiate_xsd__long(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__long::__item = __item; } return _p; }

inline xsd__long * soap_new_set_xsd__long(struct soap *soap, LONG64 __item, char *__item1) { xsd__long *_p = soap_instantiate_xsd__long(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__long::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__long(struct soap *soap, xsd__long *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__long(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__int
#define SOAP_TYPE_monitor_soap_xsd__int (35)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap*, const char*, int, const xsd__int *, const char*);
SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap*, const char*, xsd__int *, const char*);

#ifndef soap_write_xsd__int
#define soap_write_xsd__int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap*, xsd__int *, const char*, const char*);

#ifndef soap_read_xsd__int
#define soap_read_xsd__int(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap*, int, const char*, const char*, size_t*);

inline xsd__int * soap_new_xsd__int(struct soap *soap, int n = -1) { return soap_instantiate_xsd__int(soap, n, NULL, NULL, NULL); }

inline xsd__int * soap_new_req_xsd__int(struct soap *soap, int __item) { xsd__int *_p = soap_instantiate_xsd__int(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__int::__item = __item; } return _p; }

inline xsd__int * soap_new_set_xsd__int(struct soap *soap, int __item, char *__item1) { xsd__int *_p = soap_instantiate_xsd__int(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__int::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__int(struct soap *soap, xsd__int *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__int(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__float
#define SOAP_TYPE_monitor_soap_xsd__float (33)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap*, const char*, int, const xsd__float *, const char*);
SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap*, const char*, xsd__float *, const char*);

#ifndef soap_write_xsd__float
#define soap_write_xsd__float(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:float", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap*, xsd__float *, const char*, const char*);

#ifndef soap_read_xsd__float
#define soap_read_xsd__float(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__float(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap*, int, const char*, const char*, size_t*);

inline xsd__float * soap_new_xsd__float(struct soap *soap, int n = -1) { return soap_instantiate_xsd__float(soap, n, NULL, NULL, NULL); }

inline xsd__float * soap_new_req_xsd__float(struct soap *soap, float __item) { xsd__float *_p = soap_instantiate_xsd__float(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__float::__item = __item; } return _p; }

inline xsd__float * soap_new_set_xsd__float(struct soap *soap, float __item, char *__item1) { xsd__float *_p = soap_instantiate_xsd__float(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__float::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__float(struct soap *soap, xsd__float *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__float(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__duration_
#define SOAP_TYPE_monitor_soap_xsd__duration_ (32)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap*, const char*, int, const xsd__duration_ *, const char*);
SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap*, const char*, xsd__duration_ *, const char*);

#ifndef soap_write_xsd__duration_
#define soap_write_xsd__duration_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:duration", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap*, xsd__duration_ *, const char*, const char*);

#ifndef soap_read_xsd__duration_
#define soap_read_xsd__duration_(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__duration_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__duration_ * soap_new_xsd__duration_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__duration_(soap, n, NULL, NULL, NULL); }

inline xsd__duration_ * soap_new_req_xsd__duration_(struct soap *soap) { xsd__duration_ *_p = soap_instantiate_xsd__duration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__duration_ * soap_new_set_xsd__duration_(struct soap *soap, char *__item, char *__item1) { xsd__duration_ *_p = soap_instantiate_xsd__duration_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__duration_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__duration_(struct soap *soap, xsd__duration_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__duration_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__double
#define SOAP_TYPE_monitor_soap_xsd__double (29)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap*, const char*, int, const xsd__double *, const char*);
SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_in_xsd__double(struct soap*, const char*, xsd__double *, const char*);

#ifndef soap_write_xsd__double
#define soap_write_xsd__double(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:double", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_get_xsd__double(struct soap*, xsd__double *, const char*, const char*);

#ifndef soap_read_xsd__double
#define soap_read_xsd__double(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__double(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__double * SOAP_FMAC2 soap_instantiate_xsd__double(struct soap*, int, const char*, const char*, size_t*);

inline xsd__double * soap_new_xsd__double(struct soap *soap, int n = -1) { return soap_instantiate_xsd__double(soap, n, NULL, NULL, NULL); }

inline xsd__double * soap_new_req_xsd__double(struct soap *soap, double __item) { xsd__double *_p = soap_instantiate_xsd__double(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__double::__item = __item; } return _p; }

inline xsd__double * soap_new_set_xsd__double(struct soap *soap, double __item, char *__item1) { xsd__double *_p = soap_instantiate_xsd__double(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__double::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__double(struct soap *soap, xsd__double *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__double(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__decimal_
#define SOAP_TYPE_monitor_soap_xsd__decimal_ (28)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal_(struct soap*, const char*, int, const xsd__decimal_ *, const char*);
SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_in_xsd__decimal_(struct soap*, const char*, xsd__decimal_ *, const char*);

#ifndef soap_write_xsd__decimal_
#define soap_write_xsd__decimal_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:decimal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_get_xsd__decimal_(struct soap*, xsd__decimal_ *, const char*, const char*);

#ifndef soap_read_xsd__decimal_
#define soap_read_xsd__decimal_(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__decimal_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__decimal_ * SOAP_FMAC2 soap_instantiate_xsd__decimal_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__decimal_ * soap_new_xsd__decimal_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__decimal_(soap, n, NULL, NULL, NULL); }

inline xsd__decimal_ * soap_new_req_xsd__decimal_(struct soap *soap) { xsd__decimal_ *_p = soap_instantiate_xsd__decimal_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__decimal_ * soap_new_set_xsd__decimal_(struct soap *soap, char *__item, char *__item1) { xsd__decimal_ *_p = soap_instantiate_xsd__decimal_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__decimal_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__decimal_(struct soap *soap, xsd__decimal_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__decimal_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__dateTime
#define SOAP_TYPE_monitor_soap_xsd__dateTime (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap*, const char*, int, const xsd__dateTime *, const char*);
SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap*, const char*, xsd__dateTime *, const char*);

#ifndef soap_write_xsd__dateTime
#define soap_write_xsd__dateTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:dateTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap*, xsd__dateTime *, const char*, const char*);

#ifndef soap_read_xsd__dateTime
#define soap_read_xsd__dateTime(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__dateTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap*, int, const char*, const char*, size_t*);

inline xsd__dateTime * soap_new_xsd__dateTime(struct soap *soap, int n = -1) { return soap_instantiate_xsd__dateTime(soap, n, NULL, NULL, NULL); }

inline xsd__dateTime * soap_new_req_xsd__dateTime(struct soap *soap, time_t __item) { xsd__dateTime *_p = soap_instantiate_xsd__dateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__dateTime::__item = __item; } return _p; }

inline xsd__dateTime * soap_new_set_xsd__dateTime(struct soap *soap, time_t __item, char *__item1) { xsd__dateTime *_p = soap_instantiate_xsd__dateTime(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__dateTime::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__dateTime(struct soap *soap, xsd__dateTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__dateTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__byte_
#define SOAP_TYPE_monitor_soap_xsd__byte_ (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte_(struct soap*, const char*, int, const xsd__byte_ *, const char*);
SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_in_xsd__byte_(struct soap*, const char*, xsd__byte_ *, const char*);

#ifndef soap_write_xsd__byte_
#define soap_write_xsd__byte_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_get_xsd__byte_(struct soap*, xsd__byte_ *, const char*, const char*);

#ifndef soap_read_xsd__byte_
#define soap_read_xsd__byte_(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__byte_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__byte_ * SOAP_FMAC2 soap_instantiate_xsd__byte_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__byte_ * soap_new_xsd__byte_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__byte_(soap, n, NULL, NULL, NULL); }

inline xsd__byte_ * soap_new_req_xsd__byte_(struct soap *soap, char __item) { xsd__byte_ *_p = soap_instantiate_xsd__byte_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__byte_::__item = __item; } return _p; }

inline xsd__byte_ * soap_new_set_xsd__byte_(struct soap *soap, char __item, char *__item1) { xsd__byte_ *_p = soap_instantiate_xsd__byte_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__byte_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__byte_(struct soap *soap, xsd__byte_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__byte_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__boolean
#define SOAP_TYPE_monitor_soap_xsd__boolean (21)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap*, const char*, int, const xsd__boolean *, const char*);
SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap*, const char*, xsd__boolean *, const char*);

#ifndef soap_write_xsd__boolean
#define soap_write_xsd__boolean(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap*, xsd__boolean *, const char*, const char*);

#ifndef soap_read_xsd__boolean
#define soap_read_xsd__boolean(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__boolean(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap*, int, const char*, const char*, size_t*);

inline xsd__boolean * soap_new_xsd__boolean(struct soap *soap, int n = -1) { return soap_instantiate_xsd__boolean(soap, n, NULL, NULL, NULL); }

inline xsd__boolean * soap_new_req_xsd__boolean(struct soap *soap, bool __item) { xsd__boolean *_p = soap_instantiate_xsd__boolean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__boolean::__item = __item; } return _p; }

inline xsd__boolean * soap_new_set_xsd__boolean(struct soap *soap, bool __item, char *__item1) { xsd__boolean *_p = soap_instantiate_xsd__boolean(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__boolean::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__boolean(struct soap *soap, xsd__boolean *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__boolean(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__base64Binary_
#define SOAP_TYPE_monitor_soap_xsd__base64Binary_ (20)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap*, const char*, int, const xsd__base64Binary_ *, const char*);
SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap*, const char*, xsd__base64Binary_ *, const char*);

#ifndef soap_write_xsd__base64Binary_
#define soap_write_xsd__base64Binary_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap*, xsd__base64Binary_ *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary_
#define soap_read_xsd__base64Binary_(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__base64Binary_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary_ * soap_new_xsd__base64Binary_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary_(soap, n, NULL, NULL, NULL); }

inline xsd__base64Binary_ * soap_new_req_xsd__base64Binary_(struct soap *soap, xsd__base64Binary& __item) { xsd__base64Binary_ *_p = soap_instantiate_xsd__base64Binary_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary_::__item = __item; } return _p; }

inline xsd__base64Binary_ * soap_new_set_xsd__base64Binary_(struct soap *soap, xsd__base64Binary& __item, char *__item1) { xsd__base64Binary_ *_p = soap_instantiate_xsd__base64Binary_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__base64Binary
#define SOAP_TYPE_monitor_soap_xsd__base64Binary (16)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap*, const char*, int, const xsd__base64Binary *, const char*);
SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap*, const char*, xsd__base64Binary *, const char*);

#ifndef soap_write_xsd__base64Binary
#define soap_write_xsd__base64Binary(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:base64Binary", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap*, xsd__base64Binary *, const char*, const char*);

#ifndef soap_read_xsd__base64Binary
#define soap_read_xsd__base64Binary(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__base64Binary(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap*, int, const char*, const char*, size_t*);

inline xsd__base64Binary * soap_new_xsd__base64Binary(struct soap *soap, int n = -1) { return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL); }

inline xsd__base64Binary * soap_new_req_xsd__base64Binary(struct soap *soap) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__base64Binary * soap_new_set_xsd__base64Binary(struct soap *soap, unsigned char *__ptr, int __size, char *id, char *type, char *options) { xsd__base64Binary *_p = soap_instantiate_xsd__base64Binary(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__base64Binary::__ptr = __ptr; _p->xsd__base64Binary::__size = __size; _p->xsd__base64Binary::id = id; _p->xsd__base64Binary::type = type; _p->xsd__base64Binary::options = options; } return _p; }

inline void soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__anyURI_
#define SOAP_TYPE_monitor_soap_xsd__anyURI_ (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap*, const char*, int, const xsd__anyURI_ *, const char*);
SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap*, const char*, xsd__anyURI_ *, const char*);

#ifndef soap_write_xsd__anyURI_
#define soap_write_xsd__anyURI_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:anyURI", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap*, xsd__anyURI_ *, const char*, const char*);

#ifndef soap_read_xsd__anyURI_
#define soap_read_xsd__anyURI_(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__anyURI_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyURI_ * soap_new_xsd__anyURI_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyURI_(soap, n, NULL, NULL, NULL); }

inline xsd__anyURI_ * soap_new_req_xsd__anyURI_(struct soap *soap) { xsd__anyURI_ *_p = soap_instantiate_xsd__anyURI_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__anyURI_ * soap_new_set_xsd__anyURI_(struct soap *soap, char *__item, char *__item1) { xsd__anyURI_ *_p = soap_instantiate_xsd__anyURI_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyURI_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyURI_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__QName
#define SOAP_TYPE_monitor_soap_xsd__QName (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const xsd__QName *, const char*);
SOAP_FMAC3 xsd__QName * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, xsd__QName *, const char*);

#ifndef soap_write_xsd__QName
#define soap_write_xsd__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:QName", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__QName * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, xsd__QName *, const char*, const char*);

#ifndef soap_read_xsd__QName
#define soap_read_xsd__QName(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__QName * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline xsd__QName * soap_new_xsd__QName(struct soap *soap, int n = -1) { return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL); }

inline xsd__QName * soap_new_req_xsd__QName(struct soap *soap) { xsd__QName *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__QName * soap_new_set_xsd__QName(struct soap *soap, char *__item, char *__item1) { xsd__QName *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__QName::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__QName(struct soap *soap, xsd__QName *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__IDREF_
#define SOAP_TYPE_monitor_soap_xsd__IDREF_ (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF_(struct soap*, const char*, int, const xsd__IDREF_ *, const char*);
SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_in_xsd__IDREF_(struct soap*, const char*, xsd__IDREF_ *, const char*);

#ifndef soap_write_xsd__IDREF_
#define soap_write_xsd__IDREF_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:IDREF", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_get_xsd__IDREF_(struct soap*, xsd__IDREF_ *, const char*, const char*);

#ifndef soap_read_xsd__IDREF_
#define soap_read_xsd__IDREF_(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__IDREF_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__IDREF_ * SOAP_FMAC2 soap_instantiate_xsd__IDREF_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__IDREF_ * soap_new_xsd__IDREF_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__IDREF_(soap, n, NULL, NULL, NULL); }

inline xsd__IDREF_ * soap_new_req_xsd__IDREF_(struct soap *soap) { xsd__IDREF_ *_p = soap_instantiate_xsd__IDREF_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__IDREF_ * soap_new_set_xsd__IDREF_(struct soap *soap, char *__item, char *__item1) { xsd__IDREF_ *_p = soap_instantiate_xsd__IDREF_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__IDREF_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__IDREF_(struct soap *soap, xsd__IDREF_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__IDREF_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__ID_
#define SOAP_TYPE_monitor_soap_xsd__ID_ (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID_(struct soap*, const char*, int, const xsd__ID_ *, const char*);
SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_in_xsd__ID_(struct soap*, const char*, xsd__ID_ *, const char*);

#ifndef soap_write_xsd__ID_
#define soap_write_xsd__ID_(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:ID", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_get_xsd__ID_(struct soap*, xsd__ID_ *, const char*, const char*);

#ifndef soap_read_xsd__ID_
#define soap_read_xsd__ID_(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__ID_(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__ID_ * SOAP_FMAC2 soap_instantiate_xsd__ID_(struct soap*, int, const char*, const char*, size_t*);

inline xsd__ID_ * soap_new_xsd__ID_(struct soap *soap, int n = -1) { return soap_instantiate_xsd__ID_(soap, n, NULL, NULL, NULL); }

inline xsd__ID_ * soap_new_req_xsd__ID_(struct soap *soap) { xsd__ID_ *_p = soap_instantiate_xsd__ID_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__ID_ * soap_new_set_xsd__ID_(struct soap *soap, char *__item, char *__item1) { xsd__ID_ *_p = soap_instantiate_xsd__ID_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__ID_::__item = __item; _p->xsd__anyType::__item = __item1; } return _p; }

inline void soap_delete_xsd__ID_(struct soap *soap, xsd__ID_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__ID_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap_xsd__anyType
#define SOAP_TYPE_monitor_soap_xsd__anyType (7)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap*, const char*, int, const xsd__anyType *, const char*);
SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap*, const char*, xsd__anyType *, const char*);

#ifndef soap_write_xsd__anyType
#define soap_write_xsd__anyType(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "xsd:anyType", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap*, xsd__anyType *, const char*, const char*);

#ifndef soap_read_xsd__anyType
#define soap_read_xsd__anyType(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__anyType(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap*, int, const char*, const char*, size_t*);

inline xsd__anyType * soap_new_xsd__anyType(struct soap *soap, int n = -1) { return soap_instantiate_xsd__anyType(soap, n, NULL, NULL, NULL); }

inline xsd__anyType * soap_new_req_xsd__anyType(struct soap *soap) { xsd__anyType *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline xsd__anyType * soap_new_set_xsd__anyType(struct soap *soap, char *__item) { xsd__anyType *_p = soap_instantiate_xsd__anyType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->xsd__anyType::__item = __item; } return _p; }

inline void soap_delete_xsd__anyType(struct soap *soap, xsd__anyType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_monitor_soap_SOAP_ENV__Fault
#define SOAP_TYPE_monitor_soap_SOAP_ENV__Fault (120)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_SOAP_ENV__Fault(soap, data),0) || monitor_soap::soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_monitor_soap_SOAP_ENV__Reason
#define SOAP_TYPE_monitor_soap_SOAP_ENV__Reason (119)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_SOAP_ENV__Reason(soap, data),0) || monitor_soap::soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_monitor_soap_SOAP_ENV__Detail
#define SOAP_TYPE_monitor_soap_SOAP_ENV__Detail (117)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_SOAP_ENV__Detail(soap, data),0) || monitor_soap::soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_monitor_soap_SOAP_ENV__Code
#define SOAP_TYPE_monitor_soap_SOAP_ENV__Code (115)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_SOAP_ENV__Code(soap, data),0) || monitor_soap::soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_monitor_soap_SOAP_ENV__Header
#define SOAP_TYPE_monitor_soap_SOAP_ENV__Header (114)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_SOAP_ENV__Header(soap, data),0) || monitor_soap::soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_monitor_soap___ns1__BeepForAWhile
#define SOAP_TYPE_monitor_soap___ns1__BeepForAWhile (113)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BeepForAWhile(struct soap*, struct __ns1__BeepForAWhile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BeepForAWhile(struct soap*, const struct __ns1__BeepForAWhile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BeepForAWhile(struct soap*, const char*, int, const struct __ns1__BeepForAWhile *, const char*);
SOAP_FMAC3 struct __ns1__BeepForAWhile * SOAP_FMAC4 soap_in___ns1__BeepForAWhile(struct soap*, const char*, struct __ns1__BeepForAWhile *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BeepForAWhile(struct soap*, const struct __ns1__BeepForAWhile *, const char*, const char*);

#ifndef soap_write___ns1__BeepForAWhile
#define soap_write___ns1__BeepForAWhile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize___ns1__BeepForAWhile(soap, data),0) || monitor_soap::soap_put___ns1__BeepForAWhile(soap, data, "-ns1:BeepForAWhile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__BeepForAWhile * SOAP_FMAC4 soap_get___ns1__BeepForAWhile(struct soap*, struct __ns1__BeepForAWhile *, const char*, const char*);

#ifndef soap_read___ns1__BeepForAWhile
#define soap_read___ns1__BeepForAWhile(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get___ns1__BeepForAWhile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__BeepForAWhile * SOAP_FMAC2 soap_instantiate___ns1__BeepForAWhile(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__BeepForAWhile * soap_new___ns1__BeepForAWhile(struct soap *soap, int n = -1) { return soap_instantiate___ns1__BeepForAWhile(soap, n, NULL, NULL, NULL); }

inline struct __ns1__BeepForAWhile * soap_new_req___ns1__BeepForAWhile(struct soap *soap) { struct __ns1__BeepForAWhile *_p = soap_instantiate___ns1__BeepForAWhile(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__BeepForAWhile(soap, _p); } return _p; }

inline struct __ns1__BeepForAWhile * soap_new_set___ns1__BeepForAWhile(struct soap *soap, _ns1__BeepForAWhile *ns1__BeepForAWhile) { struct __ns1__BeepForAWhile *_p = soap_instantiate___ns1__BeepForAWhile(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__BeepForAWhile(soap, _p); _p->ns1__BeepForAWhile = ns1__BeepForAWhile; } return _p; }

inline void soap_delete___ns1__BeepForAWhile(struct soap *soap, struct __ns1__BeepForAWhile *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__BeepForAWhile(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap___ns1__Restart
#define SOAP_TYPE_monitor_soap___ns1__Restart (110)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Restart(struct soap*, struct __ns1__Restart *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Restart(struct soap*, const struct __ns1__Restart *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Restart(struct soap*, const char*, int, const struct __ns1__Restart *, const char*);
SOAP_FMAC3 struct __ns1__Restart * SOAP_FMAC4 soap_in___ns1__Restart(struct soap*, const char*, struct __ns1__Restart *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Restart(struct soap*, const struct __ns1__Restart *, const char*, const char*);

#ifndef soap_write___ns1__Restart
#define soap_write___ns1__Restart(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize___ns1__Restart(soap, data),0) || monitor_soap::soap_put___ns1__Restart(soap, data, "-ns1:Restart", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__Restart * SOAP_FMAC4 soap_get___ns1__Restart(struct soap*, struct __ns1__Restart *, const char*, const char*);

#ifndef soap_read___ns1__Restart
#define soap_read___ns1__Restart(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get___ns1__Restart(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__Restart * SOAP_FMAC2 soap_instantiate___ns1__Restart(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Restart * soap_new___ns1__Restart(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Restart(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Restart * soap_new_req___ns1__Restart(struct soap *soap) { struct __ns1__Restart *_p = soap_instantiate___ns1__Restart(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Restart(soap, _p); } return _p; }

inline struct __ns1__Restart * soap_new_set___ns1__Restart(struct soap *soap, _ns1__Restart *ns1__Restart) { struct __ns1__Restart *_p = soap_instantiate___ns1__Restart(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Restart(soap, _p); _p->ns1__Restart = ns1__Restart; } return _p; }

inline void soap_delete___ns1__Restart(struct soap *soap, struct __ns1__Restart *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Restart(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap___ns1__ShutDown
#define SOAP_TYPE_monitor_soap___ns1__ShutDown (107)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__ShutDown(struct soap*, struct __ns1__ShutDown *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__ShutDown(struct soap*, const struct __ns1__ShutDown *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__ShutDown(struct soap*, const char*, int, const struct __ns1__ShutDown *, const char*);
SOAP_FMAC3 struct __ns1__ShutDown * SOAP_FMAC4 soap_in___ns1__ShutDown(struct soap*, const char*, struct __ns1__ShutDown *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__ShutDown(struct soap*, const struct __ns1__ShutDown *, const char*, const char*);

#ifndef soap_write___ns1__ShutDown
#define soap_write___ns1__ShutDown(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize___ns1__ShutDown(soap, data),0) || monitor_soap::soap_put___ns1__ShutDown(soap, data, "-ns1:ShutDown", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__ShutDown * SOAP_FMAC4 soap_get___ns1__ShutDown(struct soap*, struct __ns1__ShutDown *, const char*, const char*);

#ifndef soap_read___ns1__ShutDown
#define soap_read___ns1__ShutDown(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get___ns1__ShutDown(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__ShutDown * SOAP_FMAC2 soap_instantiate___ns1__ShutDown(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__ShutDown * soap_new___ns1__ShutDown(struct soap *soap, int n = -1) { return soap_instantiate___ns1__ShutDown(soap, n, NULL, NULL, NULL); }

inline struct __ns1__ShutDown * soap_new_req___ns1__ShutDown(struct soap *soap) { struct __ns1__ShutDown *_p = soap_instantiate___ns1__ShutDown(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__ShutDown(soap, _p); } return _p; }

inline struct __ns1__ShutDown * soap_new_set___ns1__ShutDown(struct soap *soap, _ns1__ShutDown *ns1__ShutDown) { struct __ns1__ShutDown *_p = soap_instantiate___ns1__ShutDown(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__ShutDown(soap, _p); _p->ns1__ShutDown = ns1__ShutDown; } return _p; }

inline void soap_delete___ns1__ShutDown(struct soap *soap, struct __ns1__ShutDown *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__ShutDown(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap___ns1__SetThreadPriority
#define SOAP_TYPE_monitor_soap___ns1__SetThreadPriority (103)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetThreadPriority(struct soap*, struct __ns1__SetThreadPriority *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetThreadPriority(struct soap*, const struct __ns1__SetThreadPriority *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetThreadPriority(struct soap*, const char*, int, const struct __ns1__SetThreadPriority *, const char*);
SOAP_FMAC3 struct __ns1__SetThreadPriority * SOAP_FMAC4 soap_in___ns1__SetThreadPriority(struct soap*, const char*, struct __ns1__SetThreadPriority *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetThreadPriority(struct soap*, const struct __ns1__SetThreadPriority *, const char*, const char*);

#ifndef soap_write___ns1__SetThreadPriority
#define soap_write___ns1__SetThreadPriority(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize___ns1__SetThreadPriority(soap, data),0) || monitor_soap::soap_put___ns1__SetThreadPriority(soap, data, "-ns1:SetThreadPriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetThreadPriority * SOAP_FMAC4 soap_get___ns1__SetThreadPriority(struct soap*, struct __ns1__SetThreadPriority *, const char*, const char*);

#ifndef soap_read___ns1__SetThreadPriority
#define soap_read___ns1__SetThreadPriority(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get___ns1__SetThreadPriority(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetThreadPriority * SOAP_FMAC2 soap_instantiate___ns1__SetThreadPriority(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetThreadPriority * soap_new___ns1__SetThreadPriority(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetThreadPriority(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetThreadPriority * soap_new_req___ns1__SetThreadPriority(struct soap *soap) { struct __ns1__SetThreadPriority *_p = soap_instantiate___ns1__SetThreadPriority(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetThreadPriority(soap, _p); } return _p; }

inline struct __ns1__SetThreadPriority * soap_new_set___ns1__SetThreadPriority(struct soap *soap, _ns1__SetThreadPriority *ns1__SetThreadPriority) { struct __ns1__SetThreadPriority *_p = soap_instantiate___ns1__SetThreadPriority(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetThreadPriority(soap, _p); _p->ns1__SetThreadPriority = ns1__SetThreadPriority; } return _p; }

inline void soap_delete___ns1__SetThreadPriority(struct soap *soap, struct __ns1__SetThreadPriority *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetThreadPriority(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap___ns1__SetProcessPriority
#define SOAP_TYPE_monitor_soap___ns1__SetProcessPriority (99)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__SetProcessPriority(struct soap*, struct __ns1__SetProcessPriority *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__SetProcessPriority(struct soap*, const struct __ns1__SetProcessPriority *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__SetProcessPriority(struct soap*, const char*, int, const struct __ns1__SetProcessPriority *, const char*);
SOAP_FMAC3 struct __ns1__SetProcessPriority * SOAP_FMAC4 soap_in___ns1__SetProcessPriority(struct soap*, const char*, struct __ns1__SetProcessPriority *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__SetProcessPriority(struct soap*, const struct __ns1__SetProcessPriority *, const char*, const char*);

#ifndef soap_write___ns1__SetProcessPriority
#define soap_write___ns1__SetProcessPriority(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize___ns1__SetProcessPriority(soap, data),0) || monitor_soap::soap_put___ns1__SetProcessPriority(soap, data, "-ns1:SetProcessPriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__SetProcessPriority * SOAP_FMAC4 soap_get___ns1__SetProcessPriority(struct soap*, struct __ns1__SetProcessPriority *, const char*, const char*);

#ifndef soap_read___ns1__SetProcessPriority
#define soap_read___ns1__SetProcessPriority(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get___ns1__SetProcessPriority(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__SetProcessPriority * SOAP_FMAC2 soap_instantiate___ns1__SetProcessPriority(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__SetProcessPriority * soap_new___ns1__SetProcessPriority(struct soap *soap, int n = -1) { return soap_instantiate___ns1__SetProcessPriority(soap, n, NULL, NULL, NULL); }

inline struct __ns1__SetProcessPriority * soap_new_req___ns1__SetProcessPriority(struct soap *soap) { struct __ns1__SetProcessPriority *_p = soap_instantiate___ns1__SetProcessPriority(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetProcessPriority(soap, _p); } return _p; }

inline struct __ns1__SetProcessPriority * soap_new_set___ns1__SetProcessPriority(struct soap *soap, _ns1__SetProcessPriority *ns1__SetProcessPriority) { struct __ns1__SetProcessPriority *_p = soap_instantiate___ns1__SetProcessPriority(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__SetProcessPriority(soap, _p); _p->ns1__SetProcessPriority = ns1__SetProcessPriority; } return _p; }

inline void soap_delete___ns1__SetProcessPriority(struct soap *soap, struct __ns1__SetProcessPriority *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__SetProcessPriority(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap___ns1__KillProcess
#define SOAP_TYPE_monitor_soap___ns1__KillProcess (95)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__KillProcess(struct soap*, struct __ns1__KillProcess *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__KillProcess(struct soap*, const struct __ns1__KillProcess *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__KillProcess(struct soap*, const char*, int, const struct __ns1__KillProcess *, const char*);
SOAP_FMAC3 struct __ns1__KillProcess * SOAP_FMAC4 soap_in___ns1__KillProcess(struct soap*, const char*, struct __ns1__KillProcess *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__KillProcess(struct soap*, const struct __ns1__KillProcess *, const char*, const char*);

#ifndef soap_write___ns1__KillProcess
#define soap_write___ns1__KillProcess(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize___ns1__KillProcess(soap, data),0) || monitor_soap::soap_put___ns1__KillProcess(soap, data, "-ns1:KillProcess", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__KillProcess * SOAP_FMAC4 soap_get___ns1__KillProcess(struct soap*, struct __ns1__KillProcess *, const char*, const char*);

#ifndef soap_read___ns1__KillProcess
#define soap_read___ns1__KillProcess(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get___ns1__KillProcess(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__KillProcess * SOAP_FMAC2 soap_instantiate___ns1__KillProcess(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__KillProcess * soap_new___ns1__KillProcess(struct soap *soap, int n = -1) { return soap_instantiate___ns1__KillProcess(soap, n, NULL, NULL, NULL); }

inline struct __ns1__KillProcess * soap_new_req___ns1__KillProcess(struct soap *soap) { struct __ns1__KillProcess *_p = soap_instantiate___ns1__KillProcess(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__KillProcess(soap, _p); } return _p; }

inline struct __ns1__KillProcess * soap_new_set___ns1__KillProcess(struct soap *soap, _ns1__KillProcess *ns1__KillProcess) { struct __ns1__KillProcess *_p = soap_instantiate___ns1__KillProcess(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__KillProcess(soap, _p); _p->ns1__KillProcess = ns1__KillProcess; } return _p; }

inline void soap_delete___ns1__KillProcess(struct soap *soap, struct __ns1__KillProcess *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__KillProcess(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap___ns1__GetThreadInfo
#define SOAP_TYPE_monitor_soap___ns1__GetThreadInfo (91)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetThreadInfo(struct soap*, struct __ns1__GetThreadInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetThreadInfo(struct soap*, const struct __ns1__GetThreadInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetThreadInfo(struct soap*, const char*, int, const struct __ns1__GetThreadInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetThreadInfo * SOAP_FMAC4 soap_in___ns1__GetThreadInfo(struct soap*, const char*, struct __ns1__GetThreadInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetThreadInfo(struct soap*, const struct __ns1__GetThreadInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetThreadInfo
#define soap_write___ns1__GetThreadInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize___ns1__GetThreadInfo(soap, data),0) || monitor_soap::soap_put___ns1__GetThreadInfo(soap, data, "-ns1:GetThreadInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetThreadInfo * SOAP_FMAC4 soap_get___ns1__GetThreadInfo(struct soap*, struct __ns1__GetThreadInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetThreadInfo
#define soap_read___ns1__GetThreadInfo(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get___ns1__GetThreadInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetThreadInfo * SOAP_FMAC2 soap_instantiate___ns1__GetThreadInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetThreadInfo * soap_new___ns1__GetThreadInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetThreadInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetThreadInfo * soap_new_req___ns1__GetThreadInfo(struct soap *soap) { struct __ns1__GetThreadInfo *_p = soap_instantiate___ns1__GetThreadInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetThreadInfo(soap, _p); } return _p; }

inline struct __ns1__GetThreadInfo * soap_new_set___ns1__GetThreadInfo(struct soap *soap, _ns1__GetThreadInfo *ns1__GetThreadInfo) { struct __ns1__GetThreadInfo *_p = soap_instantiate___ns1__GetThreadInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetThreadInfo(soap, _p); _p->ns1__GetThreadInfo = ns1__GetThreadInfo; } return _p; }

inline void soap_delete___ns1__GetThreadInfo(struct soap *soap, struct __ns1__GetThreadInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetThreadInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap___ns1__GetProcessInfo
#define SOAP_TYPE_monitor_soap___ns1__GetProcessInfo (87)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetProcessInfo(struct soap*, struct __ns1__GetProcessInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetProcessInfo(struct soap*, const struct __ns1__GetProcessInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetProcessInfo(struct soap*, const char*, int, const struct __ns1__GetProcessInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetProcessInfo * SOAP_FMAC4 soap_in___ns1__GetProcessInfo(struct soap*, const char*, struct __ns1__GetProcessInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetProcessInfo(struct soap*, const struct __ns1__GetProcessInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetProcessInfo
#define soap_write___ns1__GetProcessInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize___ns1__GetProcessInfo(soap, data),0) || monitor_soap::soap_put___ns1__GetProcessInfo(soap, data, "-ns1:GetProcessInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetProcessInfo * SOAP_FMAC4 soap_get___ns1__GetProcessInfo(struct soap*, struct __ns1__GetProcessInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetProcessInfo
#define soap_read___ns1__GetProcessInfo(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get___ns1__GetProcessInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetProcessInfo * SOAP_FMAC2 soap_instantiate___ns1__GetProcessInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetProcessInfo * soap_new___ns1__GetProcessInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetProcessInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetProcessInfo * soap_new_req___ns1__GetProcessInfo(struct soap *soap) { struct __ns1__GetProcessInfo *_p = soap_instantiate___ns1__GetProcessInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetProcessInfo(soap, _p); } return _p; }

inline struct __ns1__GetProcessInfo * soap_new_set___ns1__GetProcessInfo(struct soap *soap, _ns1__GetProcessInfo *ns1__GetProcessInfo) { struct __ns1__GetProcessInfo *_p = soap_instantiate___ns1__GetProcessInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetProcessInfo(soap, _p); _p->ns1__GetProcessInfo = ns1__GetProcessInfo; } return _p; }

inline void soap_delete___ns1__GetProcessInfo(struct soap *soap, struct __ns1__GetProcessInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetProcessInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap___ns1__GetHardwareInfo
#define SOAP_TYPE_monitor_soap___ns1__GetHardwareInfo (83)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetHardwareInfo(struct soap*, struct __ns1__GetHardwareInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetHardwareInfo(struct soap*, const struct __ns1__GetHardwareInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetHardwareInfo(struct soap*, const char*, int, const struct __ns1__GetHardwareInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetHardwareInfo * SOAP_FMAC4 soap_in___ns1__GetHardwareInfo(struct soap*, const char*, struct __ns1__GetHardwareInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetHardwareInfo(struct soap*, const struct __ns1__GetHardwareInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetHardwareInfo
#define soap_write___ns1__GetHardwareInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize___ns1__GetHardwareInfo(soap, data),0) || monitor_soap::soap_put___ns1__GetHardwareInfo(soap, data, "-ns1:GetHardwareInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetHardwareInfo * SOAP_FMAC4 soap_get___ns1__GetHardwareInfo(struct soap*, struct __ns1__GetHardwareInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetHardwareInfo
#define soap_read___ns1__GetHardwareInfo(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get___ns1__GetHardwareInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetHardwareInfo * SOAP_FMAC2 soap_instantiate___ns1__GetHardwareInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetHardwareInfo * soap_new___ns1__GetHardwareInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetHardwareInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetHardwareInfo * soap_new_req___ns1__GetHardwareInfo(struct soap *soap) { struct __ns1__GetHardwareInfo *_p = soap_instantiate___ns1__GetHardwareInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetHardwareInfo(soap, _p); } return _p; }

inline struct __ns1__GetHardwareInfo * soap_new_set___ns1__GetHardwareInfo(struct soap *soap, _ns1__GetHardwareInfo *ns1__GetHardwareInfo) { struct __ns1__GetHardwareInfo *_p = soap_instantiate___ns1__GetHardwareInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetHardwareInfo(soap, _p); _p->ns1__GetHardwareInfo = ns1__GetHardwareInfo; } return _p; }

inline void soap_delete___ns1__GetHardwareInfo(struct soap *soap, struct __ns1__GetHardwareInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetHardwareInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_monitor_soap___ns1__GetTerminalInfo
#define SOAP_TYPE_monitor_soap___ns1__GetTerminalInfo (79)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTerminalInfo(struct soap*, struct __ns1__GetTerminalInfo *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTerminalInfo(struct soap*, const struct __ns1__GetTerminalInfo *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTerminalInfo(struct soap*, const char*, int, const struct __ns1__GetTerminalInfo *, const char*);
SOAP_FMAC3 struct __ns1__GetTerminalInfo * SOAP_FMAC4 soap_in___ns1__GetTerminalInfo(struct soap*, const char*, struct __ns1__GetTerminalInfo *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTerminalInfo(struct soap*, const struct __ns1__GetTerminalInfo *, const char*, const char*);

#ifndef soap_write___ns1__GetTerminalInfo
#define soap_write___ns1__GetTerminalInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize___ns1__GetTerminalInfo(soap, data),0) || monitor_soap::soap_put___ns1__GetTerminalInfo(soap, data, "-ns1:GetTerminalInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct __ns1__GetTerminalInfo * SOAP_FMAC4 soap_get___ns1__GetTerminalInfo(struct soap*, struct __ns1__GetTerminalInfo *, const char*, const char*);

#ifndef soap_read___ns1__GetTerminalInfo
#define soap_read___ns1__GetTerminalInfo(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get___ns1__GetTerminalInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct __ns1__GetTerminalInfo * SOAP_FMAC2 soap_instantiate___ns1__GetTerminalInfo(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetTerminalInfo * soap_new___ns1__GetTerminalInfo(struct soap *soap, int n = -1) { return soap_instantiate___ns1__GetTerminalInfo(soap, n, NULL, NULL, NULL); }

inline struct __ns1__GetTerminalInfo * soap_new_req___ns1__GetTerminalInfo(struct soap *soap) { struct __ns1__GetTerminalInfo *_p = soap_instantiate___ns1__GetTerminalInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetTerminalInfo(soap, _p); } return _p; }

inline struct __ns1__GetTerminalInfo * soap_new_set___ns1__GetTerminalInfo(struct soap *soap, _ns1__GetTerminalInfo *ns1__GetTerminalInfo) { struct __ns1__GetTerminalInfo *_p = soap_instantiate___ns1__GetTerminalInfo(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__GetTerminalInfo(soap, _p); _p->ns1__GetTerminalInfo = ns1__GetTerminalInfo; } return _p; }

inline void soap_delete___ns1__GetTerminalInfo(struct soap *soap, struct __ns1__GetTerminalInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetTerminalInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_monitor_soap_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_monitor_soap_PointerToSOAP_ENV__Reason (122)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || monitor_soap::soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_monitor_soap_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_monitor_soap_PointerToSOAP_ENV__Detail (121)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || monitor_soap::soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_monitor_soap_PointerToSOAP_ENV__Code
#define SOAP_TYPE_monitor_soap_PointerToSOAP_ENV__Code (116)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || monitor_soap::soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__BeepForAWhile
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__BeepForAWhile (111)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__BeepForAWhile(struct soap*, _ns1__BeepForAWhile *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__BeepForAWhile(struct soap*, const char *, int, _ns1__BeepForAWhile *const*, const char *);
SOAP_FMAC3 _ns1__BeepForAWhile ** SOAP_FMAC4 soap_in_PointerTo_ns1__BeepForAWhile(struct soap*, const char*, _ns1__BeepForAWhile **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__BeepForAWhile(struct soap*, _ns1__BeepForAWhile *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__BeepForAWhile
#define soap_write_PointerTo_ns1__BeepForAWhile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__BeepForAWhile(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__BeepForAWhile(soap, data, "ns1:BeepForAWhile", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__BeepForAWhile ** SOAP_FMAC4 soap_get_PointerTo_ns1__BeepForAWhile(struct soap*, _ns1__BeepForAWhile **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__BeepForAWhile
#define soap_read_PointerTo_ns1__BeepForAWhile(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__BeepForAWhile(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__Restart
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__Restart (108)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Restart(struct soap*, _ns1__Restart *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Restart(struct soap*, const char *, int, _ns1__Restart *const*, const char *);
SOAP_FMAC3 _ns1__Restart ** SOAP_FMAC4 soap_in_PointerTo_ns1__Restart(struct soap*, const char*, _ns1__Restart **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Restart(struct soap*, _ns1__Restart *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__Restart
#define soap_write_PointerTo_ns1__Restart(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__Restart(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__Restart(soap, data, "ns1:Restart", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__Restart ** SOAP_FMAC4 soap_get_PointerTo_ns1__Restart(struct soap*, _ns1__Restart **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__Restart
#define soap_read_PointerTo_ns1__Restart(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__Restart(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__ShutDown
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__ShutDown (104)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ShutDown(struct soap*, _ns1__ShutDown *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ShutDown(struct soap*, const char *, int, _ns1__ShutDown *const*, const char *);
SOAP_FMAC3 _ns1__ShutDown ** SOAP_FMAC4 soap_in_PointerTo_ns1__ShutDown(struct soap*, const char*, _ns1__ShutDown **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ShutDown(struct soap*, _ns1__ShutDown *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__ShutDown
#define soap_write_PointerTo_ns1__ShutDown(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__ShutDown(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__ShutDown(soap, data, "ns1:ShutDown", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__ShutDown ** SOAP_FMAC4 soap_get_PointerTo_ns1__ShutDown(struct soap*, _ns1__ShutDown **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__ShutDown
#define soap_read_PointerTo_ns1__ShutDown(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__ShutDown(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__SetThreadPriorityResponse
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__SetThreadPriorityResponse (101)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetThreadPriorityResponse(struct soap*, _ns1__SetThreadPriorityResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetThreadPriorityResponse(struct soap*, const char *, int, _ns1__SetThreadPriorityResponse *const*, const char *);
SOAP_FMAC3 _ns1__SetThreadPriorityResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetThreadPriorityResponse(struct soap*, const char*, _ns1__SetThreadPriorityResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetThreadPriorityResponse(struct soap*, _ns1__SetThreadPriorityResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetThreadPriorityResponse
#define soap_write_PointerTo_ns1__SetThreadPriorityResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__SetThreadPriorityResponse(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__SetThreadPriorityResponse(soap, data, "ns1:SetThreadPriorityResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetThreadPriorityResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetThreadPriorityResponse(struct soap*, _ns1__SetThreadPriorityResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetThreadPriorityResponse
#define soap_read_PointerTo_ns1__SetThreadPriorityResponse(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__SetThreadPriorityResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__SetThreadPriority
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__SetThreadPriority (100)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetThreadPriority(struct soap*, _ns1__SetThreadPriority *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetThreadPriority(struct soap*, const char *, int, _ns1__SetThreadPriority *const*, const char *);
SOAP_FMAC3 _ns1__SetThreadPriority ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetThreadPriority(struct soap*, const char*, _ns1__SetThreadPriority **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetThreadPriority(struct soap*, _ns1__SetThreadPriority *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetThreadPriority
#define soap_write_PointerTo_ns1__SetThreadPriority(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__SetThreadPriority(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__SetThreadPriority(soap, data, "ns1:SetThreadPriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetThreadPriority ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetThreadPriority(struct soap*, _ns1__SetThreadPriority **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetThreadPriority
#define soap_read_PointerTo_ns1__SetThreadPriority(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__SetThreadPriority(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__SetProcessPriorityResponse
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__SetProcessPriorityResponse (97)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetProcessPriorityResponse(struct soap*, _ns1__SetProcessPriorityResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetProcessPriorityResponse(struct soap*, const char *, int, _ns1__SetProcessPriorityResponse *const*, const char *);
SOAP_FMAC3 _ns1__SetProcessPriorityResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetProcessPriorityResponse(struct soap*, const char*, _ns1__SetProcessPriorityResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetProcessPriorityResponse(struct soap*, _ns1__SetProcessPriorityResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetProcessPriorityResponse
#define soap_write_PointerTo_ns1__SetProcessPriorityResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__SetProcessPriorityResponse(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__SetProcessPriorityResponse(soap, data, "ns1:SetProcessPriorityResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetProcessPriorityResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetProcessPriorityResponse(struct soap*, _ns1__SetProcessPriorityResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetProcessPriorityResponse
#define soap_read_PointerTo_ns1__SetProcessPriorityResponse(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__SetProcessPriorityResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__SetProcessPriority
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__SetProcessPriority (96)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SetProcessPriority(struct soap*, _ns1__SetProcessPriority *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SetProcessPriority(struct soap*, const char *, int, _ns1__SetProcessPriority *const*, const char *);
SOAP_FMAC3 _ns1__SetProcessPriority ** SOAP_FMAC4 soap_in_PointerTo_ns1__SetProcessPriority(struct soap*, const char*, _ns1__SetProcessPriority **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SetProcessPriority(struct soap*, _ns1__SetProcessPriority *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__SetProcessPriority
#define soap_write_PointerTo_ns1__SetProcessPriority(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__SetProcessPriority(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__SetProcessPriority(soap, data, "ns1:SetProcessPriority", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__SetProcessPriority ** SOAP_FMAC4 soap_get_PointerTo_ns1__SetProcessPriority(struct soap*, _ns1__SetProcessPriority **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__SetProcessPriority
#define soap_read_PointerTo_ns1__SetProcessPriority(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__SetProcessPriority(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__KillProcessResponse
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__KillProcessResponse (93)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__KillProcessResponse(struct soap*, _ns1__KillProcessResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__KillProcessResponse(struct soap*, const char *, int, _ns1__KillProcessResponse *const*, const char *);
SOAP_FMAC3 _ns1__KillProcessResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__KillProcessResponse(struct soap*, const char*, _ns1__KillProcessResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__KillProcessResponse(struct soap*, _ns1__KillProcessResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__KillProcessResponse
#define soap_write_PointerTo_ns1__KillProcessResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__KillProcessResponse(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__KillProcessResponse(soap, data, "ns1:KillProcessResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__KillProcessResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__KillProcessResponse(struct soap*, _ns1__KillProcessResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__KillProcessResponse
#define soap_read_PointerTo_ns1__KillProcessResponse(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__KillProcessResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__KillProcess
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__KillProcess (92)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__KillProcess(struct soap*, _ns1__KillProcess *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__KillProcess(struct soap*, const char *, int, _ns1__KillProcess *const*, const char *);
SOAP_FMAC3 _ns1__KillProcess ** SOAP_FMAC4 soap_in_PointerTo_ns1__KillProcess(struct soap*, const char*, _ns1__KillProcess **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__KillProcess(struct soap*, _ns1__KillProcess *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__KillProcess
#define soap_write_PointerTo_ns1__KillProcess(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__KillProcess(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__KillProcess(soap, data, "ns1:KillProcess", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__KillProcess ** SOAP_FMAC4 soap_get_PointerTo_ns1__KillProcess(struct soap*, _ns1__KillProcess **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__KillProcess
#define soap_read_PointerTo_ns1__KillProcess(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__KillProcess(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__GetThreadInfoResponse
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__GetThreadInfoResponse (89)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetThreadInfoResponse(struct soap*, _ns1__GetThreadInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetThreadInfoResponse(struct soap*, const char *, int, _ns1__GetThreadInfoResponse *const*, const char *);
SOAP_FMAC3 _ns1__GetThreadInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetThreadInfoResponse(struct soap*, const char*, _ns1__GetThreadInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetThreadInfoResponse(struct soap*, _ns1__GetThreadInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetThreadInfoResponse
#define soap_write_PointerTo_ns1__GetThreadInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__GetThreadInfoResponse(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__GetThreadInfoResponse(soap, data, "ns1:GetThreadInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetThreadInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetThreadInfoResponse(struct soap*, _ns1__GetThreadInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetThreadInfoResponse
#define soap_read_PointerTo_ns1__GetThreadInfoResponse(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__GetThreadInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__GetThreadInfo
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__GetThreadInfo (88)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetThreadInfo(struct soap*, _ns1__GetThreadInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetThreadInfo(struct soap*, const char *, int, _ns1__GetThreadInfo *const*, const char *);
SOAP_FMAC3 _ns1__GetThreadInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetThreadInfo(struct soap*, const char*, _ns1__GetThreadInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetThreadInfo(struct soap*, _ns1__GetThreadInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetThreadInfo
#define soap_write_PointerTo_ns1__GetThreadInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__GetThreadInfo(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__GetThreadInfo(soap, data, "ns1:GetThreadInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetThreadInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetThreadInfo(struct soap*, _ns1__GetThreadInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetThreadInfo
#define soap_read_PointerTo_ns1__GetThreadInfo(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__GetThreadInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__GetProcessInfoResponse
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__GetProcessInfoResponse (85)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetProcessInfoResponse(struct soap*, _ns1__GetProcessInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetProcessInfoResponse(struct soap*, const char *, int, _ns1__GetProcessInfoResponse *const*, const char *);
SOAP_FMAC3 _ns1__GetProcessInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetProcessInfoResponse(struct soap*, const char*, _ns1__GetProcessInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetProcessInfoResponse(struct soap*, _ns1__GetProcessInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetProcessInfoResponse
#define soap_write_PointerTo_ns1__GetProcessInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__GetProcessInfoResponse(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__GetProcessInfoResponse(soap, data, "ns1:GetProcessInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetProcessInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetProcessInfoResponse(struct soap*, _ns1__GetProcessInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetProcessInfoResponse
#define soap_read_PointerTo_ns1__GetProcessInfoResponse(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__GetProcessInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__GetProcessInfo
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__GetProcessInfo (84)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetProcessInfo(struct soap*, _ns1__GetProcessInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetProcessInfo(struct soap*, const char *, int, _ns1__GetProcessInfo *const*, const char *);
SOAP_FMAC3 _ns1__GetProcessInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetProcessInfo(struct soap*, const char*, _ns1__GetProcessInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetProcessInfo(struct soap*, _ns1__GetProcessInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetProcessInfo
#define soap_write_PointerTo_ns1__GetProcessInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__GetProcessInfo(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__GetProcessInfo(soap, data, "ns1:GetProcessInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetProcessInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetProcessInfo(struct soap*, _ns1__GetProcessInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetProcessInfo
#define soap_read_PointerTo_ns1__GetProcessInfo(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__GetProcessInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__GetHardwareInfoResponse
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__GetHardwareInfoResponse (81)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetHardwareInfoResponse(struct soap*, _ns1__GetHardwareInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetHardwareInfoResponse(struct soap*, const char *, int, _ns1__GetHardwareInfoResponse *const*, const char *);
SOAP_FMAC3 _ns1__GetHardwareInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetHardwareInfoResponse(struct soap*, const char*, _ns1__GetHardwareInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetHardwareInfoResponse(struct soap*, _ns1__GetHardwareInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetHardwareInfoResponse
#define soap_write_PointerTo_ns1__GetHardwareInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__GetHardwareInfoResponse(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__GetHardwareInfoResponse(soap, data, "ns1:GetHardwareInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetHardwareInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetHardwareInfoResponse(struct soap*, _ns1__GetHardwareInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetHardwareInfoResponse
#define soap_read_PointerTo_ns1__GetHardwareInfoResponse(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__GetHardwareInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__GetHardwareInfo
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__GetHardwareInfo (80)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetHardwareInfo(struct soap*, _ns1__GetHardwareInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetHardwareInfo(struct soap*, const char *, int, _ns1__GetHardwareInfo *const*, const char *);
SOAP_FMAC3 _ns1__GetHardwareInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetHardwareInfo(struct soap*, const char*, _ns1__GetHardwareInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetHardwareInfo(struct soap*, _ns1__GetHardwareInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetHardwareInfo
#define soap_write_PointerTo_ns1__GetHardwareInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__GetHardwareInfo(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__GetHardwareInfo(soap, data, "ns1:GetHardwareInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetHardwareInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetHardwareInfo(struct soap*, _ns1__GetHardwareInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetHardwareInfo
#define soap_read_PointerTo_ns1__GetHardwareInfo(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__GetHardwareInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__GetTerminalInfoResponse
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__GetTerminalInfoResponse (77)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTerminalInfoResponse(struct soap*, _ns1__GetTerminalInfoResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTerminalInfoResponse(struct soap*, const char *, int, _ns1__GetTerminalInfoResponse *const*, const char *);
SOAP_FMAC3 _ns1__GetTerminalInfoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTerminalInfoResponse(struct soap*, const char*, _ns1__GetTerminalInfoResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTerminalInfoResponse(struct soap*, _ns1__GetTerminalInfoResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetTerminalInfoResponse
#define soap_write_PointerTo_ns1__GetTerminalInfoResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__GetTerminalInfoResponse(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__GetTerminalInfoResponse(soap, data, "ns1:GetTerminalInfoResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetTerminalInfoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTerminalInfoResponse(struct soap*, _ns1__GetTerminalInfoResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetTerminalInfoResponse
#define soap_read_PointerTo_ns1__GetTerminalInfoResponse(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__GetTerminalInfoResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTo_ns1__GetTerminalInfo
#define SOAP_TYPE_monitor_soap_PointerTo_ns1__GetTerminalInfo (76)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTerminalInfo(struct soap*, _ns1__GetTerminalInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTerminalInfo(struct soap*, const char *, int, _ns1__GetTerminalInfo *const*, const char *);
SOAP_FMAC3 _ns1__GetTerminalInfo ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTerminalInfo(struct soap*, const char*, _ns1__GetTerminalInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTerminalInfo(struct soap*, _ns1__GetTerminalInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__GetTerminalInfo
#define soap_write_PointerTo_ns1__GetTerminalInfo(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTo_ns1__GetTerminalInfo(soap, data),0) || monitor_soap::soap_put_PointerTo_ns1__GetTerminalInfo(soap, data, "ns1:GetTerminalInfo", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__GetTerminalInfo ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTerminalInfo(struct soap*, _ns1__GetTerminalInfo **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__GetTerminalInfo
#define soap_read_PointerTo_ns1__GetTerminalInfo(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTo_ns1__GetTerminalInfo(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTostring
#define SOAP_TYPE_monitor_soap_PointerTostring (75)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);

#ifndef soap_write_PointerTostring
#define soap_write_PointerTostring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTostring(soap, data),0) || monitor_soap::soap_put_PointerTostring(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);

#ifndef soap_read_PointerTostring
#define soap_read_PointerTostring(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTostring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTobool
#define SOAP_TYPE_monitor_soap_PointerTobool (74)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTobool(struct soap*, bool *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTobool(struct soap*, const char *, int, bool *const*, const char *);
SOAP_FMAC3 bool ** SOAP_FMAC4 soap_in_PointerTobool(struct soap*, const char*, bool **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTobool(struct soap*, bool *const*, const char*, const char*);

#ifndef soap_write_PointerTobool
#define soap_write_PointerTobool(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTobool(soap, data),0) || monitor_soap::soap_put_PointerTobool(soap, data, "boolean", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 bool ** SOAP_FMAC4 soap_get_PointerTobool(struct soap*, bool **, const char*, const char*);

#ifndef soap_read_PointerTobool
#define soap_read_PointerTobool(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTobool(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTons4__ArrayOfstring
#define SOAP_TYPE_monitor_soap_PointerTons4__ArrayOfstring (73)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ArrayOfstring(struct soap*, ns4__ArrayOfstring *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ArrayOfstring(struct soap*, const char *, int, ns4__ArrayOfstring *const*, const char *);
SOAP_FMAC3 ns4__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerTons4__ArrayOfstring(struct soap*, const char*, ns4__ArrayOfstring **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ArrayOfstring(struct soap*, ns4__ArrayOfstring *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__ArrayOfstring
#define soap_write_PointerTons4__ArrayOfstring(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTons4__ArrayOfstring(soap, data),0) || monitor_soap::soap_put_PointerTons4__ArrayOfstring(soap, data, "ns4:ArrayOfstring", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns4__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerTons4__ArrayOfstring(struct soap*, ns4__ArrayOfstring **, const char*, const char*);

#ifndef soap_read_PointerTons4__ArrayOfstring
#define soap_read_PointerTons4__ArrayOfstring(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTons4__ArrayOfstring(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerToint
#define SOAP_TYPE_monitor_soap_PointerToint (72)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerToint(soap, data),0) || monitor_soap::soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_ns3__guid
#define SOAP_TYPE_monitor_soap_ns3__guid (70)
#endif

#define soap_default_ns3__guid(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__guid(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__guid(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_ns3__guid(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__guid(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_ns3__guid
#define soap_write_ns3__guid(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_ns3__guid(soap, data),0) || monitor_soap::soap_put_ns3__guid(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_ns3__guid(struct soap*, char **, const char*, const char*);

#ifndef soap_read_ns3__guid
#define soap_read_ns3__guid(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_ns3__guid(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_ns3__duration
#define SOAP_TYPE_monitor_soap_ns3__duration (68)
#endif

#define soap_default_ns3__duration(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns3__duration(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__duration(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_ns3__duration(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__duration(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_ns3__duration
#define soap_write_ns3__duration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_ns3__duration(soap, data),0) || monitor_soap::soap_put_ns3__duration(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_ns3__duration(struct soap*, char **, const char*, const char*);

#ifndef soap_read_ns3__duration
#define soap_read_ns3__duration(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_ns3__duration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_xsd__duration
#define SOAP_TYPE_monitor_soap_xsd__duration (31)
#endif

#define soap_default_xsd__duration(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__duration(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__duration(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__duration
#define soap_write_xsd__duration(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_xsd__duration(soap, data),0) || monitor_soap::soap_put_xsd__duration(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__duration(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__duration
#define soap_read_xsd__duration(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__duration(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_xsd__decimal
#define SOAP_TYPE_monitor_soap_xsd__decimal (27)
#endif

#define soap_default_xsd__decimal(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__decimal(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__decimal(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__decimal
#define soap_write_xsd__decimal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_xsd__decimal(soap, data),0) || monitor_soap::soap_put_xsd__decimal(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__decimal(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__decimal
#define soap_read_xsd__decimal(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__decimal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_PointerTounsignedByte
#define SOAP_TYPE_monitor_soap_PointerTounsignedByte (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap*, unsigned char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap*, const char *, int, unsigned char *const*, const char *);
SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap*, const char*, unsigned char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap*, unsigned char *const*, const char*, const char*);

#ifndef soap_write_PointerTounsignedByte
#define soap_write_PointerTounsignedByte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_PointerTounsignedByte(soap, data),0) || monitor_soap::soap_put_PointerTounsignedByte(soap, data, "unsignedByte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap*, unsigned char **, const char*, const char*);

#ifndef soap_read_PointerTounsignedByte
#define soap_read_PointerTounsignedByte(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_PointerTounsignedByte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_xsd__anyURI
#define SOAP_TYPE_monitor_soap_xsd__anyURI (14)
#endif

#define soap_default_xsd__anyURI(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__anyURI
#define soap_write_xsd__anyURI(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_xsd__anyURI(soap, data),0) || monitor_soap::soap_put_xsd__anyURI(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__anyURI
#define soap_read_xsd__anyURI(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__anyURI(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_xsd__IDREF
#define SOAP_TYPE_monitor_soap_xsd__IDREF (11)
#endif

#define soap_default_xsd__IDREF(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__IDREF(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__IDREF(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__IDREF
#define soap_write_xsd__IDREF(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_xsd__IDREF(soap, data),0) || monitor_soap::soap_put_xsd__IDREF(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__IDREF(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__IDREF
#define soap_read_xsd__IDREF(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__IDREF(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_xsd__ID
#define SOAP_TYPE_monitor_soap_xsd__ID (9)
#endif

#define soap_default_xsd__ID(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_xsd__ID(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_xsd__ID
#define soap_write_xsd__ID(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_xsd__ID(soap, data),0) || monitor_soap::soap_put_xsd__ID(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_xsd__ID(struct soap*, char **, const char*, const char*);

#ifndef soap_read_xsd__ID
#define soap_read_xsd__ID(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_xsd__ID(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap__QName
#define SOAP_TYPE_monitor_soap__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize__QName(soap, data),0) || monitor_soap::soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_monitor_soap_string
#define SOAP_TYPE_monitor_soap_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (monitor_soap::soap_serialize_string(soap, data),0) || monitor_soap::soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !monitor_soap::soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


} // namespace monitor_soap


#endif

/* End of monitor_soapH.h */
