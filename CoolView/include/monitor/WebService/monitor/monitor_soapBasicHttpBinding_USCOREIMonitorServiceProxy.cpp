/* monitor_soapBasicHttpBinding_USCOREIMonitorServiceProxy.cpp
   Generated by gSOAP 2.8.21 from monitor.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "monitor_soapBasicHttpBinding_USCOREIMonitorServiceProxy.h"

namespace monitor_soap {

BasicHttpBinding_USCOREIMonitorServiceProxy::BasicHttpBinding_USCOREIMonitorServiceProxy()
{	BasicHttpBinding_USCOREIMonitorServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

BasicHttpBinding_USCOREIMonitorServiceProxy::BasicHttpBinding_USCOREIMonitorServiceProxy(const struct soap &_soap) : soap(_soap)
{ }

BasicHttpBinding_USCOREIMonitorServiceProxy::BasicHttpBinding_USCOREIMonitorServiceProxy(const char *url)
{	BasicHttpBinding_USCOREIMonitorServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

BasicHttpBinding_USCOREIMonitorServiceProxy::BasicHttpBinding_USCOREIMonitorServiceProxy(soap_mode iomode)
{	BasicHttpBinding_USCOREIMonitorServiceProxy_init(iomode, iomode);
}

BasicHttpBinding_USCOREIMonitorServiceProxy::BasicHttpBinding_USCOREIMonitorServiceProxy(const char *url, soap_mode iomode)
{	BasicHttpBinding_USCOREIMonitorServiceProxy_init(iomode, iomode);
	soap_endpoint = url;
}

BasicHttpBinding_USCOREIMonitorServiceProxy::BasicHttpBinding_USCOREIMonitorServiceProxy(soap_mode imode, soap_mode omode)
{	BasicHttpBinding_USCOREIMonitorServiceProxy_init(imode, omode);
}

BasicHttpBinding_USCOREIMonitorServiceProxy::~BasicHttpBinding_USCOREIMonitorServiceProxy()
{ }

void BasicHttpBinding_USCOREIMonitorServiceProxy::BasicHttpBinding_USCOREIMonitorServiceProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns4", "http://schemas.microsoft.com/2003/10/Serialization/Arrays", NULL, NULL},
	{"ns3", "http://schemas.microsoft.com/2003/10/Serialization/", NULL, NULL},
	{"ns1", "http://tempuri.org/", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void BasicHttpBinding_USCOREIMonitorServiceProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void BasicHttpBinding_USCOREIMonitorServiceProxy::reset()
{	destroy();
	soap_done(this);
	soap_initialize(this);
	BasicHttpBinding_USCOREIMonitorServiceProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void BasicHttpBinding_USCOREIMonitorServiceProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *BasicHttpBinding_USCOREIMonitorServiceProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *BasicHttpBinding_USCOREIMonitorServiceProxy::soap_fault()
{	return this->fault;
}

const char *BasicHttpBinding_USCOREIMonitorServiceProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *BasicHttpBinding_USCOREIMonitorServiceProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int BasicHttpBinding_USCOREIMonitorServiceProxy::soap_close_socket()
{	return soap_closesock(this);
}

int BasicHttpBinding_USCOREIMonitorServiceProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void BasicHttpBinding_USCOREIMonitorServiceProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void BasicHttpBinding_USCOREIMonitorServiceProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *BasicHttpBinding_USCOREIMonitorServiceProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int BasicHttpBinding_USCOREIMonitorServiceProxy::GetTerminalInfo(const char *endpoint, const char *soap_action, _ns1__GetTerminalInfo *ns1__GetTerminalInfo, _ns1__GetTerminalInfoResponse *ns1__GetTerminalInfoResponse)
{	struct soap *soap = this;
	struct __ns1__GetTerminalInfo soap_tmp___ns1__GetTerminalInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8010/MonitorService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IMonitorService/GetTerminalInfo";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetTerminalInfo.ns1__GetTerminalInfo = ns1__GetTerminalInfo;
	soap_set_version(soap, 1); /* SOAP1.1 */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetTerminalInfo(soap, &soap_tmp___ns1__GetTerminalInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetTerminalInfo(soap, &soap_tmp___ns1__GetTerminalInfo, "-ns1:GetTerminalInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetTerminalInfo(soap, &soap_tmp___ns1__GetTerminalInfo, "-ns1:GetTerminalInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetTerminalInfoResponse)
		return soap_closesock(soap);
	ns1__GetTerminalInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetTerminalInfoResponse->soap_get(soap, "ns1:GetTerminalInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIMonitorServiceProxy::GetHardwareInfo(const char *endpoint, const char *soap_action, _ns1__GetHardwareInfo *ns1__GetHardwareInfo, _ns1__GetHardwareInfoResponse *ns1__GetHardwareInfoResponse)
{	struct soap *soap = this;
	struct __ns1__GetHardwareInfo soap_tmp___ns1__GetHardwareInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8010/MonitorService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IMonitorService/GetHardwareInfo";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetHardwareInfo.ns1__GetHardwareInfo = ns1__GetHardwareInfo;
	soap_set_version(soap, 1); /* SOAP1.1 */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetHardwareInfo(soap, &soap_tmp___ns1__GetHardwareInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetHardwareInfo(soap, &soap_tmp___ns1__GetHardwareInfo, "-ns1:GetHardwareInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetHardwareInfo(soap, &soap_tmp___ns1__GetHardwareInfo, "-ns1:GetHardwareInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetHardwareInfoResponse)
		return soap_closesock(soap);
	ns1__GetHardwareInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetHardwareInfoResponse->soap_get(soap, "ns1:GetHardwareInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIMonitorServiceProxy::GetProcessInfo(const char *endpoint, const char *soap_action, _ns1__GetProcessInfo *ns1__GetProcessInfo, _ns1__GetProcessInfoResponse *ns1__GetProcessInfoResponse)
{	struct soap *soap = this;
	struct __ns1__GetProcessInfo soap_tmp___ns1__GetProcessInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8010/MonitorService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IMonitorService/GetProcessInfo";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetProcessInfo.ns1__GetProcessInfo = ns1__GetProcessInfo;
	soap_set_version(soap, 1); /* SOAP1.1 */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetProcessInfo(soap, &soap_tmp___ns1__GetProcessInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetProcessInfo(soap, &soap_tmp___ns1__GetProcessInfo, "-ns1:GetProcessInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetProcessInfo(soap, &soap_tmp___ns1__GetProcessInfo, "-ns1:GetProcessInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetProcessInfoResponse)
		return soap_closesock(soap);
	ns1__GetProcessInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetProcessInfoResponse->soap_get(soap, "ns1:GetProcessInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIMonitorServiceProxy::GetThreadInfo(const char *endpoint, const char *soap_action, _ns1__GetThreadInfo *ns1__GetThreadInfo, _ns1__GetThreadInfoResponse *ns1__GetThreadInfoResponse)
{	struct soap *soap = this;
	struct __ns1__GetThreadInfo soap_tmp___ns1__GetThreadInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8010/MonitorService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IMonitorService/GetThreadInfo";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetThreadInfo.ns1__GetThreadInfo = ns1__GetThreadInfo;
	soap_set_version(soap, 1); /* SOAP1.1 */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetThreadInfo(soap, &soap_tmp___ns1__GetThreadInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetThreadInfo(soap, &soap_tmp___ns1__GetThreadInfo, "-ns1:GetThreadInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetThreadInfo(soap, &soap_tmp___ns1__GetThreadInfo, "-ns1:GetThreadInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetThreadInfoResponse)
		return soap_closesock(soap);
	ns1__GetThreadInfoResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetThreadInfoResponse->soap_get(soap, "ns1:GetThreadInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIMonitorServiceProxy::KillProcess(const char *endpoint, const char *soap_action, _ns1__KillProcess *ns1__KillProcess, _ns1__KillProcessResponse *ns1__KillProcessResponse)
{	struct soap *soap = this;
	struct __ns1__KillProcess soap_tmp___ns1__KillProcess;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8010/MonitorService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IMonitorService/KillProcess";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__KillProcess.ns1__KillProcess = ns1__KillProcess;
	soap_set_version(soap, 1); /* SOAP1.1 */
	soap_serializeheader(soap);
	soap_serialize___ns1__KillProcess(soap, &soap_tmp___ns1__KillProcess);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__KillProcess(soap, &soap_tmp___ns1__KillProcess, "-ns1:KillProcess", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__KillProcess(soap, &soap_tmp___ns1__KillProcess, "-ns1:KillProcess", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__KillProcessResponse)
		return soap_closesock(soap);
	ns1__KillProcessResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__KillProcessResponse->soap_get(soap, "ns1:KillProcessResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIMonitorServiceProxy::SetProcessPriority(const char *endpoint, const char *soap_action, _ns1__SetProcessPriority *ns1__SetProcessPriority, _ns1__SetProcessPriorityResponse *ns1__SetProcessPriorityResponse)
{	struct soap *soap = this;
	struct __ns1__SetProcessPriority soap_tmp___ns1__SetProcessPriority;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8010/MonitorService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IMonitorService/SetProcessPriority";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetProcessPriority.ns1__SetProcessPriority = ns1__SetProcessPriority;
	soap_set_version(soap, 1); /* SOAP1.1 */
	soap_serializeheader(soap);
	soap_serialize___ns1__SetProcessPriority(soap, &soap_tmp___ns1__SetProcessPriority);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetProcessPriority(soap, &soap_tmp___ns1__SetProcessPriority, "-ns1:SetProcessPriority", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetProcessPriority(soap, &soap_tmp___ns1__SetProcessPriority, "-ns1:SetProcessPriority", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetProcessPriorityResponse)
		return soap_closesock(soap);
	ns1__SetProcessPriorityResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetProcessPriorityResponse->soap_get(soap, "ns1:SetProcessPriorityResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIMonitorServiceProxy::SetThreadPriority(const char *endpoint, const char *soap_action, _ns1__SetThreadPriority *ns1__SetThreadPriority, _ns1__SetThreadPriorityResponse *ns1__SetThreadPriorityResponse)
{	struct soap *soap = this;
	struct __ns1__SetThreadPriority soap_tmp___ns1__SetThreadPriority;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8010/MonitorService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IMonitorService/SetThreadPriority";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__SetThreadPriority.ns1__SetThreadPriority = ns1__SetThreadPriority;
	soap_set_version(soap, 1); /* SOAP1.1 */
	soap_serializeheader(soap);
	soap_serialize___ns1__SetThreadPriority(soap, &soap_tmp___ns1__SetThreadPriority);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__SetThreadPriority(soap, &soap_tmp___ns1__SetThreadPriority, "-ns1:SetThreadPriority", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__SetThreadPriority(soap, &soap_tmp___ns1__SetThreadPriority, "-ns1:SetThreadPriority", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__SetThreadPriorityResponse)
		return soap_closesock(soap);
	ns1__SetThreadPriorityResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__SetThreadPriorityResponse->soap_get(soap, "ns1:SetThreadPriorityResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIMonitorServiceProxy::send_ShutDown(const char *endpoint, const char *soap_action, _ns1__ShutDown *ns1__ShutDown)
{	struct soap *soap = this;
	struct __ns1__ShutDown soap_tmp___ns1__ShutDown;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8010/MonitorService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IMonitorService/ShutDown";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__ShutDown.ns1__ShutDown = ns1__ShutDown;
	soap_set_version(soap, 1); /* SOAP1.1 */
	soap_serializeheader(soap);
	soap_serialize___ns1__ShutDown(soap, &soap_tmp___ns1__ShutDown);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__ShutDown(soap, &soap_tmp___ns1__ShutDown, "-ns1:ShutDown", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__ShutDown(soap, &soap_tmp___ns1__ShutDown, "-ns1:ShutDown", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int BasicHttpBinding_USCOREIMonitorServiceProxy::recv_ShutDown(struct __ns1__ShutDown& tmp)
{	struct soap *soap = this;

	struct __ns1__ShutDown *_param_1 = &tmp;
	soap_default___ns1__ShutDown(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__ShutDown(soap, _param_1, "-ns1:ShutDown", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIMonitorServiceProxy::send_Restart(const char *endpoint, const char *soap_action, _ns1__Restart *ns1__Restart)
{	struct soap *soap = this;
	struct __ns1__Restart soap_tmp___ns1__Restart;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8010/MonitorService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IMonitorService/Restart";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Restart.ns1__Restart = ns1__Restart;
	soap_set_version(soap, 1); /* SOAP1.1 */
	soap_serializeheader(soap);
	soap_serialize___ns1__Restart(soap, &soap_tmp___ns1__Restart);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Restart(soap, &soap_tmp___ns1__Restart, "-ns1:Restart", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Restart(soap, &soap_tmp___ns1__Restart, "-ns1:Restart", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int BasicHttpBinding_USCOREIMonitorServiceProxy::recv_Restart(struct __ns1__Restart& tmp)
{	struct soap *soap = this;

	struct __ns1__Restart *_param_2 = &tmp;
	soap_default___ns1__Restart(soap, _param_2);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__Restart(soap, _param_2, "-ns1:Restart", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int BasicHttpBinding_USCOREIMonitorServiceProxy::send_BeepForAWhile(const char *endpoint, const char *soap_action, _ns1__BeepForAWhile *ns1__BeepForAWhile)
{	struct soap *soap = this;
	struct __ns1__BeepForAWhile soap_tmp___ns1__BeepForAWhile;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://127.0.0.1:8010/MonitorService/";
	if (soap_action == NULL)
		soap_action = "http://tempuri.org/IMonitorService/BeepForAWhile";
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp___ns1__BeepForAWhile.ns1__BeepForAWhile = ns1__BeepForAWhile;
	soap_set_version(soap, 1); /* SOAP1.1 */
	soap_serializeheader(soap);
	soap_serialize___ns1__BeepForAWhile(soap, &soap_tmp___ns1__BeepForAWhile);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__BeepForAWhile(soap, &soap_tmp___ns1__BeepForAWhile, "-ns1:BeepForAWhile", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__BeepForAWhile(soap, &soap_tmp___ns1__BeepForAWhile, "-ns1:BeepForAWhile", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int BasicHttpBinding_USCOREIMonitorServiceProxy::recv_BeepForAWhile(struct __ns1__BeepForAWhile& tmp)
{	struct soap *soap = this;

	struct __ns1__BeepForAWhile *_param_3 = &tmp;
	soap_default___ns1__BeepForAWhile(soap, _param_3);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__BeepForAWhile(soap, _param_3, "-ns1:BeepForAWhile", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

} // namespace monitor_soap

/* End of client proxy code */
