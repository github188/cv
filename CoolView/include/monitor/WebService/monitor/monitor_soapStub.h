/* monitor_soapStub.h
   Generated by gSOAP 2.8.21 from monitor.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef monitor_soapStub_H
#define monitor_soapStub_H
#define SOAP_NAMESPACE_OF_ns2	"http://tempuri.org/Imports"
#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
#define SOAP_NAMESPACE_OF_ns3	"http://schemas.microsoft.com/2003/10/Serialization/"
#define SOAP_NAMESPACE_OF_ns4	"http://schemas.microsoft.com/2003/10/Serialization/Arrays"
#ifndef WITH_NONAMESPACES
#define WITH_NONAMESPACES
#endif
#ifndef WITH_NOGLOBAL
#define WITH_NOGLOBAL
#endif
#include "stdsoap2.h"
#if GSOAP_VERSION != 20821
# error "GSOAP VERSION 20821 MISMATCH IN GENERATED CODE VERSUS LIBRARY CODE: PLEASE REINSTALL PACKAGE"
#endif


namespace monitor_soap {

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__anyType
#define SOAP_TYPE_monitor_soap_xsd__anyType (7)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType() { xsd__anyType::soap_default(NULL); }
	virtual ~xsd__anyType() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__ID_
#define SOAP_TYPE_monitor_soap_xsd__ID_ (10)
/* Primitive xsd:ID schema type: */
class SOAP_CMAC xsd__ID_ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 10; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__ID_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__ID_() { xsd__ID_::soap_default(NULL); }
	virtual ~xsd__ID_() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__IDREF_
#define SOAP_TYPE_monitor_soap_xsd__IDREF_ (12)
/* Primitive xsd:IDREF schema type: */
class SOAP_CMAC xsd__IDREF_ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 12; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__IDREF_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__IDREF_() { xsd__IDREF_::soap_default(NULL); }
	virtual ~xsd__IDREF_() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__QName
#define SOAP_TYPE_monitor_soap_xsd__QName (13)
/* Primitive xsd:QName schema type: */
class SOAP_CMAC xsd__QName : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 13; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__QName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__QName() { xsd__QName::soap_default(NULL); }
	virtual ~xsd__QName() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__anyURI_
#define SOAP_TYPE_monitor_soap_xsd__anyURI_ (15)
/* Primitive xsd:anyURI schema type: */
class SOAP_CMAC xsd__anyURI_ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 15; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__anyURI_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyURI_() { xsd__anyURI_::soap_default(NULL); }
	virtual ~xsd__anyURI_() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__base64Binary
#define SOAP_TYPE_monitor_soap_xsd__base64Binary (16)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 16; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary() { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__base64Binary_
#define SOAP_TYPE_monitor_soap_xsd__base64Binary_ (20)
/* Primitive xsd:base64Binary schema type: */
class SOAP_CMAC xsd__base64Binary_ : public xsd__anyType
{
public:
	xsd__base64Binary __item;
public:
	virtual int soap_type() const { return 20; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__base64Binary_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary_() { xsd__base64Binary_::soap_default(NULL); }
	virtual ~xsd__base64Binary_() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__boolean
#define SOAP_TYPE_monitor_soap_xsd__boolean (21)
/* Primitive xsd:boolean schema type: */
class SOAP_CMAC xsd__boolean : public xsd__anyType
{
public:
	bool __item;
public:
	virtual int soap_type() const { return 21; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__boolean */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__boolean() { xsd__boolean::soap_default(NULL); }
	virtual ~xsd__boolean() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__byte_
#define SOAP_TYPE_monitor_soap_xsd__byte_ (24)
/* Primitive xsd:byte schema type: */
class SOAP_CMAC xsd__byte_ : public xsd__anyType
{
public:
	char __item;
public:
	virtual int soap_type() const { return 24; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__byte_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__byte_() { xsd__byte_::soap_default(NULL); }
	virtual ~xsd__byte_() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__dateTime
#define SOAP_TYPE_monitor_soap_xsd__dateTime (25)
/* Primitive xsd:dateTime schema type: */
class SOAP_CMAC xsd__dateTime : public xsd__anyType
{
public:
	time_t __item;
public:
	virtual int soap_type() const { return 25; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__dateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__dateTime() { xsd__dateTime::soap_default(NULL); }
	virtual ~xsd__dateTime() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__decimal_
#define SOAP_TYPE_monitor_soap_xsd__decimal_ (28)
/* Primitive xsd:decimal schema type: */
class SOAP_CMAC xsd__decimal_ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 28; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__decimal_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__decimal_() { xsd__decimal_::soap_default(NULL); }
	virtual ~xsd__decimal_() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__double
#define SOAP_TYPE_monitor_soap_xsd__double (29)
/* Primitive xsd:double schema type: */
class SOAP_CMAC xsd__double : public xsd__anyType
{
public:
	double __item;
public:
	virtual int soap_type() const { return 29; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__double */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__double() { xsd__double::soap_default(NULL); }
	virtual ~xsd__double() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__duration_
#define SOAP_TYPE_monitor_soap_xsd__duration_ (32)
/* Primitive xsd:duration schema type: */
class SOAP_CMAC xsd__duration_ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 32; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__duration_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__duration_() { xsd__duration_::soap_default(NULL); }
	virtual ~xsd__duration_() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__float
#define SOAP_TYPE_monitor_soap_xsd__float (33)
/* Primitive xsd:float schema type: */
class SOAP_CMAC xsd__float : public xsd__anyType
{
public:
	float __item;
public:
	virtual int soap_type() const { return 33; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__float */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__float() { xsd__float::soap_default(NULL); }
	virtual ~xsd__float() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__int
#define SOAP_TYPE_monitor_soap_xsd__int (35)
/* Primitive xsd:int schema type: */
class SOAP_CMAC xsd__int : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 35; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__int */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__int() { xsd__int::soap_default(NULL); }
	virtual ~xsd__int() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__long
#define SOAP_TYPE_monitor_soap_xsd__long (36)
/* Primitive xsd:long schema type: */
class SOAP_CMAC xsd__long : public xsd__anyType
{
public:
	LONG64 __item;
public:
	virtual int soap_type() const { return 36; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__long */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__long() { xsd__long::soap_default(NULL); }
	virtual ~xsd__long() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__short
#define SOAP_TYPE_monitor_soap_xsd__short (38)
/* Primitive xsd:short schema type: */
class SOAP_CMAC xsd__short : public xsd__anyType
{
public:
	short __item;
public:
	virtual int soap_type() const { return 38; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__short */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__short() { xsd__short::soap_default(NULL); }
	virtual ~xsd__short() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__string
#define SOAP_TYPE_monitor_soap_xsd__string (40)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 40; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string() { xsd__string::soap_default(NULL); }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__unsignedByte_
#define SOAP_TYPE_monitor_soap_xsd__unsignedByte_ (42)
/* Primitive xsd:unsignedByte schema type: */
class SOAP_CMAC xsd__unsignedByte_ : public xsd__anyType
{
public:
	unsigned char __item;
public:
	virtual int soap_type() const { return 42; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__unsignedByte_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedByte_() { xsd__unsignedByte_::soap_default(NULL); }
	virtual ~xsd__unsignedByte_() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__unsignedInt
#define SOAP_TYPE_monitor_soap_xsd__unsignedInt (43)
/* Primitive xsd:unsignedInt schema type: */
class SOAP_CMAC xsd__unsignedInt : public xsd__anyType
{
public:
	unsigned int __item;
public:
	virtual int soap_type() const { return 43; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__unsignedInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedInt() { xsd__unsignedInt::soap_default(NULL); }
	virtual ~xsd__unsignedInt() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__unsignedLong
#define SOAP_TYPE_monitor_soap_xsd__unsignedLong (44)
/* Primitive xsd:unsignedLong schema type: */
class SOAP_CMAC xsd__unsignedLong : public xsd__anyType
{
public:
	ULONG64 __item;
public:
	virtual int soap_type() const { return 44; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__unsignedLong */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedLong() { xsd__unsignedLong::soap_default(NULL); }
	virtual ~xsd__unsignedLong() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__unsignedShort
#define SOAP_TYPE_monitor_soap_xsd__unsignedShort (46)
/* Primitive xsd:unsignedShort schema type: */
class SOAP_CMAC xsd__unsignedShort : public xsd__anyType
{
public:
	unsigned short __item;
public:
	virtual int soap_type() const { return 46; } /* = unique type id SOAP_TYPE_monitor_soap_xsd__unsignedShort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedShort() { xsd__unsignedShort::soap_default(NULL); }
	virtual ~xsd__unsignedShort() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_ns3__char__
#define SOAP_TYPE_monitor_soap_ns3__char__ (67)
/* Primitive ns3:char schema type: */
class SOAP_CMAC ns3__char__ : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 67; } /* = unique type id SOAP_TYPE_monitor_soap_ns3__char__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__char__() { ns3__char__::soap_default(NULL); }
	virtual ~ns3__char__() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_ns3__duration__
#define SOAP_TYPE_monitor_soap_ns3__duration__ (69)
/* Primitive ns3:duration schema type: */
class SOAP_CMAC ns3__duration__ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 69; } /* = unique type id SOAP_TYPE_monitor_soap_ns3__duration__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__duration__() { ns3__duration__::soap_default(NULL); }
	virtual ~ns3__duration__() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_ns3__guid__
#define SOAP_TYPE_monitor_soap_ns3__guid__ (71)
/* Primitive ns3:guid schema type: */
class SOAP_CMAC ns3__guid__ : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 71; } /* = unique type id SOAP_TYPE_monitor_soap_ns3__guid__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns3__guid__() { ns3__guid__::soap_default(NULL); }
	virtual ~ns3__guid__() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__GetTerminalInfo
#define SOAP_TYPE_monitor_soap__ns1__GetTerminalInfo (48)
/* ns1:GetTerminalInfo */
class SOAP_CMAC _ns1__GetTerminalInfo
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 48; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__GetTerminalInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetTerminalInfo() { _ns1__GetTerminalInfo::soap_default(NULL); }
	virtual ~_ns1__GetTerminalInfo() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__GetTerminalInfoResponse
#define SOAP_TYPE_monitor_soap__ns1__GetTerminalInfoResponse (49)
/* ns1:GetTerminalInfoResponse */
class SOAP_CMAC _ns1__GetTerminalInfoResponse
{
public:
	char *GetTerminalInfoResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__GetTerminalInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetTerminalInfoResponse() { _ns1__GetTerminalInfoResponse::soap_default(NULL); }
	virtual ~_ns1__GetTerminalInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__GetHardwareInfo
#define SOAP_TYPE_monitor_soap__ns1__GetHardwareInfo (50)
/* ns1:GetHardwareInfo */
class SOAP_CMAC _ns1__GetHardwareInfo
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__GetHardwareInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetHardwareInfo() { _ns1__GetHardwareInfo::soap_default(NULL); }
	virtual ~_ns1__GetHardwareInfo() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__GetHardwareInfoResponse
#define SOAP_TYPE_monitor_soap__ns1__GetHardwareInfoResponse (51)
/* ns1:GetHardwareInfoResponse */
class SOAP_CMAC _ns1__GetHardwareInfoResponse
{
public:
	char *GetHardwareInfoResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__GetHardwareInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetHardwareInfoResponse() { _ns1__GetHardwareInfoResponse::soap_default(NULL); }
	virtual ~_ns1__GetHardwareInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__GetProcessInfo
#define SOAP_TYPE_monitor_soap__ns1__GetProcessInfo (52)
/* ns1:GetProcessInfo */
class SOAP_CMAC _ns1__GetProcessInfo
{
public:
	char *filter;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__GetProcessInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetProcessInfo() { _ns1__GetProcessInfo::soap_default(NULL); }
	virtual ~_ns1__GetProcessInfo() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__GetProcessInfoResponse
#define SOAP_TYPE_monitor_soap__ns1__GetProcessInfoResponse (53)
/* ns1:GetProcessInfoResponse */
class SOAP_CMAC _ns1__GetProcessInfoResponse
{
public:
	char *GetProcessInfoResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__GetProcessInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetProcessInfoResponse() { _ns1__GetProcessInfoResponse::soap_default(NULL); }
	virtual ~_ns1__GetProcessInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__GetThreadInfo
#define SOAP_TYPE_monitor_soap__ns1__GetThreadInfo (54)
/* ns1:GetThreadInfo */
class SOAP_CMAC _ns1__GetThreadInfo
{
public:
	int *pid;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__GetThreadInfo */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetThreadInfo() { _ns1__GetThreadInfo::soap_default(NULL); }
	virtual ~_ns1__GetThreadInfo() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__GetThreadInfoResponse
#define SOAP_TYPE_monitor_soap__ns1__GetThreadInfoResponse (55)
/* ns1:GetThreadInfoResponse */
class SOAP_CMAC _ns1__GetThreadInfoResponse
{
public:
	class ns4__ArrayOfstring *GetThreadInfoResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns4:ArrayOfstring */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__GetThreadInfoResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__GetThreadInfoResponse() { _ns1__GetThreadInfoResponse::soap_default(NULL); }
	virtual ~_ns1__GetThreadInfoResponse() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__KillProcess
#define SOAP_TYPE_monitor_soap__ns1__KillProcess (56)
/* ns1:KillProcess */
class SOAP_CMAC _ns1__KillProcess
{
public:
	int *PID;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__KillProcess */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__KillProcess() { _ns1__KillProcess::soap_default(NULL); }
	virtual ~_ns1__KillProcess() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__KillProcessResponse
#define SOAP_TYPE_monitor_soap__ns1__KillProcessResponse (57)
/* ns1:KillProcessResponse */
class SOAP_CMAC _ns1__KillProcessResponse
{
public:
	bool *KillProcessResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__KillProcessResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__KillProcessResponse() { _ns1__KillProcessResponse::soap_default(NULL); }
	virtual ~_ns1__KillProcessResponse() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__SetProcessPriority
#define SOAP_TYPE_monitor_soap__ns1__SetProcessPriority (58)
/* ns1:SetProcessPriority */
class SOAP_CMAC _ns1__SetProcessPriority
{
public:
	int *PID;	/* optional element of type xsd:int */
	char *priority;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 58; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__SetProcessPriority */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetProcessPriority() { _ns1__SetProcessPriority::soap_default(NULL); }
	virtual ~_ns1__SetProcessPriority() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__SetProcessPriorityResponse
#define SOAP_TYPE_monitor_soap__ns1__SetProcessPriorityResponse (59)
/* ns1:SetProcessPriorityResponse */
class SOAP_CMAC _ns1__SetProcessPriorityResponse
{
public:
	bool *SetProcessPriorityResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__SetProcessPriorityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetProcessPriorityResponse() { _ns1__SetProcessPriorityResponse::soap_default(NULL); }
	virtual ~_ns1__SetProcessPriorityResponse() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__SetThreadPriority
#define SOAP_TYPE_monitor_soap__ns1__SetThreadPriority (60)
/* ns1:SetThreadPriority */
class SOAP_CMAC _ns1__SetThreadPriority
{
public:
	int *PID;	/* optional element of type xsd:int */
	int *TID;	/* optional element of type xsd:int */
	char *priority;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__SetThreadPriority */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetThreadPriority() { _ns1__SetThreadPriority::soap_default(NULL); }
	virtual ~_ns1__SetThreadPriority() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__SetThreadPriorityResponse
#define SOAP_TYPE_monitor_soap__ns1__SetThreadPriorityResponse (61)
/* ns1:SetThreadPriorityResponse */
class SOAP_CMAC _ns1__SetThreadPriorityResponse
{
public:
	bool *SetThreadPriorityResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:boolean */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__SetThreadPriorityResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__SetThreadPriorityResponse() { _ns1__SetThreadPriorityResponse::soap_default(NULL); }
	virtual ~_ns1__SetThreadPriorityResponse() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__ShutDown
#define SOAP_TYPE_monitor_soap__ns1__ShutDown (62)
/* ns1:ShutDown */
class SOAP_CMAC _ns1__ShutDown
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__ShutDown */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__ShutDown() { _ns1__ShutDown::soap_default(NULL); }
	virtual ~_ns1__ShutDown() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__Restart
#define SOAP_TYPE_monitor_soap__ns1__Restart (63)
/* ns1:Restart */
class SOAP_CMAC _ns1__Restart
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__Restart */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__Restart() { _ns1__Restart::soap_default(NULL); }
	virtual ~_ns1__Restart() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap__ns1__BeepForAWhile
#define SOAP_TYPE_monitor_soap__ns1__BeepForAWhile (64)
/* ns1:BeepForAWhile */
class SOAP_CMAC _ns1__BeepForAWhile
{
public:
	int *ms;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 64; } /* = unique type id SOAP_TYPE_monitor_soap__ns1__BeepForAWhile */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__BeepForAWhile() { _ns1__BeepForAWhile::soap_default(NULL); }
	virtual ~_ns1__BeepForAWhile() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap_ns4__ArrayOfstring
#define SOAP_TYPE_monitor_soap_ns4__ArrayOfstring (65)
/* ns4:ArrayOfstring */
class SOAP_CMAC ns4__ArrayOfstring : public xsd__anyType
{
public:
	int __sizestring;	/* sequence of elements <string> */
	char **string;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 65; } /* = unique type id SOAP_TYPE_monitor_soap_ns4__ArrayOfstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__ArrayOfstring() { ns4__ArrayOfstring::soap_default(NULL); }
	virtual ~ns4__ArrayOfstring() { }
};
#endif

#ifndef SOAP_TYPE_monitor_soap___ns1__GetTerminalInfo
#define SOAP_TYPE_monitor_soap___ns1__GetTerminalInfo (79)
/* Operation wrapper: */
struct __ns1__GetTerminalInfo
{
public:
	_ns1__GetTerminalInfo *ns1__GetTerminalInfo;	/* optional element of type ns1:GetTerminalInfo */
public:
	int soap_type() const { return 79; } /* = unique type id SOAP_TYPE_monitor_soap___ns1__GetTerminalInfo */
};
#endif

#ifndef SOAP_TYPE_monitor_soap___ns1__GetHardwareInfo
#define SOAP_TYPE_monitor_soap___ns1__GetHardwareInfo (83)
/* Operation wrapper: */
struct __ns1__GetHardwareInfo
{
public:
	_ns1__GetHardwareInfo *ns1__GetHardwareInfo;	/* optional element of type ns1:GetHardwareInfo */
public:
	int soap_type() const { return 83; } /* = unique type id SOAP_TYPE_monitor_soap___ns1__GetHardwareInfo */
};
#endif

#ifndef SOAP_TYPE_monitor_soap___ns1__GetProcessInfo
#define SOAP_TYPE_monitor_soap___ns1__GetProcessInfo (87)
/* Operation wrapper: */
struct __ns1__GetProcessInfo
{
public:
	_ns1__GetProcessInfo *ns1__GetProcessInfo;	/* optional element of type ns1:GetProcessInfo */
public:
	int soap_type() const { return 87; } /* = unique type id SOAP_TYPE_monitor_soap___ns1__GetProcessInfo */
};
#endif

#ifndef SOAP_TYPE_monitor_soap___ns1__GetThreadInfo
#define SOAP_TYPE_monitor_soap___ns1__GetThreadInfo (91)
/* Operation wrapper: */
struct __ns1__GetThreadInfo
{
public:
	_ns1__GetThreadInfo *ns1__GetThreadInfo;	/* optional element of type ns1:GetThreadInfo */
public:
	int soap_type() const { return 91; } /* = unique type id SOAP_TYPE_monitor_soap___ns1__GetThreadInfo */
};
#endif

#ifndef SOAP_TYPE_monitor_soap___ns1__KillProcess
#define SOAP_TYPE_monitor_soap___ns1__KillProcess (95)
/* Operation wrapper: */
struct __ns1__KillProcess
{
public:
	_ns1__KillProcess *ns1__KillProcess;	/* optional element of type ns1:KillProcess */
public:
	int soap_type() const { return 95; } /* = unique type id SOAP_TYPE_monitor_soap___ns1__KillProcess */
};
#endif

#ifndef SOAP_TYPE_monitor_soap___ns1__SetProcessPriority
#define SOAP_TYPE_monitor_soap___ns1__SetProcessPriority (99)
/* Operation wrapper: */
struct __ns1__SetProcessPriority
{
public:
	_ns1__SetProcessPriority *ns1__SetProcessPriority;	/* optional element of type ns1:SetProcessPriority */
public:
	int soap_type() const { return 99; } /* = unique type id SOAP_TYPE_monitor_soap___ns1__SetProcessPriority */
};
#endif

#ifndef SOAP_TYPE_monitor_soap___ns1__SetThreadPriority
#define SOAP_TYPE_monitor_soap___ns1__SetThreadPriority (103)
/* Operation wrapper: */
struct __ns1__SetThreadPriority
{
public:
	_ns1__SetThreadPriority *ns1__SetThreadPriority;	/* optional element of type ns1:SetThreadPriority */
public:
	int soap_type() const { return 103; } /* = unique type id SOAP_TYPE_monitor_soap___ns1__SetThreadPriority */
};
#endif

#ifndef SOAP_TYPE_monitor_soap___ns1__ShutDown
#define SOAP_TYPE_monitor_soap___ns1__ShutDown (107)
/* Operation wrapper: */
struct __ns1__ShutDown
{
public:
	_ns1__ShutDown *ns1__ShutDown;	/* optional element of type ns1:ShutDown */
public:
	int soap_type() const { return 107; } /* = unique type id SOAP_TYPE_monitor_soap___ns1__ShutDown */
};
#endif

#ifndef SOAP_TYPE_monitor_soap___ns1__Restart
#define SOAP_TYPE_monitor_soap___ns1__Restart (110)
/* Operation wrapper: */
struct __ns1__Restart
{
public:
	_ns1__Restart *ns1__Restart;	/* optional element of type ns1:Restart */
public:
	int soap_type() const { return 110; } /* = unique type id SOAP_TYPE_monitor_soap___ns1__Restart */
};
#endif

#ifndef SOAP_TYPE_monitor_soap___ns1__BeepForAWhile
#define SOAP_TYPE_monitor_soap___ns1__BeepForAWhile (113)
/* Operation wrapper: */
struct __ns1__BeepForAWhile
{
public:
	_ns1__BeepForAWhile *ns1__BeepForAWhile;	/* optional element of type ns1:BeepForAWhile */
public:
	int soap_type() const { return 113; } /* = unique type id SOAP_TYPE_monitor_soap___ns1__BeepForAWhile */
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_monitor_soap_SOAP_ENV__Header
#define SOAP_TYPE_monitor_soap_SOAP_ENV__Header (114)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 114; } /* = unique type id SOAP_TYPE_monitor_soap_SOAP_ENV__Header */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_monitor_soap_SOAP_ENV__Code
#define SOAP_TYPE_monitor_soap_SOAP_ENV__Code (115)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 115; } /* = unique type id SOAP_TYPE_monitor_soap_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_monitor_soap_SOAP_ENV__Detail
#define SOAP_TYPE_monitor_soap_SOAP_ENV__Detail (117)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 117; } /* = unique type id SOAP_TYPE_monitor_soap_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_monitor_soap_SOAP_ENV__Reason
#define SOAP_TYPE_monitor_soap_SOAP_ENV__Reason (119)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 119; } /* = unique type id SOAP_TYPE_monitor_soap_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_monitor_soap_SOAP_ENV__Fault
#define SOAP_TYPE_monitor_soap_SOAP_ENV__Fault (120)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 120; } /* = unique type id SOAP_TYPE_monitor_soap_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE_monitor_soap__QName
#define SOAP_TYPE_monitor_soap__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE_monitor_soap__XML
#define SOAP_TYPE_monitor_soap__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__ID
#define SOAP_TYPE_monitor_soap_xsd__ID (9)
typedef char *xsd__ID;
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__IDREF
#define SOAP_TYPE_monitor_soap_xsd__IDREF (11)
typedef char *xsd__IDREF;
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__anyURI
#define SOAP_TYPE_monitor_soap_xsd__anyURI (14)
typedef char *xsd__anyURI;
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__byte
#define SOAP_TYPE_monitor_soap_xsd__byte (23)
typedef char xsd__byte;
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__decimal
#define SOAP_TYPE_monitor_soap_xsd__decimal (27)
typedef char *xsd__decimal;
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__duration
#define SOAP_TYPE_monitor_soap_xsd__duration (31)
typedef char *xsd__duration;
#endif

#ifndef SOAP_TYPE_monitor_soap_xsd__unsignedByte
#define SOAP_TYPE_monitor_soap_xsd__unsignedByte (41)
typedef unsigned char xsd__unsignedByte;
#endif

#ifndef SOAP_TYPE_monitor_soap_ns3__char
#define SOAP_TYPE_monitor_soap_ns3__char (66)
typedef int ns3__char;
#endif

#ifndef SOAP_TYPE_monitor_soap_ns3__duration
#define SOAP_TYPE_monitor_soap_ns3__duration (68)
typedef char *ns3__duration;
#endif

#ifndef SOAP_TYPE_monitor_soap_ns3__guid
#define SOAP_TYPE_monitor_soap_ns3__guid (70)
typedef char *ns3__guid;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


} // namespace monitor_soap


#endif

/* End of monitor_soapStub.h */
