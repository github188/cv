/* monitor.h
   Generated by wsdl2h 1.2.16 from http://127.0.0.1:8010/MonitorService/?wsdl and typemap.dat
   2014-01-07 10:25:30 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2001-2010 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Build Notes

NOTE:

 - Run soapcpp2 on monitor.h to generate the SOAP/XML processing logic.
   Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 option -i to generate improved proxy and server classes.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h options -nname and -Nname to globally rename the prefix 'ns'.
 - Use wsdl2h option -d to enable DOM support for xsd:anyType.
 - Use wsdl2h option -g to auto-generate readers and writers for root elements.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

WARNING:

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS.
   USE THE SOURCE CODE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT BUILDS:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

LICENSE:

@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following two licenses:
1) GPL or 2) Genivia's license for commercial use.
--------------------------------------------------------------------------------
1) GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org
--------------------------------------------------------------------------------
2) A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/

// This service uses SOAP 1.2 namespaces:
//gsoap SOAP-ENV schema namespace:	http://www.w3.org/2003/05/soap-envelope
//gsoap SOAP-ENC schema namespace:	http://www.w3.org/2003/05/soap-encoding

/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://tempuri.org/"
ns2 = "http://tempuri.org/Imports"
ns3 = "http://schemas.microsoft.com/2003/10/Serialization/"
ns4 = "http://schemas.microsoft.com/2003/10/Serialization/Arrays"

*/

#define SOAP_NAMESPACE_OF_ns2	"http://tempuri.org/Imports"
//gsoap ns2   schema namespace:	http://tempuri.org/Imports
//gsoap ns2   schema form:	unqualified

#define SOAP_NAMESPACE_OF_ns1	"http://tempuri.org/"
//gsoap ns1   schema namespace:	http://tempuri.org/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_ns3	"http://schemas.microsoft.com/2003/10/Serialization/"
//gsoap ns3   schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/
//gsoap ns3   schema form:	qualified

#define SOAP_NAMESPACE_OF_ns4	"http://schemas.microsoft.com/2003/10/Serialization/Arrays"
//gsoap ns4   schema namespace:	http://schemas.microsoft.com/2003/10/Serialization/Arrays
//gsoap ns4   schema elementForm:	qualified
//gsoap ns4   schema attributeForm:	unqualified
class xsd__anyType { _XML __item; struct soap *soap; };

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Primitive built-in type "xs:ID"
typedef char* xsd__ID;

/// Class wrapper for built-in type "xs:ID" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__ID_ to check runtime type (see soapStub.h)
class xsd__ID_ : public xsd__anyType
{ public:
    xsd__ID                              __item;                       
};

/// Primitive built-in type "xs:IDREF"
typedef char* xsd__IDREF;

/// Class wrapper for built-in type "xs:IDREF" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__IDREF_ to check runtime type (see soapStub.h)
class xsd__IDREF_ : public xsd__anyType
{ public:
    xsd__IDREF                           __item;                       
};

/// Class wrapper for built-in type "xs:QName" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__QName to check runtime type (see soapStub.h)
class xsd__QName : public xsd__anyType
{ public:
    _QName                               __item;                       
};

/// Primitive built-in type "xs:anyURI"
typedef char* xsd__anyURI;

/// Class wrapper for built-in type "xs:anyURI" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__anyURI_ to check runtime type (see soapStub.h)
class xsd__anyURI_ : public xsd__anyType
{ public:
    xsd__anyURI                          __item;                       
};

/// Built-in type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: for DIME and MTOM XOP attachments only
	struct soap *soap;
};

/// Class wrapper for built-in type "xs:base64Binary" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__base64Binary_ to check runtime type (see soapStub.h)
class xsd__base64Binary_ : public xsd__anyType
{ public:
    xsd__base64Binary                    __item;                       
};

/// Class wrapper for built-in type "xs:boolean" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__boolean to check runtime type (see soapStub.h)
class xsd__boolean : public xsd__anyType
{ public:
    bool                                 __item;                       
};

/// Built-in type "xs:byte".
typedef char xsd__byte;

/// Class wrapper for built-in type "xs:byte" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__byte_ to check runtime type (see soapStub.h)
class xsd__byte_ : public xsd__anyType
{ public:
    xsd__byte                            __item;                       
};

/// Class wrapper for built-in type "xs:dateTime" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__dateTime to check runtime type (see soapStub.h)
class xsd__dateTime : public xsd__anyType
{ public:
    time_t                               __item;                       
};

/// Primitive built-in type "xs:decimal"
typedef char* xsd__decimal;

/// Class wrapper for built-in type "xs:decimal" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__decimal_ to check runtime type (see soapStub.h)
class xsd__decimal_ : public xsd__anyType
{ public:
    xsd__decimal                         __item;                       
};

/// Class wrapper for built-in type "xs:double" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__double to check runtime type (see soapStub.h)
class xsd__double : public xsd__anyType
{ public:
    double                               __item;                       
};

/// Primitive built-in type "xs:duration"
typedef char* xsd__duration;

/// Class wrapper for built-in type "xs:duration" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__duration_ to check runtime type (see soapStub.h)
class xsd__duration_ : public xsd__anyType
{ public:
    xsd__duration                        __item;                       
};

/// Class wrapper for built-in type "xs:float" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__float to check runtime type (see soapStub.h)
class xsd__float : public xsd__anyType
{ public:
    float                                __item;                       
};

/// Class wrapper for built-in type "xs:int" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__int to check runtime type (see soapStub.h)
class xsd__int : public xsd__anyType
{ public:
    int                                  __item;                       
};

/// Class wrapper for built-in type "xs:long" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__long to check runtime type (see soapStub.h)
class xsd__long : public xsd__anyType
{ public:
    LONG64                               __item;                       
};

/// Class wrapper for built-in type "xs:short" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__short to check runtime type (see soapStub.h)
class xsd__short : public xsd__anyType
{ public:
    short                                __item;                       
};

/// Class wrapper for built-in type "xs:string" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__string to check runtime type (see soapStub.h)
class xsd__string : public xsd__anyType
{ public:
    char*                                __item;                       
};

/// Built-in type "xs:unsignedByte".
typedef unsigned char xsd__unsignedByte;

/// Class wrapper for built-in type "xs:unsignedByte" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedByte_ to check runtime type (see soapStub.h)
class xsd__unsignedByte_ : public xsd__anyType
{ public:
    xsd__unsignedByte                    __item;                       
};

/// Class wrapper for built-in type "xs:unsignedInt" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedInt to check runtime type (see soapStub.h)
class xsd__unsignedInt : public xsd__anyType
{ public:
    unsigned int                         __item;                       
};

/// Class wrapper for built-in type "xs:unsignedLong" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedLong to check runtime type (see soapStub.h)
class xsd__unsignedLong : public xsd__anyType
{ public:
    ULONG64                              __item;                       
};

/// Class wrapper for built-in type "xs:unsignedShort" derived from xsd__anyType
/// Use soap_type() == SOAP_TYPE_xsd__unsignedShort to check runtime type (see soapStub.h)
class xsd__unsignedShort : public xsd__anyType
{ public:
    unsigned short                       __item;                       
};

/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class _ns1__GetTerminalInfo.
class _ns1__GetTerminalInfo;

//  Forward declaration of class _ns1__GetTerminalInfoResponse.
class _ns1__GetTerminalInfoResponse;

//  Forward declaration of class _ns1__GetHardwareInfo.
class _ns1__GetHardwareInfo;

//  Forward declaration of class _ns1__GetHardwareInfoResponse.
class _ns1__GetHardwareInfoResponse;

//  Forward declaration of class _ns1__GetProcessInfo.
class _ns1__GetProcessInfo;

//  Forward declaration of class _ns1__GetProcessInfoResponse.
class _ns1__GetProcessInfoResponse;

//  Forward declaration of class _ns1__GetThreadInfo.
class _ns1__GetThreadInfo;

//  Forward declaration of class _ns1__GetThreadInfoResponse.
class _ns1__GetThreadInfoResponse;

//  Forward declaration of class _ns1__KillProcess.
class _ns1__KillProcess;

//  Forward declaration of class _ns1__KillProcessResponse.
class _ns1__KillProcessResponse;

//  Forward declaration of class _ns1__SetProcessPriority.
class _ns1__SetProcessPriority;

//  Forward declaration of class _ns1__SetProcessPriorityResponse.
class _ns1__SetProcessPriorityResponse;

//  Forward declaration of class _ns1__SetThreadPriority.
class _ns1__SetThreadPriority;

//  Forward declaration of class _ns1__SetThreadPriorityResponse.
class _ns1__SetThreadPriorityResponse;

//  Forward declaration of class _ns1__ShutDown.
class _ns1__ShutDown;

//  Forward declaration of class _ns1__Restart.
class _ns1__Restart;

//  Forward declaration of class _ns1__BeepForAWhile.
class _ns1__BeepForAWhile;

//  Forward declaration of class ns4__ArrayOfstring.
class ns4__ArrayOfstring;

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.microsoft.com/2003/10/Serialization/":char is a simpleType restriction of xs:int.
typedef int ns3__char;

/// Class wrapper
class ns3__char__ : public xsd__anyType
{ public:
    ns3__char                            __item;                       
};

/// "http://schemas.microsoft.com/2003/10/Serialization/":duration is a simpleType restriction of xs:duration.
/// Content pattern is "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?" (note: not automatically enforced)
/// Value range is [-P10675199DT2H48M5.4775808S..P10675199DT2H48M5.4775807S]
typedef xsd__duration ns3__duration "\\-?P(\\d*D)?(T(\\d*H)?(\\d*M)?(\\d*(\\.\\d*)?S)?)?";

/// Class wrapper
class ns3__duration__ : public xsd__anyType
{ public:
    ns3__duration                        __item;                       
};

/// "http://schemas.microsoft.com/2003/10/Serialization/":guid is a simpleType restriction of xs:string.
/// Content pattern is "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}" (note: not automatically enforced)
typedef char* ns3__guid "[\\da-fA-F]{8}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{4}-[\\da-fA-F]{12}";

/// Class wrapper
class ns3__guid__ : public xsd__anyType
{ public:
    ns3__guid                            __item;                       
};

/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/



/// Top-level root element "http://tempuri.org/":GetTerminalInfo

/// "http://tempuri.org/":GetTerminalInfo is a complexType.
class _ns1__GetTerminalInfo
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetTerminalInfoResponse

/// "http://tempuri.org/":GetTerminalInfoResponse is a complexType.
class _ns1__GetTerminalInfoResponse
{ public:
/// Element GetTerminalInfoResult of type xs:string.
    char*                                GetTerminalInfoResult          0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetHardwareInfo

/// "http://tempuri.org/":GetHardwareInfo is a complexType.
class _ns1__GetHardwareInfo
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetHardwareInfoResponse

/// "http://tempuri.org/":GetHardwareInfoResponse is a complexType.
class _ns1__GetHardwareInfoResponse
{ public:
/// Element GetHardwareInfoResult of type xs:string.
    char*                                GetHardwareInfoResult          0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetProcessInfo

/// "http://tempuri.org/":GetProcessInfo is a complexType.
class _ns1__GetProcessInfo
{ public:
/// Element filter of type xs:string.
    char*                                filter                         0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetProcessInfoResponse

/// "http://tempuri.org/":GetProcessInfoResponse is a complexType.
class _ns1__GetProcessInfoResponse
{ public:
/// Element GetProcessInfoResult of type xs:string.
    char*                                GetProcessInfoResult           0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetThreadInfo

/// "http://tempuri.org/":GetThreadInfo is a complexType.
class _ns1__GetThreadInfo
{ public:
/// Element pid of type xs:int.
    int*                                 pid                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":GetThreadInfoResponse

/// "http://tempuri.org/":GetThreadInfoResponse is a complexType.
class _ns1__GetThreadInfoResponse
{ public:
/// Element GetThreadInfoResult of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
    ns4__ArrayOfstring*                  GetThreadInfoResult            0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":KillProcess

/// "http://tempuri.org/":KillProcess is a complexType.
class _ns1__KillProcess
{ public:
/// Element PID of type xs:int.
    int*                                 PID                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":KillProcessResponse

/// "http://tempuri.org/":KillProcessResponse is a complexType.
class _ns1__KillProcessResponse
{ public:
/// Element KillProcessResult of type xs:boolean.
    bool*                                KillProcessResult              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetProcessPriority

/// "http://tempuri.org/":SetProcessPriority is a complexType.
class _ns1__SetProcessPriority
{ public:
/// Element PID of type xs:int.
    int*                                 PID                            0;	///< Optional element.
/// Element priority of type xs:string.
    char*                                priority                       0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetProcessPriorityResponse

/// "http://tempuri.org/":SetProcessPriorityResponse is a complexType.
class _ns1__SetProcessPriorityResponse
{ public:
/// Element SetProcessPriorityResult of type xs:boolean.
    bool*                                SetProcessPriorityResult       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetThreadPriority

/// "http://tempuri.org/":SetThreadPriority is a complexType.
class _ns1__SetThreadPriority
{ public:
/// Element PID of type xs:int.
    int*                                 PID                            0;	///< Optional element.
/// Element TID of type xs:int.
    int*                                 TID                            0;	///< Optional element.
/// Element priority of type xs:string.
    char*                                priority                       0;	///< Nullable pointer.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":SetThreadPriorityResponse

/// "http://tempuri.org/":SetThreadPriorityResponse is a complexType.
class _ns1__SetThreadPriorityResponse
{ public:
/// Element SetThreadPriorityResult of type xs:boolean.
    bool*                                SetThreadPriorityResult        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":ShutDown

/// "http://tempuri.org/":ShutDown is a complexType.
class _ns1__ShutDown
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":Restart

/// "http://tempuri.org/":Restart is a complexType.
class _ns1__Restart
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Top-level root element "http://tempuri.org/":BeepForAWhile

/// "http://tempuri.org/":BeepForAWhile is a complexType.
class _ns1__BeepForAWhile
{ public:
/// Element ms of type xs:int.
    int*                                 ms                             0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/// "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring is a complexType.
class ns4__ArrayOfstring : public xsd__anyType
{ public:
/// Size of array of char* is 0..unbounded
   $int                                  __sizestring                   0;
/// Pointer to array char* of length 0..unbounded
    char*                               *string                         0;	///< Nullable pointer.
};

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/Imports                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://tempuri.org/                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyType of type xs:anyType.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":anyURI of type xs:anyURI.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":base64Binary of type xs:base64Binary.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":boolean of type xs:boolean.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":byte of type xs:byte.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":dateTime of type xs:dateTime.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":decimal of type xs:decimal.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":double of type xs:double.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":float of type xs:float.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":int of type xs:int.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":long of type xs:long.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":QName of type xs:QName.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":short of type xs:short.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":string of type xs:string.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedByte of type xs:unsignedByte.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedInt of type xs:unsignedInt.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedLong of type xs:unsignedLong.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":unsignedShort of type xs:unsignedShort.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":char of type "http://schemas.microsoft.com/2003/10/Serialization/":char.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":duration of type "http://schemas.microsoft.com/2003/10/Serialization/":duration.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/":guid of type "http://schemas.microsoft.com/2003/10/Serialization/":guid.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.microsoft.com/2003/10/Serialization/                      *
 *                                                                            *
\******************************************************************************/


/// Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":FactoryType of simpleType xs:QName.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Id of simpleType xs:ID.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/// Top-level attribute "http://schemas.microsoft.com/2003/10/Serialization/":Ref of simpleType xs:IDREF.
/// Note: use wsdl2h option -g to auto-generate a top-level attribute declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/// Top-level root element "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring of type "http://schemas.microsoft.com/2003/10/Serialization/Arrays":ArrayOfstring.
/// Note: use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.microsoft.com/2003/10/Serialization/Arrays                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap ns1  service name:	BasicHttpBinding_USCOREIMonitorService 
//gsoap ns1  service type:	IMonitorService 
//gsoap ns1  service port:	http://127.0.0.1:8010/MonitorService/ 
//gsoap ns1  service namespace:	http://tempuri.org/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Monitor Definitions

@section Monitor_bindings Service Bindings
  - @ref BasicHttpBinding_USCOREIMonitorService

@section Monitor_more More Information
- @ref page_notes "Notes"
- @ref page_XMLDataBinding "XML Data Binding"
- @ref SOAP_ENV__Header "SOAP Header Content"
- @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page BasicHttpBinding_USCOREIMonitorService Binding "BasicHttpBinding_USCOREIMonitorService"

@section BasicHttpBinding_USCOREIMonitorService_operations Operations of Binding  "BasicHttpBinding_USCOREIMonitorService"
  - @ref __ns1__GetTerminalInfo
  - @ref __ns1__GetHardwareInfo
  - @ref __ns1__GetProcessInfo
  - @ref __ns1__GetThreadInfo
  - @ref __ns1__KillProcess
  - @ref __ns1__SetProcessPriority
  - @ref __ns1__SetThreadPriority
  - @ref __ns1__ShutDown
  - @ref __ns1__Restart
  - @ref __ns1__BeepForAWhile

@section BasicHttpBinding_USCOREIMonitorService_ports Endpoints of Binding  "BasicHttpBinding_USCOREIMonitorService"
  - http://127.0.0.1:8010/MonitorService/

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   BasicHttpBinding_USCOREIMonitorService                                   *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetTerminalInfo                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetTerminalInfo" of service binding "BasicHttpBinding_USCOREIMonitorService"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://tempuri.org/IMonitorService/GetTerminalInfo"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetTerminalInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetTerminalInfo*              ns1__GetTerminalInfo,
    // response parameters:
    _ns1__GetTerminalInfoResponse*      ns1__GetTerminalInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetTerminalInfo(
    struct soap *soap,
    // request parameters:
    _ns1__GetTerminalInfo*              ns1__GetTerminalInfo,
    // response parameters:
    _ns1__GetTerminalInfoResponse*      ns1__GetTerminalInfoResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIMonitorServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIMonitorServiceService.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetTerminalInfo document
//gsoap ns1  service method-encoding:	GetTerminalInfo literal
//gsoap ns1  service method-action:	GetTerminalInfo http://tempuri.org/IMonitorService/GetTerminalInfo
int __ns1__GetTerminalInfo(
    _ns1__GetTerminalInfo*              ns1__GetTerminalInfo,	///< Request parameter
    _ns1__GetTerminalInfoResponse*      ns1__GetTerminalInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetHardwareInfo                                                   *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetHardwareInfo" of service binding "BasicHttpBinding_USCOREIMonitorService"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://tempuri.org/IMonitorService/GetHardwareInfo"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetHardwareInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetHardwareInfo*              ns1__GetHardwareInfo,
    // response parameters:
    _ns1__GetHardwareInfoResponse*      ns1__GetHardwareInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetHardwareInfo(
    struct soap *soap,
    // request parameters:
    _ns1__GetHardwareInfo*              ns1__GetHardwareInfo,
    // response parameters:
    _ns1__GetHardwareInfoResponse*      ns1__GetHardwareInfoResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIMonitorServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIMonitorServiceService.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetHardwareInfo document
//gsoap ns1  service method-encoding:	GetHardwareInfo literal
//gsoap ns1  service method-action:	GetHardwareInfo http://tempuri.org/IMonitorService/GetHardwareInfo
int __ns1__GetHardwareInfo(
    _ns1__GetHardwareInfo*              ns1__GetHardwareInfo,	///< Request parameter
    _ns1__GetHardwareInfoResponse*      ns1__GetHardwareInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetProcessInfo                                                    *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetProcessInfo" of service binding "BasicHttpBinding_USCOREIMonitorService"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://tempuri.org/IMonitorService/GetProcessInfo"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetProcessInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetProcessInfo*               ns1__GetProcessInfo,
    // response parameters:
    _ns1__GetProcessInfoResponse*       ns1__GetProcessInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetProcessInfo(
    struct soap *soap,
    // request parameters:
    _ns1__GetProcessInfo*               ns1__GetProcessInfo,
    // response parameters:
    _ns1__GetProcessInfoResponse*       ns1__GetProcessInfoResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIMonitorServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIMonitorServiceService.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetProcessInfo document
//gsoap ns1  service method-encoding:	GetProcessInfo literal
//gsoap ns1  service method-action:	GetProcessInfo http://tempuri.org/IMonitorService/GetProcessInfo
int __ns1__GetProcessInfo(
    _ns1__GetProcessInfo*               ns1__GetProcessInfo,	///< Request parameter
    _ns1__GetProcessInfoResponse*       ns1__GetProcessInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetThreadInfo                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__GetThreadInfo" of service binding "BasicHttpBinding_USCOREIMonitorService"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://tempuri.org/IMonitorService/GetThreadInfo"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetThreadInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__GetThreadInfo*                ns1__GetThreadInfo,
    // response parameters:
    _ns1__GetThreadInfoResponse*        ns1__GetThreadInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetThreadInfo(
    struct soap *soap,
    // request parameters:
    _ns1__GetThreadInfo*                ns1__GetThreadInfo,
    // response parameters:
    _ns1__GetThreadInfoResponse*        ns1__GetThreadInfoResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIMonitorServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIMonitorServiceService.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	GetThreadInfo document
//gsoap ns1  service method-encoding:	GetThreadInfo literal
//gsoap ns1  service method-action:	GetThreadInfo http://tempuri.org/IMonitorService/GetThreadInfo
int __ns1__GetThreadInfo(
    _ns1__GetThreadInfo*                ns1__GetThreadInfo,	///< Request parameter
    _ns1__GetThreadInfoResponse*        ns1__GetThreadInfoResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__KillProcess                                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__KillProcess" of service binding "BasicHttpBinding_USCOREIMonitorService"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://tempuri.org/IMonitorService/KillProcess"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__KillProcess(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__KillProcess*                  ns1__KillProcess,
    // response parameters:
    _ns1__KillProcessResponse*          ns1__KillProcessResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__KillProcess(
    struct soap *soap,
    // request parameters:
    _ns1__KillProcess*                  ns1__KillProcess,
    // response parameters:
    _ns1__KillProcessResponse*          ns1__KillProcessResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIMonitorServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIMonitorServiceService.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	KillProcess document
//gsoap ns1  service method-encoding:	KillProcess literal
//gsoap ns1  service method-action:	KillProcess http://tempuri.org/IMonitorService/KillProcess
int __ns1__KillProcess(
    _ns1__KillProcess*                  ns1__KillProcess,	///< Request parameter
    _ns1__KillProcessResponse*          ns1__KillProcessResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetProcessPriority                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetProcessPriority" of service binding "BasicHttpBinding_USCOREIMonitorService"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://tempuri.org/IMonitorService/SetProcessPriority"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetProcessPriority(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetProcessPriority*           ns1__SetProcessPriority,
    // response parameters:
    _ns1__SetProcessPriorityResponse*   ns1__SetProcessPriorityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetProcessPriority(
    struct soap *soap,
    // request parameters:
    _ns1__SetProcessPriority*           ns1__SetProcessPriority,
    // response parameters:
    _ns1__SetProcessPriorityResponse*   ns1__SetProcessPriorityResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIMonitorServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIMonitorServiceService.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetProcessPriority document
//gsoap ns1  service method-encoding:	SetProcessPriority literal
//gsoap ns1  service method-action:	SetProcessPriority http://tempuri.org/IMonitorService/SetProcessPriority
int __ns1__SetProcessPriority(
    _ns1__SetProcessPriority*           ns1__SetProcessPriority,	///< Request parameter
    _ns1__SetProcessPriorityResponse*   ns1__SetProcessPriorityResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SetThreadPriority                                                 *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__SetThreadPriority" of service binding "BasicHttpBinding_USCOREIMonitorService"

/**

Operation details:

  - SOAP document/literal style
  - SOAP action="http://tempuri.org/IMonitorService/SetThreadPriority"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SetThreadPriority(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__SetThreadPriority*            ns1__SetThreadPriority,
    // response parameters:
    _ns1__SetThreadPriorityResponse*    ns1__SetThreadPriorityResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SetThreadPriority(
    struct soap *soap,
    // request parameters:
    _ns1__SetThreadPriority*            ns1__SetThreadPriority,
    // response parameters:
    _ns1__SetThreadPriorityResponse*    ns1__SetThreadPriorityResponse
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIMonitorServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIMonitorServiceService.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	SetThreadPriority document
//gsoap ns1  service method-encoding:	SetThreadPriority literal
//gsoap ns1  service method-action:	SetThreadPriority http://tempuri.org/IMonitorService/SetThreadPriority
int __ns1__SetThreadPriority(
    _ns1__SetThreadPriority*            ns1__SetThreadPriority,	///< Request parameter
    _ns1__SetThreadPriorityResponse*    ns1__SetThreadPriorityResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__ShutDown                                                          *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__ShutDown" of service binding "BasicHttpBinding_USCOREIMonitorService"

/**

Operation details:

  - One-way message
  - SOAP document/literal style
  - SOAP action="http://tempuri.org/IMonitorService/ShutDown"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__ShutDown(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__ShutDown*                     ns1__ShutDown,
    // response parameters:
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__ShutDown(
    struct soap *soap,
    // request parameters:
    _ns1__ShutDown*                     ns1__ShutDown,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIMonitorServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIMonitorServiceService.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	ShutDown document
//gsoap ns1  service method-encoding:	ShutDown literal
//gsoap ns1  service method-action:	ShutDown http://tempuri.org/IMonitorService/ShutDown
int __ns1__ShutDown(
    _ns1__ShutDown*                     ns1__ShutDown,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Restart                                                           *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__Restart" of service binding "BasicHttpBinding_USCOREIMonitorService"

/**

Operation details:

  - One-way message
  - SOAP document/literal style
  - SOAP action="http://tempuri.org/IMonitorService/Restart"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Restart(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__Restart*                      ns1__Restart,
    // response parameters:
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Restart(
    struct soap *soap,
    // request parameters:
    _ns1__Restart*                      ns1__Restart,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIMonitorServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIMonitorServiceService.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	Restart document
//gsoap ns1  service method-encoding:	Restart literal
//gsoap ns1  service method-action:	Restart http://tempuri.org/IMonitorService/Restart
int __ns1__Restart(
    _ns1__Restart*                      ns1__Restart,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__BeepForAWhile                                                     *
 *                                                                            *
\******************************************************************************/


/// Operation "__ns1__BeepForAWhile" of service binding "BasicHttpBinding_USCOREIMonitorService"

/**

Operation details:

  - One-way message
  - SOAP document/literal style
  - SOAP action="http://tempuri.org/IMonitorService/BeepForAWhile"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__BeepForAWhile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _ns1__BeepForAWhile*                ns1__BeepForAWhile,
    // response parameters:
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__BeepForAWhile(
    struct soap *soap,
    // request parameters:
    _ns1__BeepForAWhile*                ns1__BeepForAWhile,
    // response parameters:
  );
@endcode

C++ proxy class (defined in soapBasicHttpBinding_USCOREIMonitorServiceProxy.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceProxy;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use proxy classes;

C++ service class (defined in soapBasicHttpBinding_USCOREIMonitorServiceService.h):
@code
  class BasicHttpBinding_USCOREIMonitorServiceService;
@endcode
Important: use soapcpp2 option '-i' to generate greatly improved and easy-to-use service classes;

*/

//gsoap ns1  service method-style:	BeepForAWhile document
//gsoap ns1  service method-encoding:	BeepForAWhile literal
//gsoap ns1  service method-action:	BeepForAWhile http://tempuri.org/IMonitorService/BeepForAWhile
int __ns1__BeepForAWhile(
    _ns1__BeepForAWhile*                ns1__BeepForAWhile,	///< Request parameter
    void	///< One-way message: no response parameter
);

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

XML content can be retrieved from:
  - a FILE* fd, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

XML content can be stored to:
  - a FILE* fd, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback


@section ns2 Top-level root elements of schema "http://tempuri.org/Imports"

@section ns1 Top-level root elements of schema "http://tempuri.org/"

  - <ns1:GetTerminalInfo> @ref _ns1__GetTerminalInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetTerminalInfo(struct soap*, _ns1__GetTerminalInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetTerminalInfo(struct soap*, _ns1__GetTerminalInfo*);
    @endcode

  - <ns1:GetTerminalInfoResponse> @ref _ns1__GetTerminalInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetTerminalInfoResponse(struct soap*, _ns1__GetTerminalInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetTerminalInfoResponse(struct soap*, _ns1__GetTerminalInfoResponse*);
    @endcode

  - <ns1:GetHardwareInfo> @ref _ns1__GetHardwareInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetHardwareInfo(struct soap*, _ns1__GetHardwareInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetHardwareInfo(struct soap*, _ns1__GetHardwareInfo*);
    @endcode

  - <ns1:GetHardwareInfoResponse> @ref _ns1__GetHardwareInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetHardwareInfoResponse(struct soap*, _ns1__GetHardwareInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetHardwareInfoResponse(struct soap*, _ns1__GetHardwareInfoResponse*);
    @endcode

  - <ns1:GetProcessInfo> @ref _ns1__GetProcessInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetProcessInfo(struct soap*, _ns1__GetProcessInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetProcessInfo(struct soap*, _ns1__GetProcessInfo*);
    @endcode

  - <ns1:GetProcessInfoResponse> @ref _ns1__GetProcessInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetProcessInfoResponse(struct soap*, _ns1__GetProcessInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetProcessInfoResponse(struct soap*, _ns1__GetProcessInfoResponse*);
    @endcode

  - <ns1:GetThreadInfo> @ref _ns1__GetThreadInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetThreadInfo(struct soap*, _ns1__GetThreadInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetThreadInfo(struct soap*, _ns1__GetThreadInfo*);
    @endcode

  - <ns1:GetThreadInfoResponse> @ref _ns1__GetThreadInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetThreadInfoResponse(struct soap*, _ns1__GetThreadInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetThreadInfoResponse(struct soap*, _ns1__GetThreadInfoResponse*);
    @endcode

  - <ns1:KillProcess> @ref _ns1__KillProcess
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__KillProcess(struct soap*, _ns1__KillProcess*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__KillProcess(struct soap*, _ns1__KillProcess*);
    @endcode

  - <ns1:KillProcessResponse> @ref _ns1__KillProcessResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__KillProcessResponse(struct soap*, _ns1__KillProcessResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__KillProcessResponse(struct soap*, _ns1__KillProcessResponse*);
    @endcode

  - <ns1:SetProcessPriority> @ref _ns1__SetProcessPriority
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetProcessPriority(struct soap*, _ns1__SetProcessPriority*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetProcessPriority(struct soap*, _ns1__SetProcessPriority*);
    @endcode

  - <ns1:SetProcessPriorityResponse> @ref _ns1__SetProcessPriorityResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetProcessPriorityResponse(struct soap*, _ns1__SetProcessPriorityResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetProcessPriorityResponse(struct soap*, _ns1__SetProcessPriorityResponse*);
    @endcode

  - <ns1:SetThreadPriority> @ref _ns1__SetThreadPriority
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetThreadPriority(struct soap*, _ns1__SetThreadPriority*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetThreadPriority(struct soap*, _ns1__SetThreadPriority*);
    @endcode

  - <ns1:SetThreadPriorityResponse> @ref _ns1__SetThreadPriorityResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SetThreadPriorityResponse(struct soap*, _ns1__SetThreadPriorityResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SetThreadPriorityResponse(struct soap*, _ns1__SetThreadPriorityResponse*);
    @endcode

  - <ns1:ShutDown> @ref _ns1__ShutDown
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__ShutDown(struct soap*, _ns1__ShutDown*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__ShutDown(struct soap*, _ns1__ShutDown*);
    @endcode

  - <ns1:Restart> @ref _ns1__Restart
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Restart(struct soap*, _ns1__Restart*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Restart(struct soap*, _ns1__Restart*);
    @endcode

  - <ns1:BeepForAWhile> @ref _ns1__BeepForAWhile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__BeepForAWhile(struct soap*, _ns1__BeepForAWhile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__BeepForAWhile(struct soap*, _ns1__BeepForAWhile*);
    @endcode

@section ns3 Top-level root elements of schema "http://schemas.microsoft.com/2003/10/Serialization/"

  - <ns3:anyType> (use wsdl2h option -g to auto-generate)

  - <ns3:anyURI> (use wsdl2h option -g to auto-generate)

  - <ns3:base64Binary> (use wsdl2h option -g to auto-generate)

  - <ns3:boolean> (use wsdl2h option -g to auto-generate)

  - <ns3:byte> (use wsdl2h option -g to auto-generate)

  - <ns3:dateTime> (use wsdl2h option -g to auto-generate)

  - <ns3:decimal> (use wsdl2h option -g to auto-generate)

  - <ns3:double> (use wsdl2h option -g to auto-generate)

  - <ns3:float> (use wsdl2h option -g to auto-generate)

  - <ns3:int> (use wsdl2h option -g to auto-generate)

  - <ns3:long> (use wsdl2h option -g to auto-generate)

  - <ns3:QName> (use wsdl2h option -g to auto-generate)

  - <ns3:short> (use wsdl2h option -g to auto-generate)

  - <ns3:string> (use wsdl2h option -g to auto-generate)

  - <ns3:unsignedByte> (use wsdl2h option -g to auto-generate)

  - <ns3:unsignedInt> (use wsdl2h option -g to auto-generate)

  - <ns3:unsignedLong> (use wsdl2h option -g to auto-generate)

  - <ns3:unsignedShort> (use wsdl2h option -g to auto-generate)

  - <ns3:char> (use wsdl2h option -g to auto-generate)

  - <ns3:duration> (use wsdl2h option -g to auto-generate)

  - <ns3:guid> (use wsdl2h option -g to auto-generate)

@section ns4 Top-level root elements of schema "http://schemas.microsoft.com/2003/10/Serialization/Arrays"

  - <ns4:ArrayOfstring> (use wsdl2h option -g to auto-generate)

*/

/* End of monitor.h */
