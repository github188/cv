/* tx_soapCvTxService.cpp
   Generated by gSOAP 2.8.21 from cvtx.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "tx_soapCvTxService.h"

namespace tx_soap {

CvTxService::CvTxService()
{	CvTxService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

CvTxService::CvTxService(const struct soap &_soap) : soap(_soap)
{ }

CvTxService::CvTxService(soap_mode iomode)
{	CvTxService_init(iomode, iomode);
}

CvTxService::CvTxService(soap_mode imode, soap_mode omode)
{	CvTxService_init(imode, omode);
}

CvTxService::~CvTxService()
{ }

void CvTxService::CvTxService_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns", "urn:CvTx", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this, namespaces);
}

void CvTxService::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void CvTxService::reset()
{	destroy();
	soap_done(this);
	soap_initialize(this);
	CvTxService_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

#ifndef WITH_PURE_VIRTUAL
CvTxService *CvTxService::copy()
{	CvTxService *dup = SOAP_NEW_COPY(CvTxService(*(struct soap*)this));
	return dup;
}
#endif

int CvTxService::soap_close_socket()
{	return soap_closesock(this);
}

int CvTxService::soap_force_close_socket()
{	return soap_force_closesock(this);
}

int CvTxService::soap_senderfault(const char *string, const char *detailXML)
{	return ::soap_sender_fault(this, string, detailXML);
}

int CvTxService::soap_senderfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_sender_fault_subcode(this, subcodeQName, string, detailXML);
}

int CvTxService::soap_receiverfault(const char *string, const char *detailXML)
{	return ::soap_receiver_fault(this, string, detailXML);
}

int CvTxService::soap_receiverfault(const char *subcodeQName, const char *string, const char *detailXML)
{	return ::soap_receiver_fault_subcode(this, subcodeQName, string, detailXML);
}

void CvTxService::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void CvTxService::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *CvTxService::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

void CvTxService::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *CvTxService::soap_header()
{	return this->header;
}

int CvTxService::run(int port)
{	if (soap_valid_socket(this->master) || soap_valid_socket(bind(NULL, port, 100)))
	{	for (;;)
		{	if (!soap_valid_socket(accept()) || serve())
				break;
			soap_destroy(this);
			soap_end(this);
		}
	}
	return this->error;
}

SOAP_SOCKET CvTxService::bind(const char *host, int port, int backlog)
{	return soap_bind(this, host, port, backlog);
}

SOAP_SOCKET CvTxService::accept()
{	return soap_accept(this);
}

#if defined(WITH_OPENSSL) || defined(WITH_GNUTLS)
int CvTxService::ssl_accept()
{	return soap_ssl_accept(this);
}
#endif

int CvTxService::serve()
{
#ifndef WITH_FASTCGI
	unsigned int k = this->max_keep_alive;
#endif
	do
	{

#ifndef WITH_FASTCGI
		if (this->max_keep_alive > 0 && !--k)
			this->keep_alive = 0;
#endif

		if (soap_begin_serve(this))
		{	if (this->error >= SOAP_STOP)
				continue;
			return this->error;
		}
		if (dispatch() || (this->fserveloop && this->fserveloop(this)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(this);
#else
			return soap_send_fault(this);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(this);
		soap_end(this);
	} while (1);
#else
	} while (this->keep_alive);
#endif
	return SOAP_OK;
}

static int serve_ns__QueryDBConference(CvTxService*);
static int serve_ns__QueryDBTerminal(CvTxService*);
static int serve_ns__QueryDBEpisodeDates(CvTxService*);
static int serve_ns__QueryDBEpisode(CvTxService*);
static int serve_ns__QueryDBEpisodeByTime(CvTxService*);
static int serve_ns__QueryDBView(CvTxService*);
static int serve_ns__StartRecord(CvTxService*);
static int serve_ns__StopRecord(CvTxService*);
static int serve_ns__GetRecordStatus(CvTxService*);

int CvTxService::dispatch()
{	soap_peek_element(this);
	if (!soap_match_tag(this, this->tag, "ns:QueryDBConference"))
		return serve_ns__QueryDBConference(this);
	if (!soap_match_tag(this, this->tag, "ns:QueryDBTerminal"))
		return serve_ns__QueryDBTerminal(this);
	if (!soap_match_tag(this, this->tag, "ns:QueryDBEpisodeDates"))
		return serve_ns__QueryDBEpisodeDates(this);
	if (!soap_match_tag(this, this->tag, "ns:QueryDBEpisode"))
		return serve_ns__QueryDBEpisode(this);
	if (!soap_match_tag(this, this->tag, "ns:QueryDBEpisodeByTime"))
		return serve_ns__QueryDBEpisodeByTime(this);
	if (!soap_match_tag(this, this->tag, "ns:QueryDBView"))
		return serve_ns__QueryDBView(this);
	if (!soap_match_tag(this, this->tag, "ns:StartRecord"))
		return serve_ns__StartRecord(this);
	if (!soap_match_tag(this, this->tag, "ns:StopRecord"))
		return serve_ns__StopRecord(this);
	if (!soap_match_tag(this, this->tag, "ns:GetRecordStatus"))
		return serve_ns__GetRecordStatus(this);
	return this->error = SOAP_NO_METHOD;
}

static int serve_ns__QueryDBConference(CvTxService *soap)
{	struct ns__QueryDBConference soap_tmp_ns__QueryDBConference;
	ns__QueryDBConferenceResult result;
	result.soap_default(soap);
	soap_default_ns__QueryDBConference(soap, &soap_tmp_ns__QueryDBConference);
	if (!soap_get_ns__QueryDBConference(soap, &soap_tmp_ns__QueryDBConference, "ns:QueryDBConference", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->QueryDBConference(soap_tmp_ns__QueryDBConference.offset, soap_tmp_ns__QueryDBConference.count, &result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	result.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || result.soap_put(soap, "ns:QueryDBConferenceResult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || result.soap_put(soap, "ns:QueryDBConferenceResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__QueryDBTerminal(CvTxService *soap)
{	struct ns__QueryDBTerminal soap_tmp_ns__QueryDBTerminal;
	ns__QueryDBTerminalResult result;
	result.soap_default(soap);
	soap_default_ns__QueryDBTerminal(soap, &soap_tmp_ns__QueryDBTerminal);
	if (!soap_get_ns__QueryDBTerminal(soap, &soap_tmp_ns__QueryDBTerminal, "ns:QueryDBTerminal", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->QueryDBTerminal(soap_tmp_ns__QueryDBTerminal.cid, &result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	result.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || result.soap_put(soap, "ns:QueryDBTerminalResult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || result.soap_put(soap, "ns:QueryDBTerminalResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__QueryDBEpisodeDates(CvTxService *soap)
{	struct ns__QueryDBEpisodeDates soap_tmp_ns__QueryDBEpisodeDates;
	ns__QueryDBEpisodeDatesResult result;
	result.soap_default(soap);
	soap_default_ns__QueryDBEpisodeDates(soap, &soap_tmp_ns__QueryDBEpisodeDates);
	if (!soap_get_ns__QueryDBEpisodeDates(soap, &soap_tmp_ns__QueryDBEpisodeDates, "ns:QueryDBEpisodeDates", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->QueryDBEpisodeDates(soap_tmp_ns__QueryDBEpisodeDates.cid, soap_tmp_ns__QueryDBEpisodeDates.uri, &result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	result.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || result.soap_put(soap, "ns:QueryDBEpisodeDatesResult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || result.soap_put(soap, "ns:QueryDBEpisodeDatesResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__QueryDBEpisode(CvTxService *soap)
{	struct ns__QueryDBEpisode soap_tmp_ns__QueryDBEpisode;
	ns__QueryDBEpisodeResult result;
	result.soap_default(soap);
	soap_default_ns__QueryDBEpisode(soap, &soap_tmp_ns__QueryDBEpisode);
	if (!soap_get_ns__QueryDBEpisode(soap, &soap_tmp_ns__QueryDBEpisode, "ns:QueryDBEpisode", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->QueryDBEpisode(soap_tmp_ns__QueryDBEpisode.cid, soap_tmp_ns__QueryDBEpisode.uri, soap_tmp_ns__QueryDBEpisode.offset, soap_tmp_ns__QueryDBEpisode.count, &result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	result.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || result.soap_put(soap, "ns:QueryDBEpisodeResult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || result.soap_put(soap, "ns:QueryDBEpisodeResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__QueryDBEpisodeByTime(CvTxService *soap)
{	struct ns__QueryDBEpisodeByTime soap_tmp_ns__QueryDBEpisodeByTime;
	ns__QueryDBEpisodeResult result;
	result.soap_default(soap);
	soap_default_ns__QueryDBEpisodeByTime(soap, &soap_tmp_ns__QueryDBEpisodeByTime);
	if (!soap_get_ns__QueryDBEpisodeByTime(soap, &soap_tmp_ns__QueryDBEpisodeByTime, "ns:QueryDBEpisodeByTime", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->QueryDBEpisodeByTime(soap_tmp_ns__QueryDBEpisodeByTime.cid, soap_tmp_ns__QueryDBEpisodeByTime.uri, soap_tmp_ns__QueryDBEpisodeByTime.start, soap_tmp_ns__QueryDBEpisodeByTime.end, &result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	result.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || result.soap_put(soap, "ns:QueryDBEpisodeResult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || result.soap_put(soap, "ns:QueryDBEpisodeResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__QueryDBView(CvTxService *soap)
{	struct ns__QueryDBView soap_tmp_ns__QueryDBView;
	ns__QueryDBViewResult result;
	result.soap_default(soap);
	soap_default_ns__QueryDBView(soap, &soap_tmp_ns__QueryDBView);
	if (!soap_get_ns__QueryDBView(soap, &soap_tmp_ns__QueryDBView, "ns:QueryDBView", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->QueryDBView(soap_tmp_ns__QueryDBView.eid, &result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	result.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || result.soap_put(soap, "ns:QueryDBViewResult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || result.soap_put(soap, "ns:QueryDBViewResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__StartRecord(CvTxService *soap)
{	struct ns__StartRecord soap_tmp_ns__StartRecord;
	struct ns__StartRecordResponse soap_tmp_ns__StartRecordResponse;
	int soap_tmp_int;
	soap_default_ns__StartRecordResponse(soap, &soap_tmp_ns__StartRecordResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_ns__StartRecordResponse.result = &soap_tmp_int;
	soap_default_ns__StartRecord(soap, &soap_tmp_ns__StartRecord);
	if (!soap_get_ns__StartRecord(soap, &soap_tmp_ns__StartRecord, "ns:StartRecord", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->StartRecord(soap_tmp_ns__StartRecord.param, soap_tmp_ns__StartRecordResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__StartRecordResponse(soap, &soap_tmp_ns__StartRecordResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__StartRecordResponse(soap, &soap_tmp_ns__StartRecordResponse, "ns:StartRecordResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__StartRecordResponse(soap, &soap_tmp_ns__StartRecordResponse, "ns:StartRecordResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__StopRecord(CvTxService *soap)
{	struct ns__StopRecord soap_tmp_ns__StopRecord;
	struct ns__StopRecordResponse soap_tmp_ns__StopRecordResponse;
	int soap_tmp_int;
	soap_default_ns__StopRecordResponse(soap, &soap_tmp_ns__StopRecordResponse);
	soap_default_int(soap, &soap_tmp_int);
	soap_tmp_ns__StopRecordResponse.result = &soap_tmp_int;
	soap_default_ns__StopRecord(soap, &soap_tmp_ns__StopRecord);
	if (!soap_get_ns__StopRecord(soap, &soap_tmp_ns__StopRecord, "ns:StopRecord", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->StopRecord(soap_tmp_ns__StopRecord.param, soap_tmp_ns__StopRecordResponse.result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	soap_serialize_ns__StopRecordResponse(soap, &soap_tmp_ns__StopRecordResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_ns__StopRecordResponse(soap, &soap_tmp_ns__StopRecordResponse, "ns:StopRecordResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_ns__StopRecordResponse(soap, &soap_tmp_ns__StopRecordResponse, "ns:StopRecordResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

static int serve_ns__GetRecordStatus(CvTxService *soap)
{	struct ns__GetRecordStatus soap_tmp_ns__GetRecordStatus;
	ns__GetRecordStatusResult result;
	result.soap_default(soap);
	soap_default_ns__GetRecordStatus(soap, &soap_tmp_ns__GetRecordStatus);
	if (!soap_get_ns__GetRecordStatus(soap, &soap_tmp_ns__GetRecordStatus, "ns:GetRecordStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = soap->GetRecordStatus(soap_tmp_ns__GetRecordStatus.focus, soap_tmp_ns__GetRecordStatus.uri, &result);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = "";
	soap_serializeheader(soap);
	result.soap_serialize(soap);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || result.soap_put(soap, "ns:GetRecordStatusResult", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || result.soap_put(soap, "ns:GetRecordStatusResult", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

} // namespace tx_soap

/* End of server object code */
