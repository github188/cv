/* tx_soapC.cpp
   Generated by gSOAP 2.8.21 from cvtx.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "tx_soapH.h"

namespace tx_soap {

SOAP_SOURCE_STAMP("@(#) tx_soapC.cpp ver 2.8.21 2015-05-12 07:29:43 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_tx_soap_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_tx_soap_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_tx_soap_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_tx_soap_long:
		return soap_in_long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_tx_soap_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_tx_soap_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_tx_soap_unsignedLONG64:
		return soap_in_unsignedLONG64(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_tx_soap_ns__GetRecordStatusResult:
		return soap_in_ns__GetRecordStatusResult(soap, NULL, NULL, "ns:GetRecordStatusResult");
	case SOAP_TYPE_tx_soap_ns__RecordTerminalStatus:
		return soap_in_ns__RecordTerminalStatus(soap, NULL, NULL, "ns:RecordTerminalStatus");
	case SOAP_TYPE_tx_soap_ns__StopRecordParam:
		return soap_in_ns__StopRecordParam(soap, NULL, NULL, "ns:StopRecordParam");
	case SOAP_TYPE_tx_soap_ns__StartRecordParam:
		return soap_in_ns__StartRecordParam(soap, NULL, NULL, "ns:StartRecordParam");
	case SOAP_TYPE_tx_soap_ns__QueryDBViewResult:
		return soap_in_ns__QueryDBViewResult(soap, NULL, NULL, "ns:QueryDBViewResult");
	case SOAP_TYPE_tx_soap_ns__DBViewNode:
		return soap_in_ns__DBViewNode(soap, NULL, NULL, "ns:DBViewNode");
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTimeResult:
		return soap_in_ns__QueryDBEpisodeByTimeResult(soap, NULL, NULL, "ns:QueryDBEpisodeByTimeResult");
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult:
		return soap_in_ns__QueryDBEpisodeResult(soap, NULL, NULL, "ns:QueryDBEpisodeResult");
	case SOAP_TYPE_tx_soap_ns__DBEpisodeNode:
		return soap_in_ns__DBEpisodeNode(soap, NULL, NULL, "ns:DBEpisodeNode");
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult:
		return soap_in_ns__QueryDBEpisodeDatesResult(soap, NULL, NULL, "ns:QueryDBEpisodeDatesResult");
	case SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult:
		return soap_in_ns__QueryDBTerminalResult(soap, NULL, NULL, "ns:QueryDBTerminalResult");
	case SOAP_TYPE_tx_soap_ns__DBTerminalNode:
		return soap_in_ns__DBTerminalNode(soap, NULL, NULL, "ns:DBTerminalNode");
	case SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult:
		return soap_in_ns__QueryDBConferenceResult(soap, NULL, NULL, "ns:QueryDBConferenceResult");
	case SOAP_TYPE_tx_soap_ns__DBConferenceNode:
		return soap_in_ns__DBConferenceNode(soap, NULL, NULL, "ns:DBConferenceNode");
	case SOAP_TYPE_tx_soap_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_tx_soap_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_tx_soap_ns__GetRecordStatus:
		return soap_in_ns__GetRecordStatus(soap, NULL, NULL, "ns:GetRecordStatus");
	case SOAP_TYPE_tx_soap_ns__StopRecord:
		return soap_in_ns__StopRecord(soap, NULL, NULL, "ns:StopRecord");
	case SOAP_TYPE_tx_soap_ns__StopRecordResponse:
		return soap_in_ns__StopRecordResponse(soap, NULL, NULL, "ns:StopRecordResponse");
	case SOAP_TYPE_tx_soap_ns__StartRecord:
		return soap_in_ns__StartRecord(soap, NULL, NULL, "ns:StartRecord");
	case SOAP_TYPE_tx_soap_ns__StartRecordResponse:
		return soap_in_ns__StartRecordResponse(soap, NULL, NULL, "ns:StartRecordResponse");
	case SOAP_TYPE_tx_soap_ns__QueryDBView:
		return soap_in_ns__QueryDBView(soap, NULL, NULL, "ns:QueryDBView");
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTime:
		return soap_in_ns__QueryDBEpisodeByTime(soap, NULL, NULL, "ns:QueryDBEpisodeByTime");
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisode:
		return soap_in_ns__QueryDBEpisode(soap, NULL, NULL, "ns:QueryDBEpisode");
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDates:
		return soap_in_ns__QueryDBEpisodeDates(soap, NULL, NULL, "ns:QueryDBEpisodeDates");
	case SOAP_TYPE_tx_soap_ns__QueryDBTerminal:
		return soap_in_ns__QueryDBTerminal(soap, NULL, NULL, "ns:QueryDBTerminal");
	case SOAP_TYPE_tx_soap_ns__QueryDBConference:
		return soap_in_ns__QueryDBConference(soap, NULL, NULL, "ns:QueryDBConference");
	case SOAP_TYPE_tx_soap_PointerTons__GetRecordStatusResult:
		return soap_in_PointerTons__GetRecordStatusResult(soap, NULL, NULL, "ns:GetRecordStatusResult");
	case SOAP_TYPE_tx_soap_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_tx_soap_PointerTons__QueryDBViewResult:
		return soap_in_PointerTons__QueryDBViewResult(soap, NULL, NULL, "ns:QueryDBViewResult");
	case SOAP_TYPE_tx_soap_PointerTons__QueryDBEpisodeResult:
		return soap_in_PointerTons__QueryDBEpisodeResult(soap, NULL, NULL, "ns:QueryDBEpisodeResult");
	case SOAP_TYPE_tx_soap_PointerTons__QueryDBEpisodeDatesResult:
		return soap_in_PointerTons__QueryDBEpisodeDatesResult(soap, NULL, NULL, "ns:QueryDBEpisodeDatesResult");
	case SOAP_TYPE_tx_soap_PointerTons__QueryDBTerminalResult:
		return soap_in_PointerTons__QueryDBTerminalResult(soap, NULL, NULL, "ns:QueryDBTerminalResult");
	case SOAP_TYPE_tx_soap_PointerTons__QueryDBConferenceResult:
		return soap_in_PointerTons__QueryDBConferenceResult(soap, NULL, NULL, "ns:QueryDBConferenceResult");
	case SOAP_TYPE_tx_soap__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_tx_soap_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns:GetRecordStatusResult"))
		{	*type = SOAP_TYPE_tx_soap_ns__GetRecordStatusResult;
			return soap_in_ns__GetRecordStatusResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:RecordTerminalStatus"))
		{	*type = SOAP_TYPE_tx_soap_ns__RecordTerminalStatus;
			return soap_in_ns__RecordTerminalStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:StopRecordParam"))
		{	*type = SOAP_TYPE_tx_soap_ns__StopRecordParam;
			return soap_in_ns__StopRecordParam(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:StartRecordParam"))
		{	*type = SOAP_TYPE_tx_soap_ns__StartRecordParam;
			return soap_in_ns__StartRecordParam(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryDBViewResult"))
		{	*type = SOAP_TYPE_tx_soap_ns__QueryDBViewResult;
			return soap_in_ns__QueryDBViewResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:DBViewNode"))
		{	*type = SOAP_TYPE_tx_soap_ns__DBViewNode;
			return soap_in_ns__DBViewNode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryDBEpisodeByTimeResult"))
		{	*type = SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTimeResult;
			return soap_in_ns__QueryDBEpisodeByTimeResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryDBEpisodeResult"))
		{	*type = SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult;
			return soap_in_ns__QueryDBEpisodeResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:DBEpisodeNode"))
		{	*type = SOAP_TYPE_tx_soap_ns__DBEpisodeNode;
			return soap_in_ns__DBEpisodeNode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryDBEpisodeDatesResult"))
		{	*type = SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult;
			return soap_in_ns__QueryDBEpisodeDatesResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryDBTerminalResult"))
		{	*type = SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult;
			return soap_in_ns__QueryDBTerminalResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:DBTerminalNode"))
		{	*type = SOAP_TYPE_tx_soap_ns__DBTerminalNode;
			return soap_in_ns__DBTerminalNode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryDBConferenceResult"))
		{	*type = SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult;
			return soap_in_ns__QueryDBConferenceResult(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:DBConferenceNode"))
		{	*type = SOAP_TYPE_tx_soap_ns__DBConferenceNode;
			return soap_in_ns__DBConferenceNode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_tx_soap_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_tx_soap_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_tx_soap_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_tx_soap_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_tx_soap_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_tx_soap_long;
			return soap_in_long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_tx_soap_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_tx_soap_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_tx_soap_unsignedLONG64;
			return soap_in_unsignedLONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:GetRecordStatus"))
		{	*type = SOAP_TYPE_tx_soap_ns__GetRecordStatus;
			return soap_in_ns__GetRecordStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:StopRecord"))
		{	*type = SOAP_TYPE_tx_soap_ns__StopRecord;
			return soap_in_ns__StopRecord(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:StopRecordResponse"))
		{	*type = SOAP_TYPE_tx_soap_ns__StopRecordResponse;
			return soap_in_ns__StopRecordResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:StartRecord"))
		{	*type = SOAP_TYPE_tx_soap_ns__StartRecord;
			return soap_in_ns__StartRecord(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:StartRecordResponse"))
		{	*type = SOAP_TYPE_tx_soap_ns__StartRecordResponse;
			return soap_in_ns__StartRecordResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryDBView"))
		{	*type = SOAP_TYPE_tx_soap_ns__QueryDBView;
			return soap_in_ns__QueryDBView(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryDBEpisodeByTime"))
		{	*type = SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTime;
			return soap_in_ns__QueryDBEpisodeByTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryDBEpisode"))
		{	*type = SOAP_TYPE_tx_soap_ns__QueryDBEpisode;
			return soap_in_ns__QueryDBEpisode(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryDBEpisodeDates"))
		{	*type = SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDates;
			return soap_in_ns__QueryDBEpisodeDates(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryDBTerminal"))
		{	*type = SOAP_TYPE_tx_soap_ns__QueryDBTerminal;
			return soap_in_ns__QueryDBTerminal(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns:QueryDBConference"))
		{	*type = SOAP_TYPE_tx_soap_ns__QueryDBConference;
			return soap_in_ns__QueryDBConference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_tx_soap__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_tx_soap_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_tx_soap_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_tx_soap_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_tx_soap_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_tx_soap_long:
		return soap_out_long(soap, tag, id, (const long *)ptr, "xsd:long");
	case SOAP_TYPE_tx_soap_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_tx_soap_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_tx_soap_unsignedLONG64:
		return soap_out_unsignedLONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_tx_soap_ns__GetRecordStatusResult:
		return ((ns__GetRecordStatusResult *)ptr)->soap_out(soap, tag, id, "ns:GetRecordStatusResult");
	case SOAP_TYPE_tx_soap_ns__RecordTerminalStatus:
		return ((ns__RecordTerminalStatus *)ptr)->soap_out(soap, tag, id, "ns:RecordTerminalStatus");
	case SOAP_TYPE_tx_soap_ns__StopRecordParam:
		return ((ns__StopRecordParam *)ptr)->soap_out(soap, tag, id, "ns:StopRecordParam");
	case SOAP_TYPE_tx_soap_ns__StartRecordParam:
		return ((ns__StartRecordParam *)ptr)->soap_out(soap, tag, id, "ns:StartRecordParam");
	case SOAP_TYPE_tx_soap_ns__QueryDBViewResult:
		return ((ns__QueryDBViewResult *)ptr)->soap_out(soap, tag, id, "ns:QueryDBViewResult");
	case SOAP_TYPE_tx_soap_ns__DBViewNode:
		return ((ns__DBViewNode *)ptr)->soap_out(soap, tag, id, "ns:DBViewNode");
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTimeResult:
		return ((ns__QueryDBEpisodeByTimeResult *)ptr)->soap_out(soap, tag, id, "ns:QueryDBEpisodeByTimeResult");
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult:
		return ((ns__QueryDBEpisodeResult *)ptr)->soap_out(soap, tag, id, "ns:QueryDBEpisodeResult");
	case SOAP_TYPE_tx_soap_ns__DBEpisodeNode:
		return ((ns__DBEpisodeNode *)ptr)->soap_out(soap, tag, id, "ns:DBEpisodeNode");
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult:
		return ((ns__QueryDBEpisodeDatesResult *)ptr)->soap_out(soap, tag, id, "ns:QueryDBEpisodeDatesResult");
	case SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult:
		return ((ns__QueryDBTerminalResult *)ptr)->soap_out(soap, tag, id, "ns:QueryDBTerminalResult");
	case SOAP_TYPE_tx_soap_ns__DBTerminalNode:
		return ((ns__DBTerminalNode *)ptr)->soap_out(soap, tag, id, "ns:DBTerminalNode");
	case SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult:
		return ((ns__QueryDBConferenceResult *)ptr)->soap_out(soap, tag, id, "ns:QueryDBConferenceResult");
	case SOAP_TYPE_tx_soap_ns__DBConferenceNode:
		return ((ns__DBConferenceNode *)ptr)->soap_out(soap, tag, id, "ns:DBConferenceNode");
	case SOAP_TYPE_tx_soap_xsd__string:
		return soap_out_xsd__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_tx_soap_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_tx_soap_ns__GetRecordStatus:
		return soap_out_ns__GetRecordStatus(soap, tag, id, (const struct ns__GetRecordStatus *)ptr, "ns:GetRecordStatus");
	case SOAP_TYPE_tx_soap_ns__StopRecord:
		return soap_out_ns__StopRecord(soap, tag, id, (const struct ns__StopRecord *)ptr, "ns:StopRecord");
	case SOAP_TYPE_tx_soap_ns__StopRecordResponse:
		return soap_out_ns__StopRecordResponse(soap, tag, id, (const struct ns__StopRecordResponse *)ptr, "ns:StopRecordResponse");
	case SOAP_TYPE_tx_soap_ns__StartRecord:
		return soap_out_ns__StartRecord(soap, tag, id, (const struct ns__StartRecord *)ptr, "ns:StartRecord");
	case SOAP_TYPE_tx_soap_ns__StartRecordResponse:
		return soap_out_ns__StartRecordResponse(soap, tag, id, (const struct ns__StartRecordResponse *)ptr, "ns:StartRecordResponse");
	case SOAP_TYPE_tx_soap_ns__QueryDBView:
		return soap_out_ns__QueryDBView(soap, tag, id, (const struct ns__QueryDBView *)ptr, "ns:QueryDBView");
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTime:
		return soap_out_ns__QueryDBEpisodeByTime(soap, tag, id, (const struct ns__QueryDBEpisodeByTime *)ptr, "ns:QueryDBEpisodeByTime");
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisode:
		return soap_out_ns__QueryDBEpisode(soap, tag, id, (const struct ns__QueryDBEpisode *)ptr, "ns:QueryDBEpisode");
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDates:
		return soap_out_ns__QueryDBEpisodeDates(soap, tag, id, (const struct ns__QueryDBEpisodeDates *)ptr, "ns:QueryDBEpisodeDates");
	case SOAP_TYPE_tx_soap_ns__QueryDBTerminal:
		return soap_out_ns__QueryDBTerminal(soap, tag, id, (const struct ns__QueryDBTerminal *)ptr, "ns:QueryDBTerminal");
	case SOAP_TYPE_tx_soap_ns__QueryDBConference:
		return soap_out_ns__QueryDBConference(soap, tag, id, (const struct ns__QueryDBConference *)ptr, "ns:QueryDBConference");
	case SOAP_TYPE_tx_soap_PointerTons__GetRecordStatusResult:
		return soap_out_PointerTons__GetRecordStatusResult(soap, tag, id, (ns__GetRecordStatusResult *const*)ptr, "ns:GetRecordStatusResult");
	case SOAP_TYPE_tx_soap_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_tx_soap_PointerTons__QueryDBViewResult:
		return soap_out_PointerTons__QueryDBViewResult(soap, tag, id, (ns__QueryDBViewResult *const*)ptr, "ns:QueryDBViewResult");
	case SOAP_TYPE_tx_soap_PointerTons__QueryDBEpisodeResult:
		return soap_out_PointerTons__QueryDBEpisodeResult(soap, tag, id, (ns__QueryDBEpisodeResult *const*)ptr, "ns:QueryDBEpisodeResult");
	case SOAP_TYPE_tx_soap_PointerTons__QueryDBEpisodeDatesResult:
		return soap_out_PointerTons__QueryDBEpisodeDatesResult(soap, tag, id, (ns__QueryDBEpisodeDatesResult *const*)ptr, "ns:QueryDBEpisodeDatesResult");
	case SOAP_TYPE_tx_soap_PointerTons__QueryDBTerminalResult:
		return soap_out_PointerTons__QueryDBTerminalResult(soap, tag, id, (ns__QueryDBTerminalResult *const*)ptr, "ns:QueryDBTerminalResult");
	case SOAP_TYPE_tx_soap_PointerTons__QueryDBConferenceResult:
		return soap_out_PointerTons__QueryDBConferenceResult(soap, tag, id, (ns__QueryDBConferenceResult *const*)ptr, "ns:QueryDBConferenceResult");
	case SOAP_TYPE_tx_soap__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_tx_soap_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_tx_soap_ns__GetRecordStatusResult:
		((ns__GetRecordStatusResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tx_soap_ns__RecordTerminalStatus:
		((ns__RecordTerminalStatus *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tx_soap_ns__StopRecordParam:
		((ns__StopRecordParam *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tx_soap_ns__StartRecordParam:
		((ns__StartRecordParam *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBViewResult:
		((ns__QueryDBViewResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tx_soap_ns__DBViewNode:
		((ns__DBViewNode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTimeResult:
		((ns__QueryDBEpisodeByTimeResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult:
		((ns__QueryDBEpisodeResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tx_soap_ns__DBEpisodeNode:
		((ns__DBEpisodeNode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult:
		((ns__QueryDBEpisodeDatesResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult:
		((ns__QueryDBTerminalResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tx_soap_ns__DBTerminalNode:
		((ns__DBTerminalNode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult:
		((ns__QueryDBConferenceResult *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tx_soap_ns__DBConferenceNode:
		((ns__DBConferenceNode *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_tx_soap_xsd__string:
		soap_serialize_xsd__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tx_soap_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__GetRecordStatus:
		soap_serialize_ns__GetRecordStatus(soap, (const struct ns__GetRecordStatus *)ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__StopRecord:
		soap_serialize_ns__StopRecord(soap, (const struct ns__StopRecord *)ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__StopRecordResponse:
		soap_serialize_ns__StopRecordResponse(soap, (const struct ns__StopRecordResponse *)ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__StartRecord:
		soap_serialize_ns__StartRecord(soap, (const struct ns__StartRecord *)ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__StartRecordResponse:
		soap_serialize_ns__StartRecordResponse(soap, (const struct ns__StartRecordResponse *)ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBView:
		soap_serialize_ns__QueryDBView(soap, (const struct ns__QueryDBView *)ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTime:
		soap_serialize_ns__QueryDBEpisodeByTime(soap, (const struct ns__QueryDBEpisodeByTime *)ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisode:
		soap_serialize_ns__QueryDBEpisode(soap, (const struct ns__QueryDBEpisode *)ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDates:
		soap_serialize_ns__QueryDBEpisodeDates(soap, (const struct ns__QueryDBEpisodeDates *)ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBTerminal:
		soap_serialize_ns__QueryDBTerminal(soap, (const struct ns__QueryDBTerminal *)ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBConference:
		soap_serialize_ns__QueryDBConference(soap, (const struct ns__QueryDBConference *)ptr);
		break;
	case SOAP_TYPE_tx_soap_PointerTons__GetRecordStatusResult:
		soap_serialize_PointerTons__GetRecordStatusResult(soap, (ns__GetRecordStatusResult *const*)ptr);
		break;
	case SOAP_TYPE_tx_soap_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_tx_soap_PointerTons__QueryDBViewResult:
		soap_serialize_PointerTons__QueryDBViewResult(soap, (ns__QueryDBViewResult *const*)ptr);
		break;
	case SOAP_TYPE_tx_soap_PointerTons__QueryDBEpisodeResult:
		soap_serialize_PointerTons__QueryDBEpisodeResult(soap, (ns__QueryDBEpisodeResult *const*)ptr);
		break;
	case SOAP_TYPE_tx_soap_PointerTons__QueryDBEpisodeDatesResult:
		soap_serialize_PointerTons__QueryDBEpisodeDatesResult(soap, (ns__QueryDBEpisodeDatesResult *const*)ptr);
		break;
	case SOAP_TYPE_tx_soap_PointerTons__QueryDBTerminalResult:
		soap_serialize_PointerTons__QueryDBTerminalResult(soap, (ns__QueryDBTerminalResult *const*)ptr);
		break;
	case SOAP_TYPE_tx_soap_PointerTons__QueryDBConferenceResult:
		soap_serialize_PointerTons__QueryDBConferenceResult(soap, (ns__QueryDBConferenceResult *const*)ptr);
		break;
	case SOAP_TYPE_tx_soap__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_tx_soap_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 tx_soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_tx_soap_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__DBConferenceNode:
		return (void*)soap_instantiate_ns__DBConferenceNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult:
		return (void*)soap_instantiate_ns__QueryDBConferenceResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__DBTerminalNode:
		return (void*)soap_instantiate_ns__DBTerminalNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult:
		return (void*)soap_instantiate_ns__QueryDBTerminalResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult:
		return (void*)soap_instantiate_ns__QueryDBEpisodeDatesResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__DBEpisodeNode:
		return (void*)soap_instantiate_ns__DBEpisodeNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult:
		return (void*)soap_instantiate_ns__QueryDBEpisodeResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTimeResult:
		return (void*)soap_instantiate_ns__QueryDBEpisodeByTimeResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__DBViewNode:
		return (void*)soap_instantiate_ns__DBViewNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__QueryDBViewResult:
		return (void*)soap_instantiate_ns__QueryDBViewResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__QueryDBConference:
		return (void*)soap_instantiate_ns__QueryDBConference(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__QueryDBTerminal:
		return (void*)soap_instantiate_ns__QueryDBTerminal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDates:
		return (void*)soap_instantiate_ns__QueryDBEpisodeDates(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisode:
		return (void*)soap_instantiate_ns__QueryDBEpisode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTime:
		return (void*)soap_instantiate_ns__QueryDBEpisodeByTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__QueryDBView:
		return (void*)soap_instantiate_ns__QueryDBView(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__StartRecordParam:
		return (void*)soap_instantiate_ns__StartRecordParam(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__StopRecordParam:
		return (void*)soap_instantiate_ns__StopRecordParam(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__RecordTerminalStatus:
		return (void*)soap_instantiate_ns__RecordTerminalStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__GetRecordStatusResult:
		return (void*)soap_instantiate_ns__GetRecordStatusResult(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__StartRecordResponse:
		return (void*)soap_instantiate_ns__StartRecordResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__StartRecord:
		return (void*)soap_instantiate_ns__StartRecord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__StopRecordResponse:
		return (void*)soap_instantiate_ns__StopRecordResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__StopRecord:
		return (void*)soap_instantiate_ns__StopRecord(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_ns__GetRecordStatus:
		return (void*)soap_instantiate_ns__GetRecordStatus(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_tx_soap_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_tx_soap_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_tx_soap_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_tx_soap_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_tx_soap_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_tx_soap_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfns__RecordTerminalStatus:
		return (void*)soap_instantiate_std__vectorTemplateOfns__RecordTerminalStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBViewNode:
		return (void*)soap_instantiate_std__vectorTemplateOfns__DBViewNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBEpisodeNode:
		return (void*)soap_instantiate_std__vectorTemplateOfns__DBEpisodeNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfshort:
		return (void*)soap_instantiate_std__vectorTemplateOfshort(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBTerminalNode:
		return (void*)soap_instantiate_std__vectorTemplateOfns__DBTerminalNode(soap, -1, type, arrayType, n);
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBConferenceNode:
		return (void*)soap_instantiate_std__vectorTemplateOfns__DBConferenceNode(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 tx_soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_tx_soap_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__DBConferenceNode:
		if (p->size < 0)
			SOAP_DELETE((ns__DBConferenceNode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__DBConferenceNode*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult:
		if (p->size < 0)
			SOAP_DELETE((ns__QueryDBConferenceResult*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__QueryDBConferenceResult*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__DBTerminalNode:
		if (p->size < 0)
			SOAP_DELETE((ns__DBTerminalNode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__DBTerminalNode*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult:
		if (p->size < 0)
			SOAP_DELETE((ns__QueryDBTerminalResult*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__QueryDBTerminalResult*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult:
		if (p->size < 0)
			SOAP_DELETE((ns__QueryDBEpisodeDatesResult*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__QueryDBEpisodeDatesResult*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__DBEpisodeNode:
		if (p->size < 0)
			SOAP_DELETE((ns__DBEpisodeNode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__DBEpisodeNode*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult:
		if (p->size < 0)
			SOAP_DELETE((ns__QueryDBEpisodeResult*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__QueryDBEpisodeResult*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTimeResult:
		if (p->size < 0)
			SOAP_DELETE((ns__QueryDBEpisodeByTimeResult*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__QueryDBEpisodeByTimeResult*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__DBViewNode:
		if (p->size < 0)
			SOAP_DELETE((ns__DBViewNode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__DBViewNode*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBViewResult:
		if (p->size < 0)
			SOAP_DELETE((ns__QueryDBViewResult*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__QueryDBViewResult*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBConference:
		if (p->size < 0)
			SOAP_DELETE((struct ns__QueryDBConference*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__QueryDBConference*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBTerminal:
		if (p->size < 0)
			SOAP_DELETE((struct ns__QueryDBTerminal*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__QueryDBTerminal*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDates:
		if (p->size < 0)
			SOAP_DELETE((struct ns__QueryDBEpisodeDates*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__QueryDBEpisodeDates*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisode:
		if (p->size < 0)
			SOAP_DELETE((struct ns__QueryDBEpisode*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__QueryDBEpisode*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTime:
		if (p->size < 0)
			SOAP_DELETE((struct ns__QueryDBEpisodeByTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__QueryDBEpisodeByTime*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__QueryDBView:
		if (p->size < 0)
			SOAP_DELETE((struct ns__QueryDBView*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__QueryDBView*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__StartRecordParam:
		if (p->size < 0)
			SOAP_DELETE((ns__StartRecordParam*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__StartRecordParam*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__StopRecordParam:
		if (p->size < 0)
			SOAP_DELETE((ns__StopRecordParam*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__StopRecordParam*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__RecordTerminalStatus:
		if (p->size < 0)
			SOAP_DELETE((ns__RecordTerminalStatus*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__RecordTerminalStatus*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__GetRecordStatusResult:
		if (p->size < 0)
			SOAP_DELETE((ns__GetRecordStatusResult*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns__GetRecordStatusResult*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__StartRecordResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__StartRecordResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__StartRecordResponse*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__StartRecord:
		if (p->size < 0)
			SOAP_DELETE((struct ns__StartRecord*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__StartRecord*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__StopRecordResponse:
		if (p->size < 0)
			SOAP_DELETE((struct ns__StopRecordResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__StopRecordResponse*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__StopRecord:
		if (p->size < 0)
			SOAP_DELETE((struct ns__StopRecord*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__StopRecord*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_ns__GetRecordStatus:
		if (p->size < 0)
			SOAP_DELETE((struct ns__GetRecordStatus*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct ns__GetRecordStatus*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_tx_soap_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_tx_soap_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_tx_soap_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_tx_soap_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_tx_soap_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_tx_soap_xsd__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfns__RecordTerminalStatus:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns__RecordTerminalStatus >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns__RecordTerminalStatus >*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBViewNode:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns__DBViewNode >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns__DBViewNode >*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBEpisodeNode:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns__DBEpisodeNode >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns__DBEpisodeNode >*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfshort:
		if (p->size < 0)
			SOAP_DELETE((std::vector<short >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<short >*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBTerminalNode:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns__DBTerminalNode >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns__DBTerminalNode >*)p->ptr);
		break;
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBConferenceNode:
		if (p->size < 0)
			SOAP_DELETE((std::vector<ns__DBConferenceNode >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<ns__DBConferenceNode >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, tx_soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, tx_soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 tx_soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfns__RecordTerminalStatus:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container tx_soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns__RecordTerminalStatus >*)p)[len] = *(ns__RecordTerminalStatus *)q;
		break;
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBViewNode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container tx_soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns__DBViewNode >*)p)[len] = *(ns__DBViewNode *)q;
		break;
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBEpisodeNode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container tx_soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns__DBEpisodeNode >*)p)[len] = *(ns__DBEpisodeNode *)q;
		break;
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfshort:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container tx_soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<short >*)p)[len] = *(short *)q;
		break;
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBTerminalNode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container tx_soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns__DBTerminalNode >*)p)[len] = *(ns__DBTerminalNode *)q;
		break;
	case SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBConferenceNode:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container tx_soap_container_insert type = %d in %d location = %p object = %p len = %lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<ns__DBConferenceNode >*)p)[len] = *(ns__DBConferenceNode *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type = %d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_tx_soap_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_tx_soap_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_tx_soap_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{	short *p;
	p = soap_inshort(soap, tag, a, type, SOAP_TYPE_tx_soap_short);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_short);
	if (soap_out_short(soap, tag?tag:"short", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_tx_soap_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_tx_soap_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap *soap, long *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_long
	*a = SOAP_DEFAULT_long;
#else
	*a = (long)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap *soap, const char *tag, int id, const long *a, const char *type)
{
	return soap_outlong(soap, tag, id, a, type, SOAP_TYPE_tx_soap_long);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap *soap, const char *tag, long *a, const char *type)
{	long *p;
	p = soap_inlong(soap, tag, a, type, SOAP_TYPE_tx_soap_long);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap *soap, const long *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_long);
	if (soap_out_long(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap *soap, long *p, const char *tag, const char *type)
{
	if ((p = soap_in_long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_tx_soap_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_tx_soap_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_tx_soap_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_tx_soap_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedLONG64
	*a = SOAP_DEFAULT_unsignedLONG64;
#else
	*a = (ULONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_tx_soap_unsignedLONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{	ULONG64 *p;
	p = soap_inULONG64(soap, tag, a, type, SOAP_TYPE_tx_soap_unsignedLONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_unsignedLONG64);
	if (soap_out_unsignedLONG64(soap, tag?tag:"unsignedLong", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns__GetRecordStatusResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfns__RecordTerminalStatus(soap, &this->ns__GetRecordStatusResult::terminals);
}

void ns__GetRecordStatusResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfns__RecordTerminalStatus(soap, &this->ns__GetRecordStatusResult::terminals);
#endif
}

int ns__GetRecordStatusResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__GetRecordStatusResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetRecordStatusResult(struct soap *soap, const char *tag, int id, const ns__GetRecordStatusResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__GetRecordStatusResult), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfns__RecordTerminalStatus(soap, "terminals", -1, &(a->ns__GetRecordStatusResult::terminals), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__GetRecordStatusResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__GetRecordStatusResult(soap, tag, this, type);
}

SOAP_FMAC3 ns__GetRecordStatusResult * SOAP_FMAC4 soap_in_ns__GetRecordStatusResult(struct soap *soap, const char *tag, ns__GetRecordStatusResult *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__GetRecordStatusResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__GetRecordStatusResult, sizeof(ns__GetRecordStatusResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_tx_soap_ns__GetRecordStatusResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__GetRecordStatusResult *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfns__RecordTerminalStatus(soap, "terminals", &(a->ns__GetRecordStatusResult::terminals), "ns:RecordTerminalStatus"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__GetRecordStatusResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__GetRecordStatusResult, 0, sizeof(ns__GetRecordStatusResult), 0, soap_copy_ns__GetRecordStatusResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns__GetRecordStatusResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_tx_soap_ns__GetRecordStatusResult);
	if (this->soap_out(soap, tag?tag:"ns:GetRecordStatusResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__GetRecordStatusResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__GetRecordStatusResult(soap, this, tag, type);
}

SOAP_FMAC3 ns__GetRecordStatusResult * SOAP_FMAC4 soap_get_ns__GetRecordStatusResult(struct soap *soap, ns__GetRecordStatusResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__GetRecordStatusResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__GetRecordStatusResult * SOAP_FMAC2 soap_instantiate_ns__GetRecordStatusResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__GetRecordStatusResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__GetRecordStatusResult, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__GetRecordStatusResult);
		if (size)
			*size = sizeof(ns__GetRecordStatusResult);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__GetRecordStatusResult, n);
		if (size)
			*size = n * sizeof(ns__GetRecordStatusResult);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__GetRecordStatusResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetRecordStatusResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__GetRecordStatusResult %p -> %p\n", q, p));
	*(ns__GetRecordStatusResult*)p = *(ns__GetRecordStatusResult*)q;
}

void ns__RecordTerminalStatus::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->ns__RecordTerminalStatus::vuri);
	soap_default_xsd__string(soap, &this->ns__RecordTerminalStatus::name);
	soap_default_xsd__string(soap, &this->ns__RecordTerminalStatus::status);
	soap_default_int(soap, &this->ns__RecordTerminalStatus::virtual_count);
	soap_default_xsd__string(soap, &this->ns__RecordTerminalStatus::requester_uri);
	soap_default_unsignedInt(soap, &this->ns__RecordTerminalStatus::duration);
	soap_default_unsignedLONG64(soap, &this->ns__RecordTerminalStatus::recorded_bytes);
}

void ns__RecordTerminalStatus::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__string(soap, &this->ns__RecordTerminalStatus::vuri);
	soap_serialize_xsd__string(soap, &this->ns__RecordTerminalStatus::name);
	soap_serialize_xsd__string(soap, &this->ns__RecordTerminalStatus::status);
	soap_embedded(soap, &this->ns__RecordTerminalStatus::virtual_count, SOAP_TYPE_tx_soap_int);
	soap_serialize_xsd__string(soap, &this->ns__RecordTerminalStatus::requester_uri);
#endif
}

int ns__RecordTerminalStatus::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__RecordTerminalStatus(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__RecordTerminalStatus(struct soap *soap, const char *tag, int id, const ns__RecordTerminalStatus *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__RecordTerminalStatus), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "vuri", -1, &(a->ns__RecordTerminalStatus::vuri), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "name", -1, &(a->ns__RecordTerminalStatus::name), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "status", -1, &(a->ns__RecordTerminalStatus::status), ""))
		return soap->error;
	if (soap_out_int(soap, "virtual-count", -1, &(a->ns__RecordTerminalStatus::virtual_count), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "requester-uri", -1, &(a->ns__RecordTerminalStatus::requester_uri), ""))
		return soap->error;
	if (soap_out_unsignedInt(soap, "duration", -1, &(a->ns__RecordTerminalStatus::duration), ""))
		return soap->error;
	if (soap_out_unsignedLONG64(soap, "recorded-bytes", -1, &(a->ns__RecordTerminalStatus::recorded_bytes), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__RecordTerminalStatus::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__RecordTerminalStatus(soap, tag, this, type);
}

SOAP_FMAC3 ns__RecordTerminalStatus * SOAP_FMAC4 soap_in_ns__RecordTerminalStatus(struct soap *soap, const char *tag, ns__RecordTerminalStatus *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__RecordTerminalStatus *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__RecordTerminalStatus, sizeof(ns__RecordTerminalStatus), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_tx_soap_ns__RecordTerminalStatus)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__RecordTerminalStatus *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_vuri1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_status1 = 1;
	size_t soap_flag_virtual_count1 = 1;
	size_t soap_flag_requester_uri1 = 1;
	size_t soap_flag_duration1 = 1;
	size_t soap_flag_recorded_bytes1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_vuri1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "vuri", &(a->ns__RecordTerminalStatus::vuri), "xsd:string"))
				{	soap_flag_vuri1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "name", &(a->ns__RecordTerminalStatus::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_status1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "status", &(a->ns__RecordTerminalStatus::status), "xsd:string"))
				{	soap_flag_status1--;
					continue;
				}
			if (soap_flag_virtual_count1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "virtual-count", &(a->ns__RecordTerminalStatus::virtual_count), "xsd:int"))
				{	soap_flag_virtual_count1--;
					continue;
				}
			if (soap_flag_requester_uri1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "requester-uri", &(a->ns__RecordTerminalStatus::requester_uri), "xsd:string"))
				{	soap_flag_requester_uri1--;
					continue;
				}
			if (soap_flag_duration1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedInt(soap, "duration", &(a->ns__RecordTerminalStatus::duration), "xsd:unsignedInt"))
				{	soap_flag_duration1--;
					continue;
				}
			if (soap_flag_recorded_bytes1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_unsignedLONG64(soap, "recorded-bytes", &(a->ns__RecordTerminalStatus::recorded_bytes), "xsd:unsignedLong"))
				{	soap_flag_recorded_bytes1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__RecordTerminalStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__RecordTerminalStatus, 0, sizeof(ns__RecordTerminalStatus), 0, soap_copy_ns__RecordTerminalStatus);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_vuri1 > 0 || soap_flag_name1 > 0 || soap_flag_status1 > 0 || soap_flag_virtual_count1 > 0 || soap_flag_requester_uri1 > 0 || soap_flag_duration1 > 0 || soap_flag_recorded_bytes1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__RecordTerminalStatus::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_tx_soap_ns__RecordTerminalStatus);
	if (this->soap_out(soap, tag?tag:"ns:RecordTerminalStatus", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__RecordTerminalStatus::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__RecordTerminalStatus(soap, this, tag, type);
}

SOAP_FMAC3 ns__RecordTerminalStatus * SOAP_FMAC4 soap_get_ns__RecordTerminalStatus(struct soap *soap, ns__RecordTerminalStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__RecordTerminalStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__RecordTerminalStatus * SOAP_FMAC2 soap_instantiate_ns__RecordTerminalStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__RecordTerminalStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__RecordTerminalStatus, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__RecordTerminalStatus);
		if (size)
			*size = sizeof(ns__RecordTerminalStatus);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__RecordTerminalStatus, n);
		if (size)
			*size = n * sizeof(ns__RecordTerminalStatus);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__RecordTerminalStatus*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__RecordTerminalStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__RecordTerminalStatus %p -> %p\n", q, p));
	*(ns__RecordTerminalStatus*)p = *(ns__RecordTerminalStatus*)q;
}

void ns__StopRecordParam::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->ns__StopRecordParam::focus);
	soap_default_xsd__string(soap, &this->ns__StopRecordParam::target_uri);
}

void ns__StopRecordParam::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__string(soap, &this->ns__StopRecordParam::focus);
	soap_serialize_xsd__string(soap, &this->ns__StopRecordParam::target_uri);
#endif
}

int ns__StopRecordParam::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__StopRecordParam(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StopRecordParam(struct soap *soap, const char *tag, int id, const ns__StopRecordParam *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__StopRecordParam), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "focus", -1, &(a->ns__StopRecordParam::focus), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "target-uri", -1, &(a->ns__StopRecordParam::target_uri), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__StopRecordParam::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__StopRecordParam(soap, tag, this, type);
}

SOAP_FMAC3 ns__StopRecordParam * SOAP_FMAC4 soap_in_ns__StopRecordParam(struct soap *soap, const char *tag, ns__StopRecordParam *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__StopRecordParam *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__StopRecordParam, sizeof(ns__StopRecordParam), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_tx_soap_ns__StopRecordParam)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__StopRecordParam *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_focus1 = 1;
	size_t soap_flag_target_uri1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_focus1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "focus", &(a->ns__StopRecordParam::focus), "xsd:string"))
				{	soap_flag_focus1--;
					continue;
				}
			if (soap_flag_target_uri1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "target-uri", &(a->ns__StopRecordParam::target_uri), "xsd:string"))
				{	soap_flag_target_uri1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__StopRecordParam *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__StopRecordParam, 0, sizeof(ns__StopRecordParam), 0, soap_copy_ns__StopRecordParam);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_focus1 > 0 || soap_flag_target_uri1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__StopRecordParam::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_tx_soap_ns__StopRecordParam);
	if (this->soap_out(soap, tag?tag:"ns:StopRecordParam", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__StopRecordParam::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__StopRecordParam(soap, this, tag, type);
}

SOAP_FMAC3 ns__StopRecordParam * SOAP_FMAC4 soap_get_ns__StopRecordParam(struct soap *soap, ns__StopRecordParam *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__StopRecordParam(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__StopRecordParam * SOAP_FMAC2 soap_instantiate_ns__StopRecordParam(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__StopRecordParam(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__StopRecordParam, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__StopRecordParam);
		if (size)
			*size = sizeof(ns__StopRecordParam);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__StopRecordParam, n);
		if (size)
			*size = n * sizeof(ns__StopRecordParam);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__StopRecordParam*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__StopRecordParam(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__StopRecordParam %p -> %p\n", q, p));
	*(ns__StopRecordParam*)p = *(ns__StopRecordParam*)q;
}

void ns__StartRecordParam::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->ns__StartRecordParam::focus);
	soap_default_xsd__string(soap, &this->ns__StartRecordParam::requester_uri);
	soap_default_xsd__string(soap, &this->ns__StartRecordParam::target_uri);
	soap_default_xsd__string(soap, &this->ns__StartRecordParam::title);
	soap_default_xsd__string(soap, &this->ns__StartRecordParam::participants);
	soap_default_xsd__string(soap, &this->ns__StartRecordParam::keywords);
	soap_default_xsd__string(soap, &this->ns__StartRecordParam::description);
}

void ns__StartRecordParam::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__string(soap, &this->ns__StartRecordParam::focus);
	soap_serialize_xsd__string(soap, &this->ns__StartRecordParam::requester_uri);
	soap_serialize_xsd__string(soap, &this->ns__StartRecordParam::target_uri);
	soap_serialize_xsd__string(soap, &this->ns__StartRecordParam::title);
	soap_serialize_xsd__string(soap, &this->ns__StartRecordParam::participants);
	soap_serialize_xsd__string(soap, &this->ns__StartRecordParam::keywords);
	soap_serialize_xsd__string(soap, &this->ns__StartRecordParam::description);
#endif
}

int ns__StartRecordParam::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__StartRecordParam(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StartRecordParam(struct soap *soap, const char *tag, int id, const ns__StartRecordParam *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__StartRecordParam), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "focus", -1, &(a->ns__StartRecordParam::focus), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "requester-uri", -1, &(a->ns__StartRecordParam::requester_uri), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "target-uri", -1, &(a->ns__StartRecordParam::target_uri), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "title", -1, &(a->ns__StartRecordParam::title), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "participants", -1, &(a->ns__StartRecordParam::participants), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "keywords", -1, &(a->ns__StartRecordParam::keywords), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "description", -1, &(a->ns__StartRecordParam::description), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__StartRecordParam::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__StartRecordParam(soap, tag, this, type);
}

SOAP_FMAC3 ns__StartRecordParam * SOAP_FMAC4 soap_in_ns__StartRecordParam(struct soap *soap, const char *tag, ns__StartRecordParam *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__StartRecordParam *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__StartRecordParam, sizeof(ns__StartRecordParam), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_tx_soap_ns__StartRecordParam)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__StartRecordParam *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_focus1 = 1;
	size_t soap_flag_requester_uri1 = 1;
	size_t soap_flag_target_uri1 = 1;
	size_t soap_flag_title1 = 1;
	size_t soap_flag_participants1 = 1;
	size_t soap_flag_keywords1 = 1;
	size_t soap_flag_description1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_focus1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "focus", &(a->ns__StartRecordParam::focus), "xsd:string"))
				{	soap_flag_focus1--;
					continue;
				}
			if (soap_flag_requester_uri1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "requester-uri", &(a->ns__StartRecordParam::requester_uri), "xsd:string"))
				{	soap_flag_requester_uri1--;
					continue;
				}
			if (soap_flag_target_uri1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "target-uri", &(a->ns__StartRecordParam::target_uri), "xsd:string"))
				{	soap_flag_target_uri1--;
					continue;
				}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "title", &(a->ns__StartRecordParam::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_participants1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "participants", &(a->ns__StartRecordParam::participants), "xsd:string"))
				{	soap_flag_participants1--;
					continue;
				}
			if (soap_flag_keywords1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "keywords", &(a->ns__StartRecordParam::keywords), "xsd:string"))
				{	soap_flag_keywords1--;
					continue;
				}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "description", &(a->ns__StartRecordParam::description), "xsd:string"))
				{	soap_flag_description1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__StartRecordParam *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__StartRecordParam, 0, sizeof(ns__StartRecordParam), 0, soap_copy_ns__StartRecordParam);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_focus1 > 0 || soap_flag_requester_uri1 > 0 || soap_flag_target_uri1 > 0 || soap_flag_title1 > 0 || soap_flag_participants1 > 0 || soap_flag_keywords1 > 0 || soap_flag_description1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__StartRecordParam::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_tx_soap_ns__StartRecordParam);
	if (this->soap_out(soap, tag?tag:"ns:StartRecordParam", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__StartRecordParam::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__StartRecordParam(soap, this, tag, type);
}

SOAP_FMAC3 ns__StartRecordParam * SOAP_FMAC4 soap_get_ns__StartRecordParam(struct soap *soap, ns__StartRecordParam *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__StartRecordParam(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__StartRecordParam * SOAP_FMAC2 soap_instantiate_ns__StartRecordParam(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__StartRecordParam(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__StartRecordParam, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__StartRecordParam);
		if (size)
			*size = sizeof(ns__StartRecordParam);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__StartRecordParam, n);
		if (size)
			*size = n * sizeof(ns__StartRecordParam);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__StartRecordParam*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__StartRecordParam(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__StartRecordParam %p -> %p\n", q, p));
	*(ns__StartRecordParam*)p = *(ns__StartRecordParam*)q;
}

void ns__QueryDBViewResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfns__DBViewNode(soap, &this->ns__QueryDBViewResult::views);
}

void ns__QueryDBViewResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfns__DBViewNode(soap, &this->ns__QueryDBViewResult::views);
#endif
}

int ns__QueryDBViewResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__QueryDBViewResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBViewResult(struct soap *soap, const char *tag, int id, const ns__QueryDBViewResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__QueryDBViewResult), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfns__DBViewNode(soap, "views", -1, &(a->ns__QueryDBViewResult::views), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__QueryDBViewResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__QueryDBViewResult(soap, tag, this, type);
}

SOAP_FMAC3 ns__QueryDBViewResult * SOAP_FMAC4 soap_in_ns__QueryDBViewResult(struct soap *soap, const char *tag, ns__QueryDBViewResult *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__QueryDBViewResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__QueryDBViewResult, sizeof(ns__QueryDBViewResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_tx_soap_ns__QueryDBViewResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__QueryDBViewResult *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfns__DBViewNode(soap, "views", &(a->ns__QueryDBViewResult::views), "ns:DBViewNode"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__QueryDBViewResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__QueryDBViewResult, 0, sizeof(ns__QueryDBViewResult), 0, soap_copy_ns__QueryDBViewResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns__QueryDBViewResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_tx_soap_ns__QueryDBViewResult);
	if (this->soap_out(soap, tag?tag:"ns:QueryDBViewResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__QueryDBViewResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__QueryDBViewResult(soap, this, tag, type);
}

SOAP_FMAC3 ns__QueryDBViewResult * SOAP_FMAC4 soap_get_ns__QueryDBViewResult(struct soap *soap, ns__QueryDBViewResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryDBViewResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__QueryDBViewResult * SOAP_FMAC2 soap_instantiate_ns__QueryDBViewResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryDBViewResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__QueryDBViewResult, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__QueryDBViewResult);
		if (size)
			*size = sizeof(ns__QueryDBViewResult);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__QueryDBViewResult, n);
		if (size)
			*size = n * sizeof(ns__QueryDBViewResult);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__QueryDBViewResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBViewResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__QueryDBViewResult %p -> %p\n", q, p));
	*(ns__QueryDBViewResult*)p = *(ns__QueryDBViewResult*)q;
}

void ns__DBViewNode::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_int(soap, &this->ns__DBViewNode::id);
	soap_default_short(soap, &this->ns__DBViewNode::camera_index);
	soap_default_LONG64(soap, &this->ns__DBViewNode::start_time);
	soap_default_LONG64(soap, &this->ns__DBViewNode::duration);
	soap_default_xsd__string(soap, &this->ns__DBViewNode::format);
	soap_default_xsd__string(soap, &this->ns__DBViewNode::file_path);
	soap_default_int(soap, &this->ns__DBViewNode::status);
}

void ns__DBViewNode::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns__DBViewNode::id, SOAP_TYPE_tx_soap_int);
	soap_serialize_xsd__string(soap, &this->ns__DBViewNode::format);
	soap_serialize_xsd__string(soap, &this->ns__DBViewNode::file_path);
	soap_embedded(soap, &this->ns__DBViewNode::status, SOAP_TYPE_tx_soap_int);
#endif
}

int ns__DBViewNode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__DBViewNode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DBViewNode(struct soap *soap, const char *tag, int id, const ns__DBViewNode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__DBViewNode), type))
		return soap->error;
	if (soap_out_int(soap, "id", -1, &(a->ns__DBViewNode::id), ""))
		return soap->error;
	if (soap_out_short(soap, "camera-index", -1, &(a->ns__DBViewNode::camera_index), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "start-time", -1, &(a->ns__DBViewNode::start_time), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "duration", -1, &(a->ns__DBViewNode::duration), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "format", -1, &(a->ns__DBViewNode::format), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "file-path", -1, &(a->ns__DBViewNode::file_path), ""))
		return soap->error;
	if (soap_out_int(soap, "status", -1, &(a->ns__DBViewNode::status), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__DBViewNode::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__DBViewNode(soap, tag, this, type);
}

SOAP_FMAC3 ns__DBViewNode * SOAP_FMAC4 soap_in_ns__DBViewNode(struct soap *soap, const char *tag, ns__DBViewNode *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__DBViewNode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__DBViewNode, sizeof(ns__DBViewNode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_tx_soap_ns__DBViewNode)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__DBViewNode *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_camera_index1 = 1;
	size_t soap_flag_start_time1 = 1;
	size_t soap_flag_duration1 = 1;
	size_t soap_flag_format1 = 1;
	size_t soap_flag_file_path1 = 1;
	size_t soap_flag_status1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "id", &(a->ns__DBViewNode::id), "xsd:int"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_camera_index1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_short(soap, "camera-index", &(a->ns__DBViewNode::camera_index), "xsd:short"))
				{	soap_flag_camera_index1--;
					continue;
				}
			if (soap_flag_start_time1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "start-time", &(a->ns__DBViewNode::start_time), "xsd:long"))
				{	soap_flag_start_time1--;
					continue;
				}
			if (soap_flag_duration1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "duration", &(a->ns__DBViewNode::duration), "xsd:long"))
				{	soap_flag_duration1--;
					continue;
				}
			if (soap_flag_format1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "format", &(a->ns__DBViewNode::format), "xsd:string"))
				{	soap_flag_format1--;
					continue;
				}
			if (soap_flag_file_path1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "file-path", &(a->ns__DBViewNode::file_path), "xsd:string"))
				{	soap_flag_file_path1--;
					continue;
				}
			if (soap_flag_status1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "status", &(a->ns__DBViewNode::status), "xsd:int"))
				{	soap_flag_status1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__DBViewNode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__DBViewNode, 0, sizeof(ns__DBViewNode), 0, soap_copy_ns__DBViewNode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_camera_index1 > 0 || soap_flag_start_time1 > 0 || soap_flag_duration1 > 0 || soap_flag_format1 > 0 || soap_flag_file_path1 > 0 || soap_flag_status1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__DBViewNode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_tx_soap_ns__DBViewNode);
	if (this->soap_out(soap, tag?tag:"ns:DBViewNode", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__DBViewNode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__DBViewNode(soap, this, tag, type);
}

SOAP_FMAC3 ns__DBViewNode * SOAP_FMAC4 soap_get_ns__DBViewNode(struct soap *soap, ns__DBViewNode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__DBViewNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__DBViewNode * SOAP_FMAC2 soap_instantiate_ns__DBViewNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__DBViewNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__DBViewNode, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__DBViewNode);
		if (size)
			*size = sizeof(ns__DBViewNode);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__DBViewNode, n);
		if (size)
			*size = n * sizeof(ns__DBViewNode);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__DBViewNode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DBViewNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__DBViewNode %p -> %p\n", q, p));
	*(ns__DBViewNode*)p = *(ns__DBViewNode*)q;
}

void ns__QueryDBEpisodeByTimeResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &this->ns__QueryDBEpisodeByTimeResult::start);
	soap_default_LONG64(soap, &this->ns__QueryDBEpisodeByTimeResult::end);
	soap_default_std__vectorTemplateOfns__DBEpisodeNode(soap, &this->ns__QueryDBEpisodeByTimeResult::episodes);
}

void ns__QueryDBEpisodeByTimeResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfns__DBEpisodeNode(soap, &this->ns__QueryDBEpisodeByTimeResult::episodes);
#endif
}

int ns__QueryDBEpisodeByTimeResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__QueryDBEpisodeByTimeResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBEpisodeByTimeResult(struct soap *soap, const char *tag, int id, const ns__QueryDBEpisodeByTimeResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTimeResult), type))
		return soap->error;
	if (soap_out_LONG64(soap, "start", -1, &(a->ns__QueryDBEpisodeByTimeResult::start), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "end", -1, &(a->ns__QueryDBEpisodeByTimeResult::end), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfns__DBEpisodeNode(soap, "episodes", -1, &(a->ns__QueryDBEpisodeByTimeResult::episodes), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__QueryDBEpisodeByTimeResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__QueryDBEpisodeByTimeResult(soap, tag, this, type);
}

SOAP_FMAC3 ns__QueryDBEpisodeByTimeResult * SOAP_FMAC4 soap_in_ns__QueryDBEpisodeByTimeResult(struct soap *soap, const char *tag, ns__QueryDBEpisodeByTimeResult *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__QueryDBEpisodeByTimeResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTimeResult, sizeof(ns__QueryDBEpisodeByTimeResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTimeResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__QueryDBEpisodeByTimeResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_start1 = 1;
	size_t soap_flag_end1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_start1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "start", &(a->ns__QueryDBEpisodeByTimeResult::start), "xsd:long"))
				{	soap_flag_start1--;
					continue;
				}
			if (soap_flag_end1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "end", &(a->ns__QueryDBEpisodeByTimeResult::end), "xsd:long"))
				{	soap_flag_end1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfns__DBEpisodeNode(soap, "episodes", &(a->ns__QueryDBEpisodeByTimeResult::episodes), "ns:DBEpisodeNode"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__QueryDBEpisodeByTimeResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTimeResult, 0, sizeof(ns__QueryDBEpisodeByTimeResult), 0, soap_copy_ns__QueryDBEpisodeByTimeResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_start1 > 0 || soap_flag_end1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__QueryDBEpisodeByTimeResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTimeResult);
	if (this->soap_out(soap, tag?tag:"ns:QueryDBEpisodeByTimeResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__QueryDBEpisodeByTimeResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__QueryDBEpisodeByTimeResult(soap, this, tag, type);
}

SOAP_FMAC3 ns__QueryDBEpisodeByTimeResult * SOAP_FMAC4 soap_get_ns__QueryDBEpisodeByTimeResult(struct soap *soap, ns__QueryDBEpisodeByTimeResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryDBEpisodeByTimeResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__QueryDBEpisodeByTimeResult * SOAP_FMAC2 soap_instantiate_ns__QueryDBEpisodeByTimeResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryDBEpisodeByTimeResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTimeResult, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__QueryDBEpisodeByTimeResult);
		if (size)
			*size = sizeof(ns__QueryDBEpisodeByTimeResult);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__QueryDBEpisodeByTimeResult, n);
		if (size)
			*size = n * sizeof(ns__QueryDBEpisodeByTimeResult);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__QueryDBEpisodeByTimeResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBEpisodeByTimeResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__QueryDBEpisodeByTimeResult %p -> %p\n", q, p));
	*(ns__QueryDBEpisodeByTimeResult*)p = *(ns__QueryDBEpisodeByTimeResult*)q;
}

void ns__QueryDBEpisodeResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_int(soap, &this->ns__QueryDBEpisodeResult::total);
	soap_default_int(soap, &this->ns__QueryDBEpisodeResult::offset);
	soap_default_std__vectorTemplateOfns__DBEpisodeNode(soap, &this->ns__QueryDBEpisodeResult::episodes);
}

void ns__QueryDBEpisodeResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns__QueryDBEpisodeResult::total, SOAP_TYPE_tx_soap_int);
	soap_embedded(soap, &this->ns__QueryDBEpisodeResult::offset, SOAP_TYPE_tx_soap_int);
	soap_serialize_std__vectorTemplateOfns__DBEpisodeNode(soap, &this->ns__QueryDBEpisodeResult::episodes);
#endif
}

int ns__QueryDBEpisodeResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__QueryDBEpisodeResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBEpisodeResult(struct soap *soap, const char *tag, int id, const ns__QueryDBEpisodeResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult), type))
		return soap->error;
	if (soap_out_int(soap, "total", -1, &(a->ns__QueryDBEpisodeResult::total), ""))
		return soap->error;
	if (soap_out_int(soap, "offset", -1, &(a->ns__QueryDBEpisodeResult::offset), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfns__DBEpisodeNode(soap, "episodes", -1, &(a->ns__QueryDBEpisodeResult::episodes), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__QueryDBEpisodeResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__QueryDBEpisodeResult(soap, tag, this, type);
}

SOAP_FMAC3 ns__QueryDBEpisodeResult * SOAP_FMAC4 soap_in_ns__QueryDBEpisodeResult(struct soap *soap, const char *tag, ns__QueryDBEpisodeResult *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__QueryDBEpisodeResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult, sizeof(ns__QueryDBEpisodeResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__QueryDBEpisodeResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_total1 = 1;
	size_t soap_flag_offset1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_total1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "total", &(a->ns__QueryDBEpisodeResult::total), "xsd:int"))
				{	soap_flag_total1--;
					continue;
				}
			if (soap_flag_offset1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "offset", &(a->ns__QueryDBEpisodeResult::offset), "xsd:int"))
				{	soap_flag_offset1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfns__DBEpisodeNode(soap, "episodes", &(a->ns__QueryDBEpisodeResult::episodes), "ns:DBEpisodeNode"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__QueryDBEpisodeResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult, 0, sizeof(ns__QueryDBEpisodeResult), 0, soap_copy_ns__QueryDBEpisodeResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_total1 > 0 || soap_flag_offset1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__QueryDBEpisodeResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult);
	if (this->soap_out(soap, tag?tag:"ns:QueryDBEpisodeResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__QueryDBEpisodeResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__QueryDBEpisodeResult(soap, this, tag, type);
}

SOAP_FMAC3 ns__QueryDBEpisodeResult * SOAP_FMAC4 soap_get_ns__QueryDBEpisodeResult(struct soap *soap, ns__QueryDBEpisodeResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryDBEpisodeResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__QueryDBEpisodeResult * SOAP_FMAC2 soap_instantiate_ns__QueryDBEpisodeResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryDBEpisodeResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__QueryDBEpisodeResult);
		if (size)
			*size = sizeof(ns__QueryDBEpisodeResult);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__QueryDBEpisodeResult, n);
		if (size)
			*size = n * sizeof(ns__QueryDBEpisodeResult);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__QueryDBEpisodeResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBEpisodeResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__QueryDBEpisodeResult %p -> %p\n", q, p));
	*(ns__QueryDBEpisodeResult*)p = *(ns__QueryDBEpisodeResult*)q;
}

void ns__DBEpisodeNode::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &this->ns__DBEpisodeNode::id);
	soap_default_xsd__string(soap, &this->ns__DBEpisodeNode::terminal_uri);
	soap_default_xsd__string(soap, &this->ns__DBEpisodeNode::title);
	soap_default_xsd__string(soap, &this->ns__DBEpisodeNode::requester);
	soap_default_LONG64(soap, &this->ns__DBEpisodeNode::start_time);
	soap_default_LONG64(soap, &this->ns__DBEpisodeNode::duration);
	soap_default_xsd__string(soap, &this->ns__DBEpisodeNode::participants);
	soap_default_xsd__string(soap, &this->ns__DBEpisodeNode::keywords);
	soap_default_xsd__string(soap, &this->ns__DBEpisodeNode::description);
}

void ns__DBEpisodeNode::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__string(soap, &this->ns__DBEpisodeNode::terminal_uri);
	soap_serialize_xsd__string(soap, &this->ns__DBEpisodeNode::title);
	soap_serialize_xsd__string(soap, &this->ns__DBEpisodeNode::requester);
	soap_serialize_xsd__string(soap, &this->ns__DBEpisodeNode::participants);
	soap_serialize_xsd__string(soap, &this->ns__DBEpisodeNode::keywords);
	soap_serialize_xsd__string(soap, &this->ns__DBEpisodeNode::description);
#endif
}

int ns__DBEpisodeNode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__DBEpisodeNode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DBEpisodeNode(struct soap *soap, const char *tag, int id, const ns__DBEpisodeNode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__DBEpisodeNode), type))
		return soap->error;
	if (soap_out_LONG64(soap, "id", -1, &(a->ns__DBEpisodeNode::id), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "terminal-uri", -1, &(a->ns__DBEpisodeNode::terminal_uri), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "title", -1, &(a->ns__DBEpisodeNode::title), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "requester", -1, &(a->ns__DBEpisodeNode::requester), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "start-time", -1, &(a->ns__DBEpisodeNode::start_time), ""))
		return soap->error;
	if (soap_out_LONG64(soap, "duration", -1, &(a->ns__DBEpisodeNode::duration), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "participants", -1, &(a->ns__DBEpisodeNode::participants), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "keywords", -1, &(a->ns__DBEpisodeNode::keywords), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "description", -1, &(a->ns__DBEpisodeNode::description), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__DBEpisodeNode::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__DBEpisodeNode(soap, tag, this, type);
}

SOAP_FMAC3 ns__DBEpisodeNode * SOAP_FMAC4 soap_in_ns__DBEpisodeNode(struct soap *soap, const char *tag, ns__DBEpisodeNode *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__DBEpisodeNode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__DBEpisodeNode, sizeof(ns__DBEpisodeNode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_tx_soap_ns__DBEpisodeNode)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__DBEpisodeNode *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_id1 = 1;
	size_t soap_flag_terminal_uri1 = 1;
	size_t soap_flag_title1 = 1;
	size_t soap_flag_requester1 = 1;
	size_t soap_flag_start_time1 = 1;
	size_t soap_flag_duration1 = 1;
	size_t soap_flag_participants1 = 1;
	size_t soap_flag_keywords1 = 1;
	size_t soap_flag_description1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_id1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "id", &(a->ns__DBEpisodeNode::id), "xsd:long"))
				{	soap_flag_id1--;
					continue;
				}
			if (soap_flag_terminal_uri1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "terminal-uri", &(a->ns__DBEpisodeNode::terminal_uri), "xsd:string"))
				{	soap_flag_terminal_uri1--;
					continue;
				}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "title", &(a->ns__DBEpisodeNode::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap_flag_requester1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "requester", &(a->ns__DBEpisodeNode::requester), "xsd:string"))
				{	soap_flag_requester1--;
					continue;
				}
			if (soap_flag_start_time1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "start-time", &(a->ns__DBEpisodeNode::start_time), "xsd:long"))
				{	soap_flag_start_time1--;
					continue;
				}
			if (soap_flag_duration1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "duration", &(a->ns__DBEpisodeNode::duration), "xsd:long"))
				{	soap_flag_duration1--;
					continue;
				}
			if (soap_flag_participants1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "participants", &(a->ns__DBEpisodeNode::participants), "xsd:string"))
				{	soap_flag_participants1--;
					continue;
				}
			if (soap_flag_keywords1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "keywords", &(a->ns__DBEpisodeNode::keywords), "xsd:string"))
				{	soap_flag_keywords1--;
					continue;
				}
			if (soap_flag_description1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "description", &(a->ns__DBEpisodeNode::description), "xsd:string"))
				{	soap_flag_description1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__DBEpisodeNode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__DBEpisodeNode, 0, sizeof(ns__DBEpisodeNode), 0, soap_copy_ns__DBEpisodeNode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_id1 > 0 || soap_flag_terminal_uri1 > 0 || soap_flag_title1 > 0 || soap_flag_requester1 > 0 || soap_flag_start_time1 > 0 || soap_flag_duration1 > 0 || soap_flag_participants1 > 0 || soap_flag_keywords1 > 0 || soap_flag_description1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__DBEpisodeNode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_tx_soap_ns__DBEpisodeNode);
	if (this->soap_out(soap, tag?tag:"ns:DBEpisodeNode", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__DBEpisodeNode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__DBEpisodeNode(soap, this, tag, type);
}

SOAP_FMAC3 ns__DBEpisodeNode * SOAP_FMAC4 soap_get_ns__DBEpisodeNode(struct soap *soap, ns__DBEpisodeNode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__DBEpisodeNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__DBEpisodeNode * SOAP_FMAC2 soap_instantiate_ns__DBEpisodeNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__DBEpisodeNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__DBEpisodeNode, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__DBEpisodeNode);
		if (size)
			*size = sizeof(ns__DBEpisodeNode);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__DBEpisodeNode, n);
		if (size)
			*size = n * sizeof(ns__DBEpisodeNode);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__DBEpisodeNode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DBEpisodeNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__DBEpisodeNode %p -> %p\n", q, p));
	*(ns__DBEpisodeNode*)p = *(ns__DBEpisodeNode*)q;
}

void ns__QueryDBEpisodeDatesResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfshort(soap, &this->ns__QueryDBEpisodeDatesResult::dates);
}

void ns__QueryDBEpisodeDatesResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfshort(soap, &this->ns__QueryDBEpisodeDatesResult::dates);
#endif
}

int ns__QueryDBEpisodeDatesResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__QueryDBEpisodeDatesResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBEpisodeDatesResult(struct soap *soap, const char *tag, int id, const ns__QueryDBEpisodeDatesResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfshort(soap, "dates", -1, &(a->ns__QueryDBEpisodeDatesResult::dates), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__QueryDBEpisodeDatesResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__QueryDBEpisodeDatesResult(soap, tag, this, type);
}

SOAP_FMAC3 ns__QueryDBEpisodeDatesResult * SOAP_FMAC4 soap_in_ns__QueryDBEpisodeDatesResult(struct soap *soap, const char *tag, ns__QueryDBEpisodeDatesResult *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__QueryDBEpisodeDatesResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult, sizeof(ns__QueryDBEpisodeDatesResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__QueryDBEpisodeDatesResult *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfshort(soap, "dates", &(a->ns__QueryDBEpisodeDatesResult::dates), "xsd:short"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__QueryDBEpisodeDatesResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult, 0, sizeof(ns__QueryDBEpisodeDatesResult), 0, soap_copy_ns__QueryDBEpisodeDatesResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns__QueryDBEpisodeDatesResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult);
	if (this->soap_out(soap, tag?tag:"ns:QueryDBEpisodeDatesResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__QueryDBEpisodeDatesResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__QueryDBEpisodeDatesResult(soap, this, tag, type);
}

SOAP_FMAC3 ns__QueryDBEpisodeDatesResult * SOAP_FMAC4 soap_get_ns__QueryDBEpisodeDatesResult(struct soap *soap, ns__QueryDBEpisodeDatesResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryDBEpisodeDatesResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__QueryDBEpisodeDatesResult * SOAP_FMAC2 soap_instantiate_ns__QueryDBEpisodeDatesResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryDBEpisodeDatesResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__QueryDBEpisodeDatesResult);
		if (size)
			*size = sizeof(ns__QueryDBEpisodeDatesResult);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__QueryDBEpisodeDatesResult, n);
		if (size)
			*size = n * sizeof(ns__QueryDBEpisodeDatesResult);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__QueryDBEpisodeDatesResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBEpisodeDatesResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__QueryDBEpisodeDatesResult %p -> %p\n", q, p));
	*(ns__QueryDBEpisodeDatesResult*)p = *(ns__QueryDBEpisodeDatesResult*)q;
}

void ns__QueryDBTerminalResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOfns__DBTerminalNode(soap, &this->ns__QueryDBTerminalResult::terminals);
}

void ns__QueryDBTerminalResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_std__vectorTemplateOfns__DBTerminalNode(soap, &this->ns__QueryDBTerminalResult::terminals);
#endif
}

int ns__QueryDBTerminalResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__QueryDBTerminalResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBTerminalResult(struct soap *soap, const char *tag, int id, const ns__QueryDBTerminalResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfns__DBTerminalNode(soap, "terminals", -1, &(a->ns__QueryDBTerminalResult::terminals), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__QueryDBTerminalResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__QueryDBTerminalResult(soap, tag, this, type);
}

SOAP_FMAC3 ns__QueryDBTerminalResult * SOAP_FMAC4 soap_in_ns__QueryDBTerminalResult(struct soap *soap, const char *tag, ns__QueryDBTerminalResult *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__QueryDBTerminalResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult, sizeof(ns__QueryDBTerminalResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__QueryDBTerminalResult *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfns__DBTerminalNode(soap, "terminals", &(a->ns__QueryDBTerminalResult::terminals), "ns:DBTerminalNode"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__QueryDBTerminalResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult, 0, sizeof(ns__QueryDBTerminalResult), 0, soap_copy_ns__QueryDBTerminalResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns__QueryDBTerminalResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult);
	if (this->soap_out(soap, tag?tag:"ns:QueryDBTerminalResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__QueryDBTerminalResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__QueryDBTerminalResult(soap, this, tag, type);
}

SOAP_FMAC3 ns__QueryDBTerminalResult * SOAP_FMAC4 soap_get_ns__QueryDBTerminalResult(struct soap *soap, ns__QueryDBTerminalResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryDBTerminalResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__QueryDBTerminalResult * SOAP_FMAC2 soap_instantiate_ns__QueryDBTerminalResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryDBTerminalResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__QueryDBTerminalResult);
		if (size)
			*size = sizeof(ns__QueryDBTerminalResult);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__QueryDBTerminalResult, n);
		if (size)
			*size = n * sizeof(ns__QueryDBTerminalResult);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__QueryDBTerminalResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBTerminalResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__QueryDBTerminalResult %p -> %p\n", q, p));
	*(ns__QueryDBTerminalResult*)p = *(ns__QueryDBTerminalResult*)q;
}

void ns__DBTerminalNode::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &this->ns__DBTerminalNode::uri);
	soap_default_xsd__string(soap, &this->ns__DBTerminalNode::name);
}

void ns__DBTerminalNode::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__string(soap, &this->ns__DBTerminalNode::uri);
	soap_serialize_xsd__string(soap, &this->ns__DBTerminalNode::name);
#endif
}

int ns__DBTerminalNode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__DBTerminalNode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DBTerminalNode(struct soap *soap, const char *tag, int id, const ns__DBTerminalNode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__DBTerminalNode), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "uri", -1, &(a->ns__DBTerminalNode::uri), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "name", -1, &(a->ns__DBTerminalNode::name), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__DBTerminalNode::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__DBTerminalNode(soap, tag, this, type);
}

SOAP_FMAC3 ns__DBTerminalNode * SOAP_FMAC4 soap_in_ns__DBTerminalNode(struct soap *soap, const char *tag, ns__DBTerminalNode *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__DBTerminalNode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__DBTerminalNode, sizeof(ns__DBTerminalNode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_tx_soap_ns__DBTerminalNode)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__DBTerminalNode *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_uri1 = 1;
	size_t soap_flag_name1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_uri1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "uri", &(a->ns__DBTerminalNode::uri), "xsd:string"))
				{	soap_flag_uri1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "name", &(a->ns__DBTerminalNode::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__DBTerminalNode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__DBTerminalNode, 0, sizeof(ns__DBTerminalNode), 0, soap_copy_ns__DBTerminalNode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_uri1 > 0 || soap_flag_name1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__DBTerminalNode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_tx_soap_ns__DBTerminalNode);
	if (this->soap_out(soap, tag?tag:"ns:DBTerminalNode", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__DBTerminalNode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__DBTerminalNode(soap, this, tag, type);
}

SOAP_FMAC3 ns__DBTerminalNode * SOAP_FMAC4 soap_get_ns__DBTerminalNode(struct soap *soap, ns__DBTerminalNode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__DBTerminalNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__DBTerminalNode * SOAP_FMAC2 soap_instantiate_ns__DBTerminalNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__DBTerminalNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__DBTerminalNode, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__DBTerminalNode);
		if (size)
			*size = sizeof(ns__DBTerminalNode);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__DBTerminalNode, n);
		if (size)
			*size = n * sizeof(ns__DBTerminalNode);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__DBTerminalNode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DBTerminalNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__DBTerminalNode %p -> %p\n", q, p));
	*(ns__DBTerminalNode*)p = *(ns__DBTerminalNode*)q;
}

void ns__QueryDBConferenceResult::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_int(soap, &this->ns__QueryDBConferenceResult::total);
	soap_default_int(soap, &this->ns__QueryDBConferenceResult::offset);
	soap_default_std__vectorTemplateOfns__DBConferenceNode(soap, &this->ns__QueryDBConferenceResult::conferences);
}

void ns__QueryDBConferenceResult::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns__QueryDBConferenceResult::total, SOAP_TYPE_tx_soap_int);
	soap_embedded(soap, &this->ns__QueryDBConferenceResult::offset, SOAP_TYPE_tx_soap_int);
	soap_serialize_std__vectorTemplateOfns__DBConferenceNode(soap, &this->ns__QueryDBConferenceResult::conferences);
#endif
}

int ns__QueryDBConferenceResult::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__QueryDBConferenceResult(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBConferenceResult(struct soap *soap, const char *tag, int id, const ns__QueryDBConferenceResult *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult), type))
		return soap->error;
	if (soap_out_int(soap, "total", -1, &(a->ns__QueryDBConferenceResult::total), ""))
		return soap->error;
	if (soap_out_int(soap, "offset", -1, &(a->ns__QueryDBConferenceResult::offset), ""))
		return soap->error;
	if (soap_out_std__vectorTemplateOfns__DBConferenceNode(soap, "conferences", -1, &(a->ns__QueryDBConferenceResult::conferences), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__QueryDBConferenceResult::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__QueryDBConferenceResult(soap, tag, this, type);
}

SOAP_FMAC3 ns__QueryDBConferenceResult * SOAP_FMAC4 soap_in_ns__QueryDBConferenceResult(struct soap *soap, const char *tag, ns__QueryDBConferenceResult *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__QueryDBConferenceResult *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult, sizeof(ns__QueryDBConferenceResult), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__QueryDBConferenceResult *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_total1 = 1;
	size_t soap_flag_offset1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_total1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "total", &(a->ns__QueryDBConferenceResult::total), "xsd:int"))
				{	soap_flag_total1--;
					continue;
				}
			if (soap_flag_offset1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "offset", &(a->ns__QueryDBConferenceResult::offset), "xsd:int"))
				{	soap_flag_offset1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfns__DBConferenceNode(soap, "conferences", &(a->ns__QueryDBConferenceResult::conferences), "ns:DBConferenceNode"))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__QueryDBConferenceResult *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult, 0, sizeof(ns__QueryDBConferenceResult), 0, soap_copy_ns__QueryDBConferenceResult);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_total1 > 0 || soap_flag_offset1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__QueryDBConferenceResult::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult);
	if (this->soap_out(soap, tag?tag:"ns:QueryDBConferenceResult", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__QueryDBConferenceResult::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__QueryDBConferenceResult(soap, this, tag, type);
}

SOAP_FMAC3 ns__QueryDBConferenceResult * SOAP_FMAC4 soap_get_ns__QueryDBConferenceResult(struct soap *soap, ns__QueryDBConferenceResult *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryDBConferenceResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__QueryDBConferenceResult * SOAP_FMAC2 soap_instantiate_ns__QueryDBConferenceResult(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryDBConferenceResult(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__QueryDBConferenceResult);
		if (size)
			*size = sizeof(ns__QueryDBConferenceResult);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__QueryDBConferenceResult, n);
		if (size)
			*size = n * sizeof(ns__QueryDBConferenceResult);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__QueryDBConferenceResult*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBConferenceResult(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__QueryDBConferenceResult %p -> %p\n", q, p));
	*(ns__QueryDBConferenceResult*)p = *(ns__QueryDBConferenceResult*)q;
}

void ns__DBConferenceNode::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_int(soap, &this->ns__DBConferenceNode::cid);
	soap_default_xsd__string(soap, &this->ns__DBConferenceNode::title);
}

void ns__DBConferenceNode::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &this->ns__DBConferenceNode::cid, SOAP_TYPE_tx_soap_int);
	soap_serialize_xsd__string(soap, &this->ns__DBConferenceNode::title);
#endif
}

int ns__DBConferenceNode::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns__DBConferenceNode(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DBConferenceNode(struct soap *soap, const char *tag, int id, const ns__DBConferenceNode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__DBConferenceNode), type))
		return soap->error;
	if (soap_out_int(soap, "cid", -1, &(a->ns__DBConferenceNode::cid), ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "title", -1, &(a->ns__DBConferenceNode::title), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns__DBConferenceNode::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns__DBConferenceNode(soap, tag, this, type);
}

SOAP_FMAC3 ns__DBConferenceNode * SOAP_FMAC4 soap_in_ns__DBConferenceNode(struct soap *soap, const char *tag, ns__DBConferenceNode *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns__DBConferenceNode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__DBConferenceNode, sizeof(ns__DBConferenceNode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_tx_soap_ns__DBConferenceNode)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns__DBConferenceNode *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_cid1 = 1;
	size_t soap_flag_title1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_cid1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cid", &(a->ns__DBConferenceNode::cid), "xsd:int"))
				{	soap_flag_cid1--;
					continue;
				}
			if (soap_flag_title1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "title", &(a->ns__DBConferenceNode::title), "xsd:string"))
				{	soap_flag_title1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns__DBConferenceNode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__DBConferenceNode, 0, sizeof(ns__DBConferenceNode), 0, soap_copy_ns__DBConferenceNode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_cid1 > 0 || soap_flag_title1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns__DBConferenceNode::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, SOAP_TYPE_tx_soap_ns__DBConferenceNode);
	if (this->soap_out(soap, tag?tag:"ns:DBConferenceNode", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns__DBConferenceNode::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns__DBConferenceNode(soap, this, tag, type);
}

SOAP_FMAC3 ns__DBConferenceNode * SOAP_FMAC4 soap_get_ns__DBConferenceNode(struct soap *soap, ns__DBConferenceNode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__DBConferenceNode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns__DBConferenceNode * SOAP_FMAC2 soap_instantiate_ns__DBConferenceNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__DBConferenceNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__DBConferenceNode, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns__DBConferenceNode);
		if (size)
			*size = sizeof(ns__DBConferenceNode);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(ns__DBConferenceNode, n);
		if (size)
			*size = n * sizeof(ns__DBConferenceNode);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (ns__DBConferenceNode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DBConferenceNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns__DBConferenceNode %p -> %p\n", q, p));
	*(ns__DBConferenceNode*)p = *(ns__DBConferenceNode*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_tx_soap_xsd__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_tx_soap_xsd__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_tx_soap_xsd__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_tx_soap_xsd__string, 0, sizeof(std::string), 0, soap_copy_xsd__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_xsd__string);
	if (soap_out_xsd__string(soap, tag?tag:"xsd:string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_tx_soap_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_tx_soap_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_tx_soap_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_tx_soap_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_std__string, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_SOAP_ENV__Fault, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_SOAP_ENV__Reason, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_SOAP_ENV__Detail, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_SOAP_ENV__Code, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_SOAP_ENV__Header, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetRecordStatus(struct soap *soap, struct ns__GetRecordStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_xsd__string(soap, &a->focus);
	soap_default_xsd__string(soap, &a->uri);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetRecordStatus(struct soap *soap, const struct ns__GetRecordStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_xsd__string(soap, &a->focus);
	soap_serialize_xsd__string(soap, &a->uri);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetRecordStatus(struct soap *soap, const char *tag, int id, const struct ns__GetRecordStatus *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__GetRecordStatus), type))
		return soap->error;
	if (soap_out_xsd__string(soap, "focus", -1, &a->focus, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "uri", -1, &a->uri, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__GetRecordStatus * SOAP_FMAC4 soap_in_ns__GetRecordStatus(struct soap *soap, const char *tag, struct ns__GetRecordStatus *a, const char *type)
{
	size_t soap_flag_focus = 1;
	size_t soap_flag_uri = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__GetRecordStatus *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__GetRecordStatus, sizeof(struct ns__GetRecordStatus), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__GetRecordStatus(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_focus && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "focus", &a->focus, "xsd:string"))
				{	soap_flag_focus--;
					continue;
				}
			if (soap_flag_uri && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "uri", &a->uri, "xsd:string"))
				{	soap_flag_uri--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__GetRecordStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__GetRecordStatus, 0, sizeof(struct ns__GetRecordStatus), 0, soap_copy_ns__GetRecordStatus);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_focus > 0 || soap_flag_uri > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetRecordStatus(struct soap *soap, const struct ns__GetRecordStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_ns__GetRecordStatus);
	if (soap_out_ns__GetRecordStatus(soap, tag?tag:"ns:GetRecordStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__GetRecordStatus * SOAP_FMAC4 soap_get_ns__GetRecordStatus(struct soap *soap, struct ns__GetRecordStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__GetRecordStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__GetRecordStatus * SOAP_FMAC2 soap_instantiate_ns__GetRecordStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__GetRecordStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__GetRecordStatus, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__GetRecordStatus);
		if (size)
			*size = sizeof(struct ns__GetRecordStatus);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__GetRecordStatus, n);
		if (size)
			*size = n * sizeof(struct ns__GetRecordStatus);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__GetRecordStatus*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetRecordStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__GetRecordStatus %p -> %p\n", q, p));
	*(struct ns__GetRecordStatus*)p = *(struct ns__GetRecordStatus*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__StopRecord(struct soap *soap, struct ns__StopRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->param.ns__StopRecordParam::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__StopRecord(struct soap *soap, const struct ns__StopRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	a->param.soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StopRecord(struct soap *soap, const char *tag, int id, const struct ns__StopRecord *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__StopRecord), type))
		return soap->error;
	if (a->param.soap_out(soap, "param", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__StopRecord * SOAP_FMAC4 soap_in_ns__StopRecord(struct soap *soap, const char *tag, struct ns__StopRecord *a, const char *type)
{
	size_t soap_flag_param = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__StopRecord *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__StopRecord, sizeof(struct ns__StopRecord), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__StopRecord(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_param && soap->error == SOAP_TAG_MISMATCH)
				if (a->param.soap_in(soap, "param", "ns:StopRecordParam"))
				{	soap_flag_param--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__StopRecord *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__StopRecord, 0, sizeof(struct ns__StopRecord), 0, soap_copy_ns__StopRecord);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_param > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__StopRecord(struct soap *soap, const struct ns__StopRecord *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_ns__StopRecord);
	if (soap_out_ns__StopRecord(soap, tag?tag:"ns:StopRecord", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__StopRecord * SOAP_FMAC4 soap_get_ns__StopRecord(struct soap *soap, struct ns__StopRecord *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__StopRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__StopRecord * SOAP_FMAC2 soap_instantiate_ns__StopRecord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__StopRecord(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__StopRecord, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__StopRecord);
		if (size)
			*size = sizeof(struct ns__StopRecord);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__StopRecord, n);
		if (size)
			*size = n * sizeof(struct ns__StopRecord);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__StopRecord*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__StopRecord(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__StopRecord %p -> %p\n", q, p));
	*(struct ns__StopRecord*)p = *(struct ns__StopRecord*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__StopRecordResponse(struct soap *soap, struct ns__StopRecordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__StopRecordResponse(struct soap *soap, const struct ns__StopRecordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StopRecordResponse(struct soap *soap, const char *tag, int id, const struct ns__StopRecordResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__StopRecordResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__StopRecordResponse * SOAP_FMAC4 soap_in_ns__StopRecordResponse(struct soap *soap, const char *tag, struct ns__StopRecordResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__StopRecordResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__StopRecordResponse, sizeof(struct ns__StopRecordResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__StopRecordResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__StopRecordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__StopRecordResponse, 0, sizeof(struct ns__StopRecordResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__StopRecordResponse(struct soap *soap, const struct ns__StopRecordResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_ns__StopRecordResponse);
	if (soap_out_ns__StopRecordResponse(soap, tag?tag:"ns:StopRecordResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__StopRecordResponse * SOAP_FMAC4 soap_get_ns__StopRecordResponse(struct soap *soap, struct ns__StopRecordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__StopRecordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__StopRecordResponse * SOAP_FMAC2 soap_instantiate_ns__StopRecordResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__StopRecordResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__StopRecordResponse, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__StopRecordResponse);
		if (size)
			*size = sizeof(struct ns__StopRecordResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__StopRecordResponse, n);
		if (size)
			*size = n * sizeof(struct ns__StopRecordResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__StopRecordResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__StopRecordResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__StopRecordResponse %p -> %p\n", q, p));
	*(struct ns__StopRecordResponse*)p = *(struct ns__StopRecordResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__StartRecord(struct soap *soap, struct ns__StartRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->param.ns__StartRecordParam::soap_default(soap);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__StartRecord(struct soap *soap, const struct ns__StartRecord *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	a->param.soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StartRecord(struct soap *soap, const char *tag, int id, const struct ns__StartRecord *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__StartRecord), type))
		return soap->error;
	if (a->param.soap_out(soap, "param", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__StartRecord * SOAP_FMAC4 soap_in_ns__StartRecord(struct soap *soap, const char *tag, struct ns__StartRecord *a, const char *type)
{
	size_t soap_flag_param = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__StartRecord *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__StartRecord, sizeof(struct ns__StartRecord), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__StartRecord(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_param && soap->error == SOAP_TAG_MISMATCH)
				if (a->param.soap_in(soap, "param", "ns:StartRecordParam"))
				{	soap_flag_param--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__StartRecord *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__StartRecord, 0, sizeof(struct ns__StartRecord), 0, soap_copy_ns__StartRecord);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_param > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__StartRecord(struct soap *soap, const struct ns__StartRecord *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_ns__StartRecord);
	if (soap_out_ns__StartRecord(soap, tag?tag:"ns:StartRecord", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__StartRecord * SOAP_FMAC4 soap_get_ns__StartRecord(struct soap *soap, struct ns__StartRecord *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__StartRecord(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__StartRecord * SOAP_FMAC2 soap_instantiate_ns__StartRecord(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__StartRecord(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__StartRecord, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__StartRecord);
		if (size)
			*size = sizeof(struct ns__StartRecord);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__StartRecord, n);
		if (size)
			*size = n * sizeof(struct ns__StartRecord);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__StartRecord*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__StartRecord(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__StartRecord %p -> %p\n", q, p));
	*(struct ns__StartRecord*)p = *(struct ns__StartRecord*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__StartRecordResponse(struct soap *soap, struct ns__StartRecordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->result = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__StartRecordResponse(struct soap *soap, const struct ns__StartRecordResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerToint(soap, &a->result);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StartRecordResponse(struct soap *soap, const char *tag, int id, const struct ns__StartRecordResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__StartRecordResponse), type))
		return soap->error;
	if (soap_out_PointerToint(soap, "result", -1, &a->result, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__StartRecordResponse * SOAP_FMAC4 soap_in_ns__StartRecordResponse(struct soap *soap, const char *tag, struct ns__StartRecordResponse *a, const char *type)
{
	size_t soap_flag_result = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__StartRecordResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__StartRecordResponse, sizeof(struct ns__StartRecordResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__StartRecordResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_result && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "result", &a->result, "xsd:int"))
				{	soap_flag_result--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__StartRecordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__StartRecordResponse, 0, sizeof(struct ns__StartRecordResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__StartRecordResponse(struct soap *soap, const struct ns__StartRecordResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_ns__StartRecordResponse);
	if (soap_out_ns__StartRecordResponse(soap, tag?tag:"ns:StartRecordResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__StartRecordResponse * SOAP_FMAC4 soap_get_ns__StartRecordResponse(struct soap *soap, struct ns__StartRecordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__StartRecordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__StartRecordResponse * SOAP_FMAC2 soap_instantiate_ns__StartRecordResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__StartRecordResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__StartRecordResponse, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__StartRecordResponse);
		if (size)
			*size = sizeof(struct ns__StartRecordResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__StartRecordResponse, n);
		if (size)
			*size = n * sizeof(struct ns__StartRecordResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__StartRecordResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__StartRecordResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__StartRecordResponse %p -> %p\n", q, p));
	*(struct ns__StartRecordResponse*)p = *(struct ns__StartRecordResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryDBView(struct soap *soap, struct ns__QueryDBView *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_LONG64(soap, &a->eid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryDBView(struct soap *soap, const struct ns__QueryDBView *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBView(struct soap *soap, const char *tag, int id, const struct ns__QueryDBView *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__QueryDBView), type))
		return soap->error;
	if (soap_out_LONG64(soap, "eid", -1, &a->eid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__QueryDBView * SOAP_FMAC4 soap_in_ns__QueryDBView(struct soap *soap, const char *tag, struct ns__QueryDBView *a, const char *type)
{
	size_t soap_flag_eid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__QueryDBView *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__QueryDBView, sizeof(struct ns__QueryDBView), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__QueryDBView(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_eid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "eid", &a->eid, "xsd:long"))
				{	soap_flag_eid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__QueryDBView *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__QueryDBView, 0, sizeof(struct ns__QueryDBView), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_eid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryDBView(struct soap *soap, const struct ns__QueryDBView *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_ns__QueryDBView);
	if (soap_out_ns__QueryDBView(soap, tag?tag:"ns:QueryDBView", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__QueryDBView * SOAP_FMAC4 soap_get_ns__QueryDBView(struct soap *soap, struct ns__QueryDBView *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryDBView(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__QueryDBView * SOAP_FMAC2 soap_instantiate_ns__QueryDBView(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryDBView(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__QueryDBView, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__QueryDBView);
		if (size)
			*size = sizeof(struct ns__QueryDBView);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__QueryDBView, n);
		if (size)
			*size = n * sizeof(struct ns__QueryDBView);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__QueryDBView*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBView(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__QueryDBView %p -> %p\n", q, p));
	*(struct ns__QueryDBView*)p = *(struct ns__QueryDBView*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryDBEpisodeByTime(struct soap *soap, struct ns__QueryDBEpisodeByTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->cid);
	soap_default_xsd__string(soap, &a->uri);
	soap_default_LONG64(soap, &a->start);
	soap_default_LONG64(soap, &a->end);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryDBEpisodeByTime(struct soap *soap, const struct ns__QueryDBEpisodeByTime *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->cid, SOAP_TYPE_tx_soap_int);
	soap_serialize_xsd__string(soap, &a->uri);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBEpisodeByTime(struct soap *soap, const char *tag, int id, const struct ns__QueryDBEpisodeByTime *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTime), type))
		return soap->error;
	if (soap_out_int(soap, "cid", -1, &a->cid, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "uri", -1, &a->uri, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "start", -1, &a->start, ""))
		return soap->error;
	if (soap_out_LONG64(soap, "end", -1, &a->end, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__QueryDBEpisodeByTime * SOAP_FMAC4 soap_in_ns__QueryDBEpisodeByTime(struct soap *soap, const char *tag, struct ns__QueryDBEpisodeByTime *a, const char *type)
{
	size_t soap_flag_cid = 1;
	size_t soap_flag_uri = 1;
	size_t soap_flag_start = 1;
	size_t soap_flag_end = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__QueryDBEpisodeByTime *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTime, sizeof(struct ns__QueryDBEpisodeByTime), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__QueryDBEpisodeByTime(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_cid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cid", &a->cid, "xsd:int"))
				{	soap_flag_cid--;
					continue;
				}
			if (soap_flag_uri && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "uri", &a->uri, "xsd:string"))
				{	soap_flag_uri--;
					continue;
				}
			if (soap_flag_start && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "start", &a->start, "xsd:long"))
				{	soap_flag_start--;
					continue;
				}
			if (soap_flag_end && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_LONG64(soap, "end", &a->end, "xsd:long"))
				{	soap_flag_end--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__QueryDBEpisodeByTime *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTime, 0, sizeof(struct ns__QueryDBEpisodeByTime), 0, soap_copy_ns__QueryDBEpisodeByTime);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_cid > 0 || soap_flag_uri > 0 || soap_flag_start > 0 || soap_flag_end > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryDBEpisodeByTime(struct soap *soap, const struct ns__QueryDBEpisodeByTime *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTime);
	if (soap_out_ns__QueryDBEpisodeByTime(soap, tag?tag:"ns:QueryDBEpisodeByTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__QueryDBEpisodeByTime * SOAP_FMAC4 soap_get_ns__QueryDBEpisodeByTime(struct soap *soap, struct ns__QueryDBEpisodeByTime *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryDBEpisodeByTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__QueryDBEpisodeByTime * SOAP_FMAC2 soap_instantiate_ns__QueryDBEpisodeByTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryDBEpisodeByTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTime, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__QueryDBEpisodeByTime);
		if (size)
			*size = sizeof(struct ns__QueryDBEpisodeByTime);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__QueryDBEpisodeByTime, n);
		if (size)
			*size = n * sizeof(struct ns__QueryDBEpisodeByTime);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__QueryDBEpisodeByTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBEpisodeByTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__QueryDBEpisodeByTime %p -> %p\n", q, p));
	*(struct ns__QueryDBEpisodeByTime*)p = *(struct ns__QueryDBEpisodeByTime*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryDBEpisode(struct soap *soap, struct ns__QueryDBEpisode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->cid);
	soap_default_xsd__string(soap, &a->uri);
	soap_default_int(soap, &a->offset);
	soap_default_int(soap, &a->count);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryDBEpisode(struct soap *soap, const struct ns__QueryDBEpisode *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->cid, SOAP_TYPE_tx_soap_int);
	soap_serialize_xsd__string(soap, &a->uri);
	soap_embedded(soap, &a->offset, SOAP_TYPE_tx_soap_int);
	soap_embedded(soap, &a->count, SOAP_TYPE_tx_soap_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBEpisode(struct soap *soap, const char *tag, int id, const struct ns__QueryDBEpisode *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__QueryDBEpisode), type))
		return soap->error;
	if (soap_out_int(soap, "cid", -1, &a->cid, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "uri", -1, &a->uri, ""))
		return soap->error;
	if (soap_out_int(soap, "offset", -1, &a->offset, ""))
		return soap->error;
	if (soap_out_int(soap, "count", -1, &a->count, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__QueryDBEpisode * SOAP_FMAC4 soap_in_ns__QueryDBEpisode(struct soap *soap, const char *tag, struct ns__QueryDBEpisode *a, const char *type)
{
	size_t soap_flag_cid = 1;
	size_t soap_flag_uri = 1;
	size_t soap_flag_offset = 1;
	size_t soap_flag_count = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__QueryDBEpisode *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__QueryDBEpisode, sizeof(struct ns__QueryDBEpisode), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__QueryDBEpisode(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_cid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cid", &a->cid, "xsd:int"))
				{	soap_flag_cid--;
					continue;
				}
			if (soap_flag_uri && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "uri", &a->uri, "xsd:string"))
				{	soap_flag_uri--;
					continue;
				}
			if (soap_flag_offset && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "offset", &a->offset, "xsd:int"))
				{	soap_flag_offset--;
					continue;
				}
			if (soap_flag_count && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "count", &a->count, "xsd:int"))
				{	soap_flag_count--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__QueryDBEpisode *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__QueryDBEpisode, 0, sizeof(struct ns__QueryDBEpisode), 0, soap_copy_ns__QueryDBEpisode);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_cid > 0 || soap_flag_uri > 0 || soap_flag_offset > 0 || soap_flag_count > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryDBEpisode(struct soap *soap, const struct ns__QueryDBEpisode *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_ns__QueryDBEpisode);
	if (soap_out_ns__QueryDBEpisode(soap, tag?tag:"ns:QueryDBEpisode", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__QueryDBEpisode * SOAP_FMAC4 soap_get_ns__QueryDBEpisode(struct soap *soap, struct ns__QueryDBEpisode *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryDBEpisode(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__QueryDBEpisode * SOAP_FMAC2 soap_instantiate_ns__QueryDBEpisode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryDBEpisode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__QueryDBEpisode, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__QueryDBEpisode);
		if (size)
			*size = sizeof(struct ns__QueryDBEpisode);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__QueryDBEpisode, n);
		if (size)
			*size = n * sizeof(struct ns__QueryDBEpisode);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__QueryDBEpisode*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBEpisode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__QueryDBEpisode %p -> %p\n", q, p));
	*(struct ns__QueryDBEpisode*)p = *(struct ns__QueryDBEpisode*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryDBEpisodeDates(struct soap *soap, struct ns__QueryDBEpisodeDates *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->cid);
	soap_default_xsd__string(soap, &a->uri);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryDBEpisodeDates(struct soap *soap, const struct ns__QueryDBEpisodeDates *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->cid, SOAP_TYPE_tx_soap_int);
	soap_serialize_xsd__string(soap, &a->uri);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBEpisodeDates(struct soap *soap, const char *tag, int id, const struct ns__QueryDBEpisodeDates *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDates), type))
		return soap->error;
	if (soap_out_int(soap, "cid", -1, &a->cid, ""))
		return soap->error;
	if (soap_out_xsd__string(soap, "uri", -1, &a->uri, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__QueryDBEpisodeDates * SOAP_FMAC4 soap_in_ns__QueryDBEpisodeDates(struct soap *soap, const char *tag, struct ns__QueryDBEpisodeDates *a, const char *type)
{
	size_t soap_flag_cid = 1;
	size_t soap_flag_uri = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__QueryDBEpisodeDates *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDates, sizeof(struct ns__QueryDBEpisodeDates), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	soap_default_ns__QueryDBEpisodeDates(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_cid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cid", &a->cid, "xsd:int"))
				{	soap_flag_cid--;
					continue;
				}
			if (soap_flag_uri && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__string(soap, "uri", &a->uri, "xsd:string"))
				{	soap_flag_uri--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__QueryDBEpisodeDates *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDates, 0, sizeof(struct ns__QueryDBEpisodeDates), 0, soap_copy_ns__QueryDBEpisodeDates);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_cid > 0 || soap_flag_uri > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryDBEpisodeDates(struct soap *soap, const struct ns__QueryDBEpisodeDates *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDates);
	if (soap_out_ns__QueryDBEpisodeDates(soap, tag?tag:"ns:QueryDBEpisodeDates", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__QueryDBEpisodeDates * SOAP_FMAC4 soap_get_ns__QueryDBEpisodeDates(struct soap *soap, struct ns__QueryDBEpisodeDates *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryDBEpisodeDates(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__QueryDBEpisodeDates * SOAP_FMAC2 soap_instantiate_ns__QueryDBEpisodeDates(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryDBEpisodeDates(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDates, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__QueryDBEpisodeDates);
		if (size)
			*size = sizeof(struct ns__QueryDBEpisodeDates);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__QueryDBEpisodeDates, n);
		if (size)
			*size = n * sizeof(struct ns__QueryDBEpisodeDates);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__QueryDBEpisodeDates*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBEpisodeDates(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__QueryDBEpisodeDates %p -> %p\n", q, p));
	*(struct ns__QueryDBEpisodeDates*)p = *(struct ns__QueryDBEpisodeDates*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryDBTerminal(struct soap *soap, struct ns__QueryDBTerminal *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->cid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryDBTerminal(struct soap *soap, const struct ns__QueryDBTerminal *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->cid, SOAP_TYPE_tx_soap_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBTerminal(struct soap *soap, const char *tag, int id, const struct ns__QueryDBTerminal *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__QueryDBTerminal), type))
		return soap->error;
	if (soap_out_int(soap, "cid", -1, &a->cid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__QueryDBTerminal * SOAP_FMAC4 soap_in_ns__QueryDBTerminal(struct soap *soap, const char *tag, struct ns__QueryDBTerminal *a, const char *type)
{
	size_t soap_flag_cid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__QueryDBTerminal *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__QueryDBTerminal, sizeof(struct ns__QueryDBTerminal), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__QueryDBTerminal(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_cid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "cid", &a->cid, "xsd:int"))
				{	soap_flag_cid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__QueryDBTerminal *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__QueryDBTerminal, 0, sizeof(struct ns__QueryDBTerminal), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_cid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryDBTerminal(struct soap *soap, const struct ns__QueryDBTerminal *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_ns__QueryDBTerminal);
	if (soap_out_ns__QueryDBTerminal(soap, tag?tag:"ns:QueryDBTerminal", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__QueryDBTerminal * SOAP_FMAC4 soap_get_ns__QueryDBTerminal(struct soap *soap, struct ns__QueryDBTerminal *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryDBTerminal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__QueryDBTerminal * SOAP_FMAC2 soap_instantiate_ns__QueryDBTerminal(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryDBTerminal(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__QueryDBTerminal, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__QueryDBTerminal);
		if (size)
			*size = sizeof(struct ns__QueryDBTerminal);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__QueryDBTerminal, n);
		if (size)
			*size = n * sizeof(struct ns__QueryDBTerminal);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__QueryDBTerminal*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBTerminal(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__QueryDBTerminal %p -> %p\n", q, p));
	*(struct ns__QueryDBTerminal*)p = *(struct ns__QueryDBTerminal*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryDBConference(struct soap *soap, struct ns__QueryDBConference *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->offset);
	soap_default_int(soap, &a->count);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryDBConference(struct soap *soap, const struct ns__QueryDBConference *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_embedded(soap, &a->offset, SOAP_TYPE_tx_soap_int);
	soap_embedded(soap, &a->count, SOAP_TYPE_tx_soap_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBConference(struct soap *soap, const char *tag, int id, const struct ns__QueryDBConference *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_tx_soap_ns__QueryDBConference), type))
		return soap->error;
	if (soap_out_int(soap, "offset", -1, &a->offset, ""))
		return soap->error;
	if (soap_out_int(soap, "count", -1, &a->count, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct ns__QueryDBConference * SOAP_FMAC4 soap_in_ns__QueryDBConference(struct soap *soap, const char *tag, struct ns__QueryDBConference *a, const char *type)
{
	size_t soap_flag_offset = 1;
	size_t soap_flag_count = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct ns__QueryDBConference *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_tx_soap_ns__QueryDBConference, sizeof(struct ns__QueryDBConference), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_ns__QueryDBConference(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_offset && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "offset", &a->offset, "xsd:int"))
				{	soap_flag_offset--;
					continue;
				}
			if (soap_flag_count && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "count", &a->count, "xsd:int"))
				{	soap_flag_count--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct ns__QueryDBConference *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_tx_soap_ns__QueryDBConference, 0, sizeof(struct ns__QueryDBConference), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_offset > 0 || soap_flag_count > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryDBConference(struct soap *soap, const struct ns__QueryDBConference *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_ns__QueryDBConference);
	if (soap_out_ns__QueryDBConference(soap, tag?tag:"ns:QueryDBConference", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct ns__QueryDBConference * SOAP_FMAC4 soap_get_ns__QueryDBConference(struct soap *soap, struct ns__QueryDBConference *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns__QueryDBConference(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct ns__QueryDBConference * SOAP_FMAC2 soap_instantiate_ns__QueryDBConference(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns__QueryDBConference(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_ns__QueryDBConference, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct ns__QueryDBConference);
		if (size)
			*size = sizeof(struct ns__QueryDBConference);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct ns__QueryDBConference, n);
		if (size)
			*size = n * sizeof(struct ns__QueryDBConference);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct ns__QueryDBConference*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBConference(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct ns__QueryDBConference %p -> %p\n", q, p));
	*(struct ns__QueryDBConference*)p = *(struct ns__QueryDBConference*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_tx_soap_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_tx_soap_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_tx_soap_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_tx_soap_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_tx_soap_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_tx_soap_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_tx_soap_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_tx_soap_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_tx_soap_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__GetRecordStatusResult(struct soap *soap, ns__GetRecordStatusResult *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_tx_soap_ns__GetRecordStatusResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__GetRecordStatusResult(struct soap *soap, const char *tag, int id, ns__GetRecordStatusResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_tx_soap_ns__GetRecordStatusResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__GetRecordStatusResult ** SOAP_FMAC4 soap_in_PointerTons__GetRecordStatusResult(struct soap *soap, const char *tag, ns__GetRecordStatusResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__GetRecordStatusResult **)soap_malloc(soap, sizeof(ns__GetRecordStatusResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__GetRecordStatusResult *)soap_instantiate_ns__GetRecordStatusResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__GetRecordStatusResult ** p = (ns__GetRecordStatusResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_tx_soap_ns__GetRecordStatusResult, sizeof(ns__GetRecordStatusResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__GetRecordStatusResult(struct soap *soap, ns__GetRecordStatusResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_PointerTons__GetRecordStatusResult);
	if (soap_out_PointerTons__GetRecordStatusResult(soap, tag?tag:"ns:GetRecordStatusResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__GetRecordStatusResult ** SOAP_FMAC4 soap_get_PointerTons__GetRecordStatusResult(struct soap *soap, ns__GetRecordStatusResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__GetRecordStatusResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_tx_soap_int);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_tx_soap_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_tx_soap_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__QueryDBViewResult(struct soap *soap, ns__QueryDBViewResult *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_tx_soap_ns__QueryDBViewResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__QueryDBViewResult(struct soap *soap, const char *tag, int id, ns__QueryDBViewResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_tx_soap_ns__QueryDBViewResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__QueryDBViewResult ** SOAP_FMAC4 soap_in_PointerTons__QueryDBViewResult(struct soap *soap, const char *tag, ns__QueryDBViewResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__QueryDBViewResult **)soap_malloc(soap, sizeof(ns__QueryDBViewResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__QueryDBViewResult *)soap_instantiate_ns__QueryDBViewResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__QueryDBViewResult ** p = (ns__QueryDBViewResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_tx_soap_ns__QueryDBViewResult, sizeof(ns__QueryDBViewResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__QueryDBViewResult(struct soap *soap, ns__QueryDBViewResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_PointerTons__QueryDBViewResult);
	if (soap_out_PointerTons__QueryDBViewResult(soap, tag?tag:"ns:QueryDBViewResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__QueryDBViewResult ** SOAP_FMAC4 soap_get_PointerTons__QueryDBViewResult(struct soap *soap, ns__QueryDBViewResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__QueryDBViewResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__QueryDBEpisodeResult(struct soap *soap, ns__QueryDBEpisodeResult *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__QueryDBEpisodeResult(struct soap *soap, const char *tag, int id, ns__QueryDBEpisodeResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__QueryDBEpisodeResult ** SOAP_FMAC4 soap_in_PointerTons__QueryDBEpisodeResult(struct soap *soap, const char *tag, ns__QueryDBEpisodeResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__QueryDBEpisodeResult **)soap_malloc(soap, sizeof(ns__QueryDBEpisodeResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__QueryDBEpisodeResult *)soap_instantiate_ns__QueryDBEpisodeResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__QueryDBEpisodeResult ** p = (ns__QueryDBEpisodeResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult, sizeof(ns__QueryDBEpisodeResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__QueryDBEpisodeResult(struct soap *soap, ns__QueryDBEpisodeResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_PointerTons__QueryDBEpisodeResult);
	if (soap_out_PointerTons__QueryDBEpisodeResult(soap, tag?tag:"ns:QueryDBEpisodeResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__QueryDBEpisodeResult ** SOAP_FMAC4 soap_get_PointerTons__QueryDBEpisodeResult(struct soap *soap, ns__QueryDBEpisodeResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__QueryDBEpisodeResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__QueryDBEpisodeDatesResult(struct soap *soap, ns__QueryDBEpisodeDatesResult *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__QueryDBEpisodeDatesResult(struct soap *soap, const char *tag, int id, ns__QueryDBEpisodeDatesResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__QueryDBEpisodeDatesResult ** SOAP_FMAC4 soap_in_PointerTons__QueryDBEpisodeDatesResult(struct soap *soap, const char *tag, ns__QueryDBEpisodeDatesResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__QueryDBEpisodeDatesResult **)soap_malloc(soap, sizeof(ns__QueryDBEpisodeDatesResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__QueryDBEpisodeDatesResult *)soap_instantiate_ns__QueryDBEpisodeDatesResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__QueryDBEpisodeDatesResult ** p = (ns__QueryDBEpisodeDatesResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult, sizeof(ns__QueryDBEpisodeDatesResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__QueryDBEpisodeDatesResult(struct soap *soap, ns__QueryDBEpisodeDatesResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_PointerTons__QueryDBEpisodeDatesResult);
	if (soap_out_PointerTons__QueryDBEpisodeDatesResult(soap, tag?tag:"ns:QueryDBEpisodeDatesResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__QueryDBEpisodeDatesResult ** SOAP_FMAC4 soap_get_PointerTons__QueryDBEpisodeDatesResult(struct soap *soap, ns__QueryDBEpisodeDatesResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__QueryDBEpisodeDatesResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__QueryDBTerminalResult(struct soap *soap, ns__QueryDBTerminalResult *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__QueryDBTerminalResult(struct soap *soap, const char *tag, int id, ns__QueryDBTerminalResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__QueryDBTerminalResult ** SOAP_FMAC4 soap_in_PointerTons__QueryDBTerminalResult(struct soap *soap, const char *tag, ns__QueryDBTerminalResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__QueryDBTerminalResult **)soap_malloc(soap, sizeof(ns__QueryDBTerminalResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__QueryDBTerminalResult *)soap_instantiate_ns__QueryDBTerminalResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__QueryDBTerminalResult ** p = (ns__QueryDBTerminalResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult, sizeof(ns__QueryDBTerminalResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__QueryDBTerminalResult(struct soap *soap, ns__QueryDBTerminalResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_PointerTons__QueryDBTerminalResult);
	if (soap_out_PointerTons__QueryDBTerminalResult(soap, tag?tag:"ns:QueryDBTerminalResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__QueryDBTerminalResult ** SOAP_FMAC4 soap_get_PointerTons__QueryDBTerminalResult(struct soap *soap, ns__QueryDBTerminalResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__QueryDBTerminalResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__QueryDBConferenceResult(struct soap *soap, ns__QueryDBConferenceResult *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__QueryDBConferenceResult(struct soap *soap, const char *tag, int id, ns__QueryDBConferenceResult *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns__QueryDBConferenceResult ** SOAP_FMAC4 soap_in_PointerTons__QueryDBConferenceResult(struct soap *soap, const char *tag, ns__QueryDBConferenceResult **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns__QueryDBConferenceResult **)soap_malloc(soap, sizeof(ns__QueryDBConferenceResult *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns__QueryDBConferenceResult *)soap_instantiate_ns__QueryDBConferenceResult(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns__QueryDBConferenceResult ** p = (ns__QueryDBConferenceResult **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult, sizeof(ns__QueryDBConferenceResult), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__QueryDBConferenceResult(struct soap *soap, ns__QueryDBConferenceResult *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_PointerTons__QueryDBConferenceResult);
	if (soap_out_PointerTons__QueryDBConferenceResult(soap, tag?tag:"ns:QueryDBConferenceResult", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns__QueryDBConferenceResult ** SOAP_FMAC4 soap_get_PointerTons__QueryDBConferenceResult(struct soap *soap, ns__QueryDBConferenceResult **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons__QueryDBConferenceResult(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_tx_soap__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_tx_soap__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_tx_soap__QName, 2, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_tx_soap_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_tx_soap_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_tx_soap_string, 1, 0, -1, NULL);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, SOAP_TYPE_tx_soap_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__RecordTerminalStatus(struct soap *soap, std::vector<ns__RecordTerminalStatus >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__RecordTerminalStatus(struct soap *soap, const std::vector<ns__RecordTerminalStatus >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns__RecordTerminalStatus >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__RecordTerminalStatus(struct soap *soap, const char *tag, int id, const std::vector<ns__RecordTerminalStatus >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns__RecordTerminalStatus >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns__RecordTerminalStatus >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns__RecordTerminalStatus(struct soap *soap, const char *tag, std::vector<ns__RecordTerminalStatus >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns__RecordTerminalStatus n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n.soap_default(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_tx_soap_ns__RecordTerminalStatus, SOAP_TYPE_tx_soap_std__vectorTemplateOfns__RecordTerminalStatus, sizeof(ns__RecordTerminalStatus), 0))
				break;
			if (!soap_in_ns__RecordTerminalStatus(soap, tag, NULL, "ns:RecordTerminalStatus"))
				break;
		}
		else if (!soap_in_ns__RecordTerminalStatus(soap, tag, &n, "ns:RecordTerminalStatus"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfns__RecordTerminalStatus(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns__RecordTerminalStatus > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__RecordTerminalStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfns__RecordTerminalStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_std__vectorTemplateOfns__RecordTerminalStatus, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns__RecordTerminalStatus >);
		if (size)
			*size = sizeof(std::vector<ns__RecordTerminalStatus >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns__RecordTerminalStatus >, n);
		if (size)
			*size = n * sizeof(std::vector<ns__RecordTerminalStatus >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns__RecordTerminalStatus >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns__RecordTerminalStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns__RecordTerminalStatus > %p -> %p\n", q, p));
	*(std::vector<ns__RecordTerminalStatus >*)p = *(std::vector<ns__RecordTerminalStatus >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__DBViewNode(struct soap *soap, std::vector<ns__DBViewNode >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__DBViewNode(struct soap *soap, const std::vector<ns__DBViewNode >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns__DBViewNode >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__DBViewNode(struct soap *soap, const char *tag, int id, const std::vector<ns__DBViewNode >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns__DBViewNode >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns__DBViewNode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns__DBViewNode(struct soap *soap, const char *tag, std::vector<ns__DBViewNode >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns__DBViewNode n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n.soap_default(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_tx_soap_ns__DBViewNode, SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBViewNode, sizeof(ns__DBViewNode), 0))
				break;
			if (!soap_in_ns__DBViewNode(soap, tag, NULL, "ns:DBViewNode"))
				break;
		}
		else if (!soap_in_ns__DBViewNode(soap, tag, &n, "ns:DBViewNode"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfns__DBViewNode(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns__DBViewNode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__DBViewNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfns__DBViewNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBViewNode, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns__DBViewNode >);
		if (size)
			*size = sizeof(std::vector<ns__DBViewNode >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns__DBViewNode >, n);
		if (size)
			*size = n * sizeof(std::vector<ns__DBViewNode >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns__DBViewNode >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns__DBViewNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns__DBViewNode > %p -> %p\n", q, p));
	*(std::vector<ns__DBViewNode >*)p = *(std::vector<ns__DBViewNode >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__DBEpisodeNode(struct soap *soap, std::vector<ns__DBEpisodeNode >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__DBEpisodeNode(struct soap *soap, const std::vector<ns__DBEpisodeNode >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns__DBEpisodeNode >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__DBEpisodeNode(struct soap *soap, const char *tag, int id, const std::vector<ns__DBEpisodeNode >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns__DBEpisodeNode >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns__DBEpisodeNode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns__DBEpisodeNode(struct soap *soap, const char *tag, std::vector<ns__DBEpisodeNode >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns__DBEpisodeNode n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n.soap_default(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_tx_soap_ns__DBEpisodeNode, SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBEpisodeNode, sizeof(ns__DBEpisodeNode), 0))
				break;
			if (!soap_in_ns__DBEpisodeNode(soap, tag, NULL, "ns:DBEpisodeNode"))
				break;
		}
		else if (!soap_in_ns__DBEpisodeNode(soap, tag, &n, "ns:DBEpisodeNode"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfns__DBEpisodeNode(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns__DBEpisodeNode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__DBEpisodeNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfns__DBEpisodeNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBEpisodeNode, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns__DBEpisodeNode >);
		if (size)
			*size = sizeof(std::vector<ns__DBEpisodeNode >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns__DBEpisodeNode >, n);
		if (size)
			*size = n * sizeof(std::vector<ns__DBEpisodeNode >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns__DBEpisodeNode >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns__DBEpisodeNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns__DBEpisodeNode > %p -> %p\n", q, p));
	*(std::vector<ns__DBEpisodeNode >*)p = *(std::vector<ns__DBEpisodeNode >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfshort(struct soap *soap, std::vector<short >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfshort(struct soap *soap, const std::vector<short >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfshort(struct soap *soap, const char *tag, int id, const std::vector<short >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<short >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_short(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<short >* SOAP_FMAC4 soap_in_std__vectorTemplateOfshort(struct soap *soap, const char *tag, std::vector<short >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	short n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		soap_default_short(soap, &n);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_tx_soap_short, SOAP_TYPE_tx_soap_std__vectorTemplateOfshort, sizeof(short), 0))
				break;
			if (!soap_in_short(soap, tag, NULL, "xsd:short"))
				break;
		}
		else if (!soap_in_short(soap, tag, &n, "xsd:short"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfshort(soap, -1)))
			return NULL;
		a->push_back(n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<short > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfshort(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfshort(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_std__vectorTemplateOfshort, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<short >);
		if (size)
			*size = sizeof(std::vector<short >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<short >, n);
		if (size)
			*size = n * sizeof(std::vector<short >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<short >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfshort(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<short > %p -> %p\n", q, p));
	*(std::vector<short >*)p = *(std::vector<short >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__DBTerminalNode(struct soap *soap, std::vector<ns__DBTerminalNode >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__DBTerminalNode(struct soap *soap, const std::vector<ns__DBTerminalNode >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns__DBTerminalNode >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__DBTerminalNode(struct soap *soap, const char *tag, int id, const std::vector<ns__DBTerminalNode >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns__DBTerminalNode >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns__DBTerminalNode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns__DBTerminalNode(struct soap *soap, const char *tag, std::vector<ns__DBTerminalNode >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns__DBTerminalNode n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n.soap_default(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_tx_soap_ns__DBTerminalNode, SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBTerminalNode, sizeof(ns__DBTerminalNode), 0))
				break;
			if (!soap_in_ns__DBTerminalNode(soap, tag, NULL, "ns:DBTerminalNode"))
				break;
		}
		else if (!soap_in_ns__DBTerminalNode(soap, tag, &n, "ns:DBTerminalNode"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfns__DBTerminalNode(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns__DBTerminalNode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__DBTerminalNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfns__DBTerminalNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBTerminalNode, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns__DBTerminalNode >);
		if (size)
			*size = sizeof(std::vector<ns__DBTerminalNode >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns__DBTerminalNode >, n);
		if (size)
			*size = n * sizeof(std::vector<ns__DBTerminalNode >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns__DBTerminalNode >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns__DBTerminalNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns__DBTerminalNode > %p -> %p\n", q, p));
	*(std::vector<ns__DBTerminalNode >*)p = *(std::vector<ns__DBTerminalNode >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__DBConferenceNode(struct soap *soap, std::vector<ns__DBConferenceNode >*p)
{
	(void)soap; /* appease -Wall -Werror */
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__DBConferenceNode(struct soap *soap, const std::vector<ns__DBConferenceNode >*a)
{
	(void)soap; (void)a;/* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	for (std::vector<ns__DBConferenceNode >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__DBConferenceNode(struct soap *soap, const char *tag, int id, const std::vector<ns__DBConferenceNode >*a, const char *type)
{
	(void)id; (void)type; /* appease -Wall -Werror */
	for (std::vector<ns__DBConferenceNode >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<ns__DBConferenceNode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns__DBConferenceNode(struct soap *soap, const char *tag, std::vector<ns__DBConferenceNode >*a, const char *type)
{
	short soap_flag;
	(void)type; /* appease -Wall -Werror */
	for (soap_flag = 0;; soap_flag = 1)
	{	ns__DBConferenceNode n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n.soap_default(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_tx_soap_ns__DBConferenceNode, SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBConferenceNode, sizeof(ns__DBConferenceNode), 0))
				break;
			if (!soap_in_ns__DBConferenceNode(soap, tag, NULL, "ns:DBConferenceNode"))
				break;
		}
		else if (!soap_in_ns__DBConferenceNode(soap, tag, &n, "ns:DBConferenceNode"))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOfns__DBConferenceNode(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<ns__DBConferenceNode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__DBConferenceNode(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfns__DBConferenceNode(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBConferenceNode, n, tx_soap_fdelete);
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<ns__DBConferenceNode >);
		if (size)
			*size = sizeof(std::vector<ns__DBConferenceNode >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<ns__DBConferenceNode >, n);
		if (size)
			*size = n * sizeof(std::vector<ns__DBConferenceNode >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<ns__DBConferenceNode >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns__DBConferenceNode(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<ns__DBConferenceNode > %p -> %p\n", q, p));
	*(std::vector<ns__DBConferenceNode >*)p = *(std::vector<ns__DBConferenceNode >*)q;
}

} // namespace tx_soap


#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of tx_soapC.cpp */
