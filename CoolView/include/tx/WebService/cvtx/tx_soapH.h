/* tx_soapH.h
   Generated by gSOAP 2.8.21 from cvtx.h

Copyright(C) 2000-2014, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef tx_soapH_H
#define tx_soapH_H
#include "tx_soapStub.h"

namespace tx_soap {
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 tx_soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 tx_soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 tx_soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_byte
#define SOAP_TYPE_tx_soap_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_byte(soap, data),0) || tx_soap::soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap_short
#define SOAP_TYPE_tx_soap_short (17)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap*, short *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap*, const char*, int, const short *, const char*);
SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap*, const char*, short *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap*, const short *, const char*, const char*);

#ifndef soap_write_short
#define soap_write_short(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_short(soap, data),0) || tx_soap::soap_put_short(soap, data, "short", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap*, short *, const char*, const char*);

#ifndef soap_read_short
#define soap_read_short(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_short(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap_int
#define SOAP_TYPE_tx_soap_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_int(soap, data),0) || tx_soap::soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap_long
#define SOAP_TYPE_tx_soap_long (20)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_long(struct soap*, long *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap*, const char*, int, const long *, const char*);
SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap*, const char*, long *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap*, const long *, const char*, const char*);

#ifndef soap_write_long
#define soap_write_long(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_long(soap, data),0) || tx_soap::soap_put_long(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap*, long *, const char*, const char*);

#ifndef soap_read_long
#define soap_read_long(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_long(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap_LONG64
#define SOAP_TYPE_tx_soap_LONG64 (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap*, LONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap*, const char*, int, const LONG64 *, const char*);
SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap*, const char*, LONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap*, const LONG64 *, const char*, const char*);

#ifndef soap_write_LONG64
#define soap_write_LONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_LONG64(soap, data),0) || tx_soap::soap_put_LONG64(soap, data, "long", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap*, LONG64 *, const char*, const char*);

#ifndef soap_read_LONG64
#define soap_read_LONG64(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_LONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap_unsignedInt
#define SOAP_TYPE_tx_soap_unsignedInt (48)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap*, unsigned int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap*, const char*, int, const unsigned int *, const char*);
SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap*, const char*, unsigned int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap*, const unsigned int *, const char*, const char*);

#ifndef soap_write_unsignedInt
#define soap_write_unsignedInt(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_unsignedInt(soap, data),0) || tx_soap::soap_put_unsignedInt(soap, data, "unsignedInt", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap*, unsigned int *, const char*, const char*);

#ifndef soap_read_unsignedInt
#define soap_read_unsignedInt(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_unsignedInt(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap_unsignedLONG64
#define SOAP_TYPE_tx_soap_unsignedLONG64 (49)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap*, ULONG64 *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap*, const char*, int, const ULONG64 *, const char*);
SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap*, const char*, ULONG64 *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap*, const ULONG64 *, const char*, const char*);

#ifndef soap_write_unsignedLONG64
#define soap_write_unsignedLONG64(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_unsignedLONG64(soap, data),0) || tx_soap::soap_put_unsignedLONG64(soap, data, "unsignedLong", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap*, ULONG64 *, const char*, const char*);

#ifndef soap_read_unsignedLONG64
#define soap_read_unsignedLONG64(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_unsignedLONG64(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap_ns__GetRecordStatusResult
#define SOAP_TYPE_tx_soap_ns__GetRecordStatusResult (50)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetRecordStatusResult(struct soap*, const char*, int, const ns__GetRecordStatusResult *, const char*);
SOAP_FMAC3 ns__GetRecordStatusResult * SOAP_FMAC4 soap_in_ns__GetRecordStatusResult(struct soap*, const char*, ns__GetRecordStatusResult *, const char*);

#ifndef soap_write_ns__GetRecordStatusResult
#define soap_write_ns__GetRecordStatusResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns:GetRecordStatusResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__GetRecordStatusResult * SOAP_FMAC4 soap_get_ns__GetRecordStatusResult(struct soap*, ns__GetRecordStatusResult *, const char*, const char*);

#ifndef soap_read_ns__GetRecordStatusResult
#define soap_read_ns__GetRecordStatusResult(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__GetRecordStatusResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__GetRecordStatusResult * SOAP_FMAC2 soap_instantiate_ns__GetRecordStatusResult(struct soap*, int, const char*, const char*, size_t*);

inline ns__GetRecordStatusResult * soap_new_ns__GetRecordStatusResult(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetRecordStatusResult(soap, n, NULL, NULL, NULL); }

inline ns__GetRecordStatusResult * soap_new_req_ns__GetRecordStatusResult(struct soap *soap) { ns__GetRecordStatusResult *_p = soap_instantiate_ns__GetRecordStatusResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns__GetRecordStatusResult * soap_new_set_ns__GetRecordStatusResult(struct soap *soap, std::vector<ns__RecordTerminalStatus >& terminals) { ns__GetRecordStatusResult *_p = soap_instantiate_ns__GetRecordStatusResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__GetRecordStatusResult::terminals = terminals; } return _p; }

inline void soap_delete_ns__GetRecordStatusResult(struct soap *soap, ns__GetRecordStatusResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetRecordStatusResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__RecordTerminalStatus
#define SOAP_TYPE_tx_soap_ns__RecordTerminalStatus (47)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__RecordTerminalStatus(struct soap*, const char*, int, const ns__RecordTerminalStatus *, const char*);
SOAP_FMAC3 ns__RecordTerminalStatus * SOAP_FMAC4 soap_in_ns__RecordTerminalStatus(struct soap*, const char*, ns__RecordTerminalStatus *, const char*);

#ifndef soap_write_ns__RecordTerminalStatus
#define soap_write_ns__RecordTerminalStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns:RecordTerminalStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__RecordTerminalStatus * SOAP_FMAC4 soap_get_ns__RecordTerminalStatus(struct soap*, ns__RecordTerminalStatus *, const char*, const char*);

#ifndef soap_read_ns__RecordTerminalStatus
#define soap_read_ns__RecordTerminalStatus(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__RecordTerminalStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__RecordTerminalStatus * SOAP_FMAC2 soap_instantiate_ns__RecordTerminalStatus(struct soap*, int, const char*, const char*, size_t*);

inline ns__RecordTerminalStatus * soap_new_ns__RecordTerminalStatus(struct soap *soap, int n = -1) { return soap_instantiate_ns__RecordTerminalStatus(soap, n, NULL, NULL, NULL); }

inline ns__RecordTerminalStatus * soap_new_req_ns__RecordTerminalStatus(struct soap *soap, std::string& vuri, std::string& name, std::string& status, int virtual_count, std::string& requester_uri, unsigned int duration, ULONG64 recorded_bytes) { ns__RecordTerminalStatus *_p = soap_instantiate_ns__RecordTerminalStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__RecordTerminalStatus::vuri = vuri; _p->ns__RecordTerminalStatus::name = name; _p->ns__RecordTerminalStatus::status = status; _p->ns__RecordTerminalStatus::virtual_count = virtual_count; _p->ns__RecordTerminalStatus::requester_uri = requester_uri; _p->ns__RecordTerminalStatus::duration = duration; _p->ns__RecordTerminalStatus::recorded_bytes = recorded_bytes; } return _p; }

inline ns__RecordTerminalStatus * soap_new_set_ns__RecordTerminalStatus(struct soap *soap, std::string& vuri, std::string& name, std::string& status, int virtual_count, std::string& requester_uri, unsigned int duration, ULONG64 recorded_bytes) { ns__RecordTerminalStatus *_p = soap_instantiate_ns__RecordTerminalStatus(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__RecordTerminalStatus::vuri = vuri; _p->ns__RecordTerminalStatus::name = name; _p->ns__RecordTerminalStatus::status = status; _p->ns__RecordTerminalStatus::virtual_count = virtual_count; _p->ns__RecordTerminalStatus::requester_uri = requester_uri; _p->ns__RecordTerminalStatus::duration = duration; _p->ns__RecordTerminalStatus::recorded_bytes = recorded_bytes; } return _p; }

inline void soap_delete_ns__RecordTerminalStatus(struct soap *soap, ns__RecordTerminalStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__RecordTerminalStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__StopRecordParam
#define SOAP_TYPE_tx_soap_ns__StopRecordParam (46)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StopRecordParam(struct soap*, const char*, int, const ns__StopRecordParam *, const char*);
SOAP_FMAC3 ns__StopRecordParam * SOAP_FMAC4 soap_in_ns__StopRecordParam(struct soap*, const char*, ns__StopRecordParam *, const char*);

#ifndef soap_write_ns__StopRecordParam
#define soap_write_ns__StopRecordParam(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns:StopRecordParam", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__StopRecordParam * SOAP_FMAC4 soap_get_ns__StopRecordParam(struct soap*, ns__StopRecordParam *, const char*, const char*);

#ifndef soap_read_ns__StopRecordParam
#define soap_read_ns__StopRecordParam(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__StopRecordParam(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__StopRecordParam * SOAP_FMAC2 soap_instantiate_ns__StopRecordParam(struct soap*, int, const char*, const char*, size_t*);

inline ns__StopRecordParam * soap_new_ns__StopRecordParam(struct soap *soap, int n = -1) { return soap_instantiate_ns__StopRecordParam(soap, n, NULL, NULL, NULL); }

inline ns__StopRecordParam * soap_new_req_ns__StopRecordParam(struct soap *soap, std::string& focus, std::string& target_uri) { ns__StopRecordParam *_p = soap_instantiate_ns__StopRecordParam(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__StopRecordParam::focus = focus; _p->ns__StopRecordParam::target_uri = target_uri; } return _p; }

inline ns__StopRecordParam * soap_new_set_ns__StopRecordParam(struct soap *soap, std::string& focus, std::string& target_uri) { ns__StopRecordParam *_p = soap_instantiate_ns__StopRecordParam(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__StopRecordParam::focus = focus; _p->ns__StopRecordParam::target_uri = target_uri; } return _p; }

inline void soap_delete_ns__StopRecordParam(struct soap *soap, ns__StopRecordParam *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__StopRecordParam(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__StartRecordParam
#define SOAP_TYPE_tx_soap_ns__StartRecordParam (45)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StartRecordParam(struct soap*, const char*, int, const ns__StartRecordParam *, const char*);
SOAP_FMAC3 ns__StartRecordParam * SOAP_FMAC4 soap_in_ns__StartRecordParam(struct soap*, const char*, ns__StartRecordParam *, const char*);

#ifndef soap_write_ns__StartRecordParam
#define soap_write_ns__StartRecordParam(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns:StartRecordParam", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__StartRecordParam * SOAP_FMAC4 soap_get_ns__StartRecordParam(struct soap*, ns__StartRecordParam *, const char*, const char*);

#ifndef soap_read_ns__StartRecordParam
#define soap_read_ns__StartRecordParam(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__StartRecordParam(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__StartRecordParam * SOAP_FMAC2 soap_instantiate_ns__StartRecordParam(struct soap*, int, const char*, const char*, size_t*);

inline ns__StartRecordParam * soap_new_ns__StartRecordParam(struct soap *soap, int n = -1) { return soap_instantiate_ns__StartRecordParam(soap, n, NULL, NULL, NULL); }

inline ns__StartRecordParam * soap_new_req_ns__StartRecordParam(struct soap *soap, std::string& focus, std::string& requester_uri, std::string& target_uri, std::string& title, std::string& participants, std::string& keywords, std::string& description) { ns__StartRecordParam *_p = soap_instantiate_ns__StartRecordParam(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__StartRecordParam::focus = focus; _p->ns__StartRecordParam::requester_uri = requester_uri; _p->ns__StartRecordParam::target_uri = target_uri; _p->ns__StartRecordParam::title = title; _p->ns__StartRecordParam::participants = participants; _p->ns__StartRecordParam::keywords = keywords; _p->ns__StartRecordParam::description = description; } return _p; }

inline ns__StartRecordParam * soap_new_set_ns__StartRecordParam(struct soap *soap, std::string& focus, std::string& requester_uri, std::string& target_uri, std::string& title, std::string& participants, std::string& keywords, std::string& description) { ns__StartRecordParam *_p = soap_instantiate_ns__StartRecordParam(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__StartRecordParam::focus = focus; _p->ns__StartRecordParam::requester_uri = requester_uri; _p->ns__StartRecordParam::target_uri = target_uri; _p->ns__StartRecordParam::title = title; _p->ns__StartRecordParam::participants = participants; _p->ns__StartRecordParam::keywords = keywords; _p->ns__StartRecordParam::description = description; } return _p; }

inline void soap_delete_ns__StartRecordParam(struct soap *soap, ns__StartRecordParam *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__StartRecordParam(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__QueryDBViewResult
#define SOAP_TYPE_tx_soap_ns__QueryDBViewResult (26)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBViewResult(struct soap*, const char*, int, const ns__QueryDBViewResult *, const char*);
SOAP_FMAC3 ns__QueryDBViewResult * SOAP_FMAC4 soap_in_ns__QueryDBViewResult(struct soap*, const char*, ns__QueryDBViewResult *, const char*);

#ifndef soap_write_ns__QueryDBViewResult
#define soap_write_ns__QueryDBViewResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns:QueryDBViewResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__QueryDBViewResult * SOAP_FMAC4 soap_get_ns__QueryDBViewResult(struct soap*, ns__QueryDBViewResult *, const char*, const char*);

#ifndef soap_read_ns__QueryDBViewResult
#define soap_read_ns__QueryDBViewResult(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__QueryDBViewResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__QueryDBViewResult * SOAP_FMAC2 soap_instantiate_ns__QueryDBViewResult(struct soap*, int, const char*, const char*, size_t*);

inline ns__QueryDBViewResult * soap_new_ns__QueryDBViewResult(struct soap *soap, int n = -1) { return soap_instantiate_ns__QueryDBViewResult(soap, n, NULL, NULL, NULL); }

inline ns__QueryDBViewResult * soap_new_req_ns__QueryDBViewResult(struct soap *soap) { ns__QueryDBViewResult *_p = soap_instantiate_ns__QueryDBViewResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns__QueryDBViewResult * soap_new_set_ns__QueryDBViewResult(struct soap *soap, std::vector<ns__DBViewNode >& views) { ns__QueryDBViewResult *_p = soap_instantiate_ns__QueryDBViewResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__QueryDBViewResult::views = views; } return _p; }

inline void soap_delete_ns__QueryDBViewResult(struct soap *soap, ns__QueryDBViewResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBViewResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__DBViewNode
#define SOAP_TYPE_tx_soap_ns__DBViewNode (25)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DBViewNode(struct soap*, const char*, int, const ns__DBViewNode *, const char*);
SOAP_FMAC3 ns__DBViewNode * SOAP_FMAC4 soap_in_ns__DBViewNode(struct soap*, const char*, ns__DBViewNode *, const char*);

#ifndef soap_write_ns__DBViewNode
#define soap_write_ns__DBViewNode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns:DBViewNode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__DBViewNode * SOAP_FMAC4 soap_get_ns__DBViewNode(struct soap*, ns__DBViewNode *, const char*, const char*);

#ifndef soap_read_ns__DBViewNode
#define soap_read_ns__DBViewNode(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__DBViewNode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__DBViewNode * SOAP_FMAC2 soap_instantiate_ns__DBViewNode(struct soap*, int, const char*, const char*, size_t*);

inline ns__DBViewNode * soap_new_ns__DBViewNode(struct soap *soap, int n = -1) { return soap_instantiate_ns__DBViewNode(soap, n, NULL, NULL, NULL); }

inline ns__DBViewNode * soap_new_req_ns__DBViewNode(struct soap *soap, int id, short camera_index, LONG64 start_time, LONG64 duration, std::string& format, std::string& file_path, int status) { ns__DBViewNode *_p = soap_instantiate_ns__DBViewNode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__DBViewNode::id = id; _p->ns__DBViewNode::camera_index = camera_index; _p->ns__DBViewNode::start_time = start_time; _p->ns__DBViewNode::duration = duration; _p->ns__DBViewNode::format = format; _p->ns__DBViewNode::file_path = file_path; _p->ns__DBViewNode::status = status; } return _p; }

inline ns__DBViewNode * soap_new_set_ns__DBViewNode(struct soap *soap, int id, short camera_index, LONG64 start_time, LONG64 duration, std::string& format, std::string& file_path, int status) { ns__DBViewNode *_p = soap_instantiate_ns__DBViewNode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__DBViewNode::id = id; _p->ns__DBViewNode::camera_index = camera_index; _p->ns__DBViewNode::start_time = start_time; _p->ns__DBViewNode::duration = duration; _p->ns__DBViewNode::format = format; _p->ns__DBViewNode::file_path = file_path; _p->ns__DBViewNode::status = status; } return _p; }

inline void soap_delete_ns__DBViewNode(struct soap *soap, ns__DBViewNode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DBViewNode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTimeResult
#define SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTimeResult (24)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBEpisodeByTimeResult(struct soap*, const char*, int, const ns__QueryDBEpisodeByTimeResult *, const char*);
SOAP_FMAC3 ns__QueryDBEpisodeByTimeResult * SOAP_FMAC4 soap_in_ns__QueryDBEpisodeByTimeResult(struct soap*, const char*, ns__QueryDBEpisodeByTimeResult *, const char*);

#ifndef soap_write_ns__QueryDBEpisodeByTimeResult
#define soap_write_ns__QueryDBEpisodeByTimeResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns:QueryDBEpisodeByTimeResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__QueryDBEpisodeByTimeResult * SOAP_FMAC4 soap_get_ns__QueryDBEpisodeByTimeResult(struct soap*, ns__QueryDBEpisodeByTimeResult *, const char*, const char*);

#ifndef soap_read_ns__QueryDBEpisodeByTimeResult
#define soap_read_ns__QueryDBEpisodeByTimeResult(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__QueryDBEpisodeByTimeResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__QueryDBEpisodeByTimeResult * SOAP_FMAC2 soap_instantiate_ns__QueryDBEpisodeByTimeResult(struct soap*, int, const char*, const char*, size_t*);

inline ns__QueryDBEpisodeByTimeResult * soap_new_ns__QueryDBEpisodeByTimeResult(struct soap *soap, int n = -1) { return soap_instantiate_ns__QueryDBEpisodeByTimeResult(soap, n, NULL, NULL, NULL); }

inline ns__QueryDBEpisodeByTimeResult * soap_new_req_ns__QueryDBEpisodeByTimeResult(struct soap *soap, LONG64 start, LONG64 end) { ns__QueryDBEpisodeByTimeResult *_p = soap_instantiate_ns__QueryDBEpisodeByTimeResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__QueryDBEpisodeByTimeResult::start = start; _p->ns__QueryDBEpisodeByTimeResult::end = end; } return _p; }

inline ns__QueryDBEpisodeByTimeResult * soap_new_set_ns__QueryDBEpisodeByTimeResult(struct soap *soap, LONG64 start, LONG64 end, std::vector<ns__DBEpisodeNode >& episodes) { ns__QueryDBEpisodeByTimeResult *_p = soap_instantiate_ns__QueryDBEpisodeByTimeResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__QueryDBEpisodeByTimeResult::start = start; _p->ns__QueryDBEpisodeByTimeResult::end = end; _p->ns__QueryDBEpisodeByTimeResult::episodes = episodes; } return _p; }

inline void soap_delete_ns__QueryDBEpisodeByTimeResult(struct soap *soap, ns__QueryDBEpisodeByTimeResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBEpisodeByTimeResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult
#define SOAP_TYPE_tx_soap_ns__QueryDBEpisodeResult (22)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBEpisodeResult(struct soap*, const char*, int, const ns__QueryDBEpisodeResult *, const char*);
SOAP_FMAC3 ns__QueryDBEpisodeResult * SOAP_FMAC4 soap_in_ns__QueryDBEpisodeResult(struct soap*, const char*, ns__QueryDBEpisodeResult *, const char*);

#ifndef soap_write_ns__QueryDBEpisodeResult
#define soap_write_ns__QueryDBEpisodeResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns:QueryDBEpisodeResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__QueryDBEpisodeResult * SOAP_FMAC4 soap_get_ns__QueryDBEpisodeResult(struct soap*, ns__QueryDBEpisodeResult *, const char*, const char*);

#ifndef soap_read_ns__QueryDBEpisodeResult
#define soap_read_ns__QueryDBEpisodeResult(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__QueryDBEpisodeResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__QueryDBEpisodeResult * SOAP_FMAC2 soap_instantiate_ns__QueryDBEpisodeResult(struct soap*, int, const char*, const char*, size_t*);

inline ns__QueryDBEpisodeResult * soap_new_ns__QueryDBEpisodeResult(struct soap *soap, int n = -1) { return soap_instantiate_ns__QueryDBEpisodeResult(soap, n, NULL, NULL, NULL); }

inline ns__QueryDBEpisodeResult * soap_new_req_ns__QueryDBEpisodeResult(struct soap *soap, int total, int offset) { ns__QueryDBEpisodeResult *_p = soap_instantiate_ns__QueryDBEpisodeResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__QueryDBEpisodeResult::total = total; _p->ns__QueryDBEpisodeResult::offset = offset; } return _p; }

inline ns__QueryDBEpisodeResult * soap_new_set_ns__QueryDBEpisodeResult(struct soap *soap, int total, int offset, std::vector<ns__DBEpisodeNode >& episodes) { ns__QueryDBEpisodeResult *_p = soap_instantiate_ns__QueryDBEpisodeResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__QueryDBEpisodeResult::total = total; _p->ns__QueryDBEpisodeResult::offset = offset; _p->ns__QueryDBEpisodeResult::episodes = episodes; } return _p; }

inline void soap_delete_ns__QueryDBEpisodeResult(struct soap *soap, ns__QueryDBEpisodeResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBEpisodeResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__DBEpisodeNode
#define SOAP_TYPE_tx_soap_ns__DBEpisodeNode (19)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DBEpisodeNode(struct soap*, const char*, int, const ns__DBEpisodeNode *, const char*);
SOAP_FMAC3 ns__DBEpisodeNode * SOAP_FMAC4 soap_in_ns__DBEpisodeNode(struct soap*, const char*, ns__DBEpisodeNode *, const char*);

#ifndef soap_write_ns__DBEpisodeNode
#define soap_write_ns__DBEpisodeNode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns:DBEpisodeNode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__DBEpisodeNode * SOAP_FMAC4 soap_get_ns__DBEpisodeNode(struct soap*, ns__DBEpisodeNode *, const char*, const char*);

#ifndef soap_read_ns__DBEpisodeNode
#define soap_read_ns__DBEpisodeNode(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__DBEpisodeNode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__DBEpisodeNode * SOAP_FMAC2 soap_instantiate_ns__DBEpisodeNode(struct soap*, int, const char*, const char*, size_t*);

inline ns__DBEpisodeNode * soap_new_ns__DBEpisodeNode(struct soap *soap, int n = -1) { return soap_instantiate_ns__DBEpisodeNode(soap, n, NULL, NULL, NULL); }

inline ns__DBEpisodeNode * soap_new_req_ns__DBEpisodeNode(struct soap *soap, LONG64 id, std::string& terminal_uri, std::string& title, std::string& requester, LONG64 start_time, LONG64 duration, std::string& participants, std::string& keywords, std::string& description) { ns__DBEpisodeNode *_p = soap_instantiate_ns__DBEpisodeNode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__DBEpisodeNode::id = id; _p->ns__DBEpisodeNode::terminal_uri = terminal_uri; _p->ns__DBEpisodeNode::title = title; _p->ns__DBEpisodeNode::requester = requester; _p->ns__DBEpisodeNode::start_time = start_time; _p->ns__DBEpisodeNode::duration = duration; _p->ns__DBEpisodeNode::participants = participants; _p->ns__DBEpisodeNode::keywords = keywords; _p->ns__DBEpisodeNode::description = description; } return _p; }

inline ns__DBEpisodeNode * soap_new_set_ns__DBEpisodeNode(struct soap *soap, LONG64 id, std::string& terminal_uri, std::string& title, std::string& requester, LONG64 start_time, LONG64 duration, std::string& participants, std::string& keywords, std::string& description) { ns__DBEpisodeNode *_p = soap_instantiate_ns__DBEpisodeNode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__DBEpisodeNode::id = id; _p->ns__DBEpisodeNode::terminal_uri = terminal_uri; _p->ns__DBEpisodeNode::title = title; _p->ns__DBEpisodeNode::requester = requester; _p->ns__DBEpisodeNode::start_time = start_time; _p->ns__DBEpisodeNode::duration = duration; _p->ns__DBEpisodeNode::participants = participants; _p->ns__DBEpisodeNode::keywords = keywords; _p->ns__DBEpisodeNode::description = description; } return _p; }

inline void soap_delete_ns__DBEpisodeNode(struct soap *soap, ns__DBEpisodeNode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DBEpisodeNode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult
#define SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDatesResult (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBEpisodeDatesResult(struct soap*, const char*, int, const ns__QueryDBEpisodeDatesResult *, const char*);
SOAP_FMAC3 ns__QueryDBEpisodeDatesResult * SOAP_FMAC4 soap_in_ns__QueryDBEpisodeDatesResult(struct soap*, const char*, ns__QueryDBEpisodeDatesResult *, const char*);

#ifndef soap_write_ns__QueryDBEpisodeDatesResult
#define soap_write_ns__QueryDBEpisodeDatesResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns:QueryDBEpisodeDatesResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__QueryDBEpisodeDatesResult * SOAP_FMAC4 soap_get_ns__QueryDBEpisodeDatesResult(struct soap*, ns__QueryDBEpisodeDatesResult *, const char*, const char*);

#ifndef soap_read_ns__QueryDBEpisodeDatesResult
#define soap_read_ns__QueryDBEpisodeDatesResult(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__QueryDBEpisodeDatesResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__QueryDBEpisodeDatesResult * SOAP_FMAC2 soap_instantiate_ns__QueryDBEpisodeDatesResult(struct soap*, int, const char*, const char*, size_t*);

inline ns__QueryDBEpisodeDatesResult * soap_new_ns__QueryDBEpisodeDatesResult(struct soap *soap, int n = -1) { return soap_instantiate_ns__QueryDBEpisodeDatesResult(soap, n, NULL, NULL, NULL); }

inline ns__QueryDBEpisodeDatesResult * soap_new_req_ns__QueryDBEpisodeDatesResult(struct soap *soap) { ns__QueryDBEpisodeDatesResult *_p = soap_instantiate_ns__QueryDBEpisodeDatesResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns__QueryDBEpisodeDatesResult * soap_new_set_ns__QueryDBEpisodeDatesResult(struct soap *soap, std::vector<short >& dates) { ns__QueryDBEpisodeDatesResult *_p = soap_instantiate_ns__QueryDBEpisodeDatesResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__QueryDBEpisodeDatesResult::dates = dates; } return _p; }

inline void soap_delete_ns__QueryDBEpisodeDatesResult(struct soap *soap, ns__QueryDBEpisodeDatesResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBEpisodeDatesResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult
#define SOAP_TYPE_tx_soap_ns__QueryDBTerminalResult (14)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBTerminalResult(struct soap*, const char*, int, const ns__QueryDBTerminalResult *, const char*);
SOAP_FMAC3 ns__QueryDBTerminalResult * SOAP_FMAC4 soap_in_ns__QueryDBTerminalResult(struct soap*, const char*, ns__QueryDBTerminalResult *, const char*);

#ifndef soap_write_ns__QueryDBTerminalResult
#define soap_write_ns__QueryDBTerminalResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns:QueryDBTerminalResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__QueryDBTerminalResult * SOAP_FMAC4 soap_get_ns__QueryDBTerminalResult(struct soap*, ns__QueryDBTerminalResult *, const char*, const char*);

#ifndef soap_read_ns__QueryDBTerminalResult
#define soap_read_ns__QueryDBTerminalResult(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__QueryDBTerminalResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__QueryDBTerminalResult * SOAP_FMAC2 soap_instantiate_ns__QueryDBTerminalResult(struct soap*, int, const char*, const char*, size_t*);

inline ns__QueryDBTerminalResult * soap_new_ns__QueryDBTerminalResult(struct soap *soap, int n = -1) { return soap_instantiate_ns__QueryDBTerminalResult(soap, n, NULL, NULL, NULL); }

inline ns__QueryDBTerminalResult * soap_new_req_ns__QueryDBTerminalResult(struct soap *soap) { ns__QueryDBTerminalResult *_p = soap_instantiate_ns__QueryDBTerminalResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns__QueryDBTerminalResult * soap_new_set_ns__QueryDBTerminalResult(struct soap *soap, std::vector<ns__DBTerminalNode >& terminals) { ns__QueryDBTerminalResult *_p = soap_instantiate_ns__QueryDBTerminalResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__QueryDBTerminalResult::terminals = terminals; } return _p; }

inline void soap_delete_ns__QueryDBTerminalResult(struct soap *soap, ns__QueryDBTerminalResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBTerminalResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__DBTerminalNode
#define SOAP_TYPE_tx_soap_ns__DBTerminalNode (13)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DBTerminalNode(struct soap*, const char*, int, const ns__DBTerminalNode *, const char*);
SOAP_FMAC3 ns__DBTerminalNode * SOAP_FMAC4 soap_in_ns__DBTerminalNode(struct soap*, const char*, ns__DBTerminalNode *, const char*);

#ifndef soap_write_ns__DBTerminalNode
#define soap_write_ns__DBTerminalNode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns:DBTerminalNode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__DBTerminalNode * SOAP_FMAC4 soap_get_ns__DBTerminalNode(struct soap*, ns__DBTerminalNode *, const char*, const char*);

#ifndef soap_read_ns__DBTerminalNode
#define soap_read_ns__DBTerminalNode(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__DBTerminalNode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__DBTerminalNode * SOAP_FMAC2 soap_instantiate_ns__DBTerminalNode(struct soap*, int, const char*, const char*, size_t*);

inline ns__DBTerminalNode * soap_new_ns__DBTerminalNode(struct soap *soap, int n = -1) { return soap_instantiate_ns__DBTerminalNode(soap, n, NULL, NULL, NULL); }

inline ns__DBTerminalNode * soap_new_req_ns__DBTerminalNode(struct soap *soap, std::string& uri, std::string& name) { ns__DBTerminalNode *_p = soap_instantiate_ns__DBTerminalNode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__DBTerminalNode::uri = uri; _p->ns__DBTerminalNode::name = name; } return _p; }

inline ns__DBTerminalNode * soap_new_set_ns__DBTerminalNode(struct soap *soap, std::string& uri, std::string& name) { ns__DBTerminalNode *_p = soap_instantiate_ns__DBTerminalNode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__DBTerminalNode::uri = uri; _p->ns__DBTerminalNode::name = name; } return _p; }

inline void soap_delete_ns__DBTerminalNode(struct soap *soap, ns__DBTerminalNode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DBTerminalNode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult
#define SOAP_TYPE_tx_soap_ns__QueryDBConferenceResult (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBConferenceResult(struct soap*, const char*, int, const ns__QueryDBConferenceResult *, const char*);
SOAP_FMAC3 ns__QueryDBConferenceResult * SOAP_FMAC4 soap_in_ns__QueryDBConferenceResult(struct soap*, const char*, ns__QueryDBConferenceResult *, const char*);

#ifndef soap_write_ns__QueryDBConferenceResult
#define soap_write_ns__QueryDBConferenceResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns:QueryDBConferenceResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__QueryDBConferenceResult * SOAP_FMAC4 soap_get_ns__QueryDBConferenceResult(struct soap*, ns__QueryDBConferenceResult *, const char*, const char*);

#ifndef soap_read_ns__QueryDBConferenceResult
#define soap_read_ns__QueryDBConferenceResult(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__QueryDBConferenceResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__QueryDBConferenceResult * SOAP_FMAC2 soap_instantiate_ns__QueryDBConferenceResult(struct soap*, int, const char*, const char*, size_t*);

inline ns__QueryDBConferenceResult * soap_new_ns__QueryDBConferenceResult(struct soap *soap, int n = -1) { return soap_instantiate_ns__QueryDBConferenceResult(soap, n, NULL, NULL, NULL); }

inline ns__QueryDBConferenceResult * soap_new_req_ns__QueryDBConferenceResult(struct soap *soap, int total, int offset) { ns__QueryDBConferenceResult *_p = soap_instantiate_ns__QueryDBConferenceResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__QueryDBConferenceResult::total = total; _p->ns__QueryDBConferenceResult::offset = offset; } return _p; }

inline ns__QueryDBConferenceResult * soap_new_set_ns__QueryDBConferenceResult(struct soap *soap, int total, int offset, std::vector<ns__DBConferenceNode >& conferences) { ns__QueryDBConferenceResult *_p = soap_instantiate_ns__QueryDBConferenceResult(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__QueryDBConferenceResult::total = total; _p->ns__QueryDBConferenceResult::offset = offset; _p->ns__QueryDBConferenceResult::conferences = conferences; } return _p; }

inline void soap_delete_ns__QueryDBConferenceResult(struct soap *soap, ns__QueryDBConferenceResult *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBConferenceResult(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__DBConferenceNode
#define SOAP_TYPE_tx_soap_ns__DBConferenceNode (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__DBConferenceNode(struct soap*, const char*, int, const ns__DBConferenceNode *, const char*);
SOAP_FMAC3 ns__DBConferenceNode * SOAP_FMAC4 soap_in_ns__DBConferenceNode(struct soap*, const char*, ns__DBConferenceNode *, const char*);

#ifndef soap_write_ns__DBConferenceNode
#define soap_write_ns__DBConferenceNode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns:DBConferenceNode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__DBConferenceNode * SOAP_FMAC4 soap_get_ns__DBConferenceNode(struct soap*, ns__DBConferenceNode *, const char*, const char*);

#ifndef soap_read_ns__DBConferenceNode
#define soap_read_ns__DBConferenceNode(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__DBConferenceNode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 ns__DBConferenceNode * SOAP_FMAC2 soap_instantiate_ns__DBConferenceNode(struct soap*, int, const char*, const char*, size_t*);

inline ns__DBConferenceNode * soap_new_ns__DBConferenceNode(struct soap *soap, int n = -1) { return soap_instantiate_ns__DBConferenceNode(soap, n, NULL, NULL, NULL); }

inline ns__DBConferenceNode * soap_new_req_ns__DBConferenceNode(struct soap *soap, int cid, std::string& title) { ns__DBConferenceNode *_p = soap_instantiate_ns__DBConferenceNode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__DBConferenceNode::cid = cid; _p->ns__DBConferenceNode::title = title; } return _p; }

inline ns__DBConferenceNode * soap_new_set_ns__DBConferenceNode(struct soap *soap, int cid, std::string& title) { ns__DBConferenceNode *_p = soap_instantiate_ns__DBConferenceNode(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns__DBConferenceNode::cid = cid; _p->ns__DBConferenceNode::title = title; } return _p; }

inline void soap_delete_ns__DBConferenceNode(struct soap *soap, ns__DBConferenceNode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__DBConferenceNode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_xsd__string
#define SOAP_TYPE_tx_soap_xsd__string (9)
#endif

#define soap_default_xsd__string(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__string
#define soap_write_xsd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__string(soap, data),0) || soap_put_xsd__string(soap, data, "xsd:string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__string
#define soap_read_xsd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__string soap_instantiate_std__string


#define soap_copy_xsd__string soap_copy_std__string

#ifndef SOAP_TYPE_tx_soap_std__string
#define SOAP_TYPE_tx_soap_std__string (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_tx_soap_SOAP_ENV__Fault
#define SOAP_TYPE_tx_soap_SOAP_ENV__Fault (69)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_SOAP_ENV__Fault(soap, data),0) || tx_soap::soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_tx_soap_SOAP_ENV__Reason
#define SOAP_TYPE_tx_soap_SOAP_ENV__Reason (68)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_SOAP_ENV__Reason(soap, data),0) || tx_soap::soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_tx_soap_SOAP_ENV__Detail
#define SOAP_TYPE_tx_soap_SOAP_ENV__Detail (65)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_SOAP_ENV__Detail(soap, data),0) || tx_soap::soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_tx_soap_SOAP_ENV__Code
#define SOAP_TYPE_tx_soap_SOAP_ENV__Code (63)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_SOAP_ENV__Code(soap, data),0) || tx_soap::soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_tx_soap_SOAP_ENV__Header
#define SOAP_TYPE_tx_soap_SOAP_ENV__Header (62)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_SOAP_ENV__Header(soap, data),0) || tx_soap::soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE_tx_soap_ns__GetRecordStatus
#define SOAP_TYPE_tx_soap_ns__GetRecordStatus (61)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__GetRecordStatus(struct soap*, struct ns__GetRecordStatus *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__GetRecordStatus(struct soap*, const struct ns__GetRecordStatus *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__GetRecordStatus(struct soap*, const char*, int, const struct ns__GetRecordStatus *, const char*);
SOAP_FMAC3 struct ns__GetRecordStatus * SOAP_FMAC4 soap_in_ns__GetRecordStatus(struct soap*, const char*, struct ns__GetRecordStatus *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__GetRecordStatus(struct soap*, const struct ns__GetRecordStatus *, const char*, const char*);

#ifndef soap_write_ns__GetRecordStatus
#define soap_write_ns__GetRecordStatus(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_ns__GetRecordStatus(soap, data),0) || tx_soap::soap_put_ns__GetRecordStatus(soap, data, "ns:GetRecordStatus", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__GetRecordStatus * SOAP_FMAC4 soap_get_ns__GetRecordStatus(struct soap*, struct ns__GetRecordStatus *, const char*, const char*);

#ifndef soap_read_ns__GetRecordStatus
#define soap_read_ns__GetRecordStatus(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__GetRecordStatus(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__GetRecordStatus * SOAP_FMAC2 soap_instantiate_ns__GetRecordStatus(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__GetRecordStatus * soap_new_ns__GetRecordStatus(struct soap *soap, int n = -1) { return soap_instantiate_ns__GetRecordStatus(soap, n, NULL, NULL, NULL); }

inline struct ns__GetRecordStatus * soap_new_req_ns__GetRecordStatus(struct soap *soap, std::string& focus, std::string& uri) { struct ns__GetRecordStatus *_p = soap_instantiate_ns__GetRecordStatus(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__GetRecordStatus(soap, _p); _p->focus = focus; _p->uri = uri; } return _p; }

inline struct ns__GetRecordStatus * soap_new_set_ns__GetRecordStatus(struct soap *soap, std::string& focus, std::string& uri) { struct ns__GetRecordStatus *_p = soap_instantiate_ns__GetRecordStatus(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__GetRecordStatus(soap, _p); _p->focus = focus; _p->uri = uri; } return _p; }

inline void soap_delete_ns__GetRecordStatus(struct soap *soap, struct ns__GetRecordStatus *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__GetRecordStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__StopRecord
#define SOAP_TYPE_tx_soap_ns__StopRecord (58)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__StopRecord(struct soap*, struct ns__StopRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__StopRecord(struct soap*, const struct ns__StopRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StopRecord(struct soap*, const char*, int, const struct ns__StopRecord *, const char*);
SOAP_FMAC3 struct ns__StopRecord * SOAP_FMAC4 soap_in_ns__StopRecord(struct soap*, const char*, struct ns__StopRecord *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__StopRecord(struct soap*, const struct ns__StopRecord *, const char*, const char*);

#ifndef soap_write_ns__StopRecord
#define soap_write_ns__StopRecord(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_ns__StopRecord(soap, data),0) || tx_soap::soap_put_ns__StopRecord(soap, data, "ns:StopRecord", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__StopRecord * SOAP_FMAC4 soap_get_ns__StopRecord(struct soap*, struct ns__StopRecord *, const char*, const char*);

#ifndef soap_read_ns__StopRecord
#define soap_read_ns__StopRecord(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__StopRecord(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__StopRecord * SOAP_FMAC2 soap_instantiate_ns__StopRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__StopRecord * soap_new_ns__StopRecord(struct soap *soap, int n = -1) { return soap_instantiate_ns__StopRecord(soap, n, NULL, NULL, NULL); }

inline struct ns__StopRecord * soap_new_req_ns__StopRecord(struct soap *soap, ns__StopRecordParam& param) { struct ns__StopRecord *_p = soap_instantiate_ns__StopRecord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__StopRecord(soap, _p); _p->param = param; } return _p; }

inline struct ns__StopRecord * soap_new_set_ns__StopRecord(struct soap *soap, ns__StopRecordParam& param) { struct ns__StopRecord *_p = soap_instantiate_ns__StopRecord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__StopRecord(soap, _p); _p->param = param; } return _p; }

inline void soap_delete_ns__StopRecord(struct soap *soap, struct ns__StopRecord *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__StopRecord(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__StopRecordResponse
#define SOAP_TYPE_tx_soap_ns__StopRecordResponse (57)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__StopRecordResponse(struct soap*, struct ns__StopRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__StopRecordResponse(struct soap*, const struct ns__StopRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StopRecordResponse(struct soap*, const char*, int, const struct ns__StopRecordResponse *, const char*);
SOAP_FMAC3 struct ns__StopRecordResponse * SOAP_FMAC4 soap_in_ns__StopRecordResponse(struct soap*, const char*, struct ns__StopRecordResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__StopRecordResponse(struct soap*, const struct ns__StopRecordResponse *, const char*, const char*);

#ifndef soap_write_ns__StopRecordResponse
#define soap_write_ns__StopRecordResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_ns__StopRecordResponse(soap, data),0) || tx_soap::soap_put_ns__StopRecordResponse(soap, data, "ns:StopRecordResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__StopRecordResponse * SOAP_FMAC4 soap_get_ns__StopRecordResponse(struct soap*, struct ns__StopRecordResponse *, const char*, const char*);

#ifndef soap_read_ns__StopRecordResponse
#define soap_read_ns__StopRecordResponse(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__StopRecordResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__StopRecordResponse * SOAP_FMAC2 soap_instantiate_ns__StopRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__StopRecordResponse * soap_new_ns__StopRecordResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__StopRecordResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__StopRecordResponse * soap_new_req_ns__StopRecordResponse(struct soap *soap) { struct ns__StopRecordResponse *_p = soap_instantiate_ns__StopRecordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__StopRecordResponse(soap, _p); } return _p; }

inline struct ns__StopRecordResponse * soap_new_set_ns__StopRecordResponse(struct soap *soap, int *result) { struct ns__StopRecordResponse *_p = soap_instantiate_ns__StopRecordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__StopRecordResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__StopRecordResponse(struct soap *soap, struct ns__StopRecordResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__StopRecordResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__StartRecord
#define SOAP_TYPE_tx_soap_ns__StartRecord (55)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__StartRecord(struct soap*, struct ns__StartRecord *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__StartRecord(struct soap*, const struct ns__StartRecord *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StartRecord(struct soap*, const char*, int, const struct ns__StartRecord *, const char*);
SOAP_FMAC3 struct ns__StartRecord * SOAP_FMAC4 soap_in_ns__StartRecord(struct soap*, const char*, struct ns__StartRecord *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__StartRecord(struct soap*, const struct ns__StartRecord *, const char*, const char*);

#ifndef soap_write_ns__StartRecord
#define soap_write_ns__StartRecord(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_ns__StartRecord(soap, data),0) || tx_soap::soap_put_ns__StartRecord(soap, data, "ns:StartRecord", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__StartRecord * SOAP_FMAC4 soap_get_ns__StartRecord(struct soap*, struct ns__StartRecord *, const char*, const char*);

#ifndef soap_read_ns__StartRecord
#define soap_read_ns__StartRecord(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__StartRecord(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__StartRecord * SOAP_FMAC2 soap_instantiate_ns__StartRecord(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__StartRecord * soap_new_ns__StartRecord(struct soap *soap, int n = -1) { return soap_instantiate_ns__StartRecord(soap, n, NULL, NULL, NULL); }

inline struct ns__StartRecord * soap_new_req_ns__StartRecord(struct soap *soap, ns__StartRecordParam& param) { struct ns__StartRecord *_p = soap_instantiate_ns__StartRecord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__StartRecord(soap, _p); _p->param = param; } return _p; }

inline struct ns__StartRecord * soap_new_set_ns__StartRecord(struct soap *soap, ns__StartRecordParam& param) { struct ns__StartRecord *_p = soap_instantiate_ns__StartRecord(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__StartRecord(soap, _p); _p->param = param; } return _p; }

inline void soap_delete_ns__StartRecord(struct soap *soap, struct ns__StartRecord *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__StartRecord(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__StartRecordResponse
#define SOAP_TYPE_tx_soap_ns__StartRecordResponse (54)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__StartRecordResponse(struct soap*, struct ns__StartRecordResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__StartRecordResponse(struct soap*, const struct ns__StartRecordResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__StartRecordResponse(struct soap*, const char*, int, const struct ns__StartRecordResponse *, const char*);
SOAP_FMAC3 struct ns__StartRecordResponse * SOAP_FMAC4 soap_in_ns__StartRecordResponse(struct soap*, const char*, struct ns__StartRecordResponse *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__StartRecordResponse(struct soap*, const struct ns__StartRecordResponse *, const char*, const char*);

#ifndef soap_write_ns__StartRecordResponse
#define soap_write_ns__StartRecordResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_ns__StartRecordResponse(soap, data),0) || tx_soap::soap_put_ns__StartRecordResponse(soap, data, "ns:StartRecordResponse", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__StartRecordResponse * SOAP_FMAC4 soap_get_ns__StartRecordResponse(struct soap*, struct ns__StartRecordResponse *, const char*, const char*);

#ifndef soap_read_ns__StartRecordResponse
#define soap_read_ns__StartRecordResponse(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__StartRecordResponse(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__StartRecordResponse * SOAP_FMAC2 soap_instantiate_ns__StartRecordResponse(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__StartRecordResponse * soap_new_ns__StartRecordResponse(struct soap *soap, int n = -1) { return soap_instantiate_ns__StartRecordResponse(soap, n, NULL, NULL, NULL); }

inline struct ns__StartRecordResponse * soap_new_req_ns__StartRecordResponse(struct soap *soap) { struct ns__StartRecordResponse *_p = soap_instantiate_ns__StartRecordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__StartRecordResponse(soap, _p); } return _p; }

inline struct ns__StartRecordResponse * soap_new_set_ns__StartRecordResponse(struct soap *soap, int *result) { struct ns__StartRecordResponse *_p = soap_instantiate_ns__StartRecordResponse(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__StartRecordResponse(soap, _p); _p->result = result; } return _p; }

inline void soap_delete_ns__StartRecordResponse(struct soap *soap, struct ns__StartRecordResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__StartRecordResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__QueryDBView
#define SOAP_TYPE_tx_soap_ns__QueryDBView (44)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryDBView(struct soap*, struct ns__QueryDBView *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryDBView(struct soap*, const struct ns__QueryDBView *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBView(struct soap*, const char*, int, const struct ns__QueryDBView *, const char*);
SOAP_FMAC3 struct ns__QueryDBView * SOAP_FMAC4 soap_in_ns__QueryDBView(struct soap*, const char*, struct ns__QueryDBView *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryDBView(struct soap*, const struct ns__QueryDBView *, const char*, const char*);

#ifndef soap_write_ns__QueryDBView
#define soap_write_ns__QueryDBView(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_ns__QueryDBView(soap, data),0) || tx_soap::soap_put_ns__QueryDBView(soap, data, "ns:QueryDBView", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__QueryDBView * SOAP_FMAC4 soap_get_ns__QueryDBView(struct soap*, struct ns__QueryDBView *, const char*, const char*);

#ifndef soap_read_ns__QueryDBView
#define soap_read_ns__QueryDBView(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__QueryDBView(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__QueryDBView * SOAP_FMAC2 soap_instantiate_ns__QueryDBView(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__QueryDBView * soap_new_ns__QueryDBView(struct soap *soap, int n = -1) { return soap_instantiate_ns__QueryDBView(soap, n, NULL, NULL, NULL); }

inline struct ns__QueryDBView * soap_new_req_ns__QueryDBView(struct soap *soap, LONG64 eid) { struct ns__QueryDBView *_p = soap_instantiate_ns__QueryDBView(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__QueryDBView(soap, _p); _p->eid = eid; } return _p; }

inline struct ns__QueryDBView * soap_new_set_ns__QueryDBView(struct soap *soap, LONG64 eid) { struct ns__QueryDBView *_p = soap_instantiate_ns__QueryDBView(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__QueryDBView(soap, _p); _p->eid = eid; } return _p; }

inline void soap_delete_ns__QueryDBView(struct soap *soap, struct ns__QueryDBView *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBView(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTime
#define SOAP_TYPE_tx_soap_ns__QueryDBEpisodeByTime (41)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryDBEpisodeByTime(struct soap*, struct ns__QueryDBEpisodeByTime *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryDBEpisodeByTime(struct soap*, const struct ns__QueryDBEpisodeByTime *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBEpisodeByTime(struct soap*, const char*, int, const struct ns__QueryDBEpisodeByTime *, const char*);
SOAP_FMAC3 struct ns__QueryDBEpisodeByTime * SOAP_FMAC4 soap_in_ns__QueryDBEpisodeByTime(struct soap*, const char*, struct ns__QueryDBEpisodeByTime *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryDBEpisodeByTime(struct soap*, const struct ns__QueryDBEpisodeByTime *, const char*, const char*);

#ifndef soap_write_ns__QueryDBEpisodeByTime
#define soap_write_ns__QueryDBEpisodeByTime(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_ns__QueryDBEpisodeByTime(soap, data),0) || tx_soap::soap_put_ns__QueryDBEpisodeByTime(soap, data, "ns:QueryDBEpisodeByTime", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__QueryDBEpisodeByTime * SOAP_FMAC4 soap_get_ns__QueryDBEpisodeByTime(struct soap*, struct ns__QueryDBEpisodeByTime *, const char*, const char*);

#ifndef soap_read_ns__QueryDBEpisodeByTime
#define soap_read_ns__QueryDBEpisodeByTime(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__QueryDBEpisodeByTime(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__QueryDBEpisodeByTime * SOAP_FMAC2 soap_instantiate_ns__QueryDBEpisodeByTime(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__QueryDBEpisodeByTime * soap_new_ns__QueryDBEpisodeByTime(struct soap *soap, int n = -1) { return soap_instantiate_ns__QueryDBEpisodeByTime(soap, n, NULL, NULL, NULL); }

inline struct ns__QueryDBEpisodeByTime * soap_new_req_ns__QueryDBEpisodeByTime(struct soap *soap, int cid, std::string& uri, LONG64 start, LONG64 end) { struct ns__QueryDBEpisodeByTime *_p = soap_instantiate_ns__QueryDBEpisodeByTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__QueryDBEpisodeByTime(soap, _p); _p->cid = cid; _p->uri = uri; _p->start = start; _p->end = end; } return _p; }

inline struct ns__QueryDBEpisodeByTime * soap_new_set_ns__QueryDBEpisodeByTime(struct soap *soap, int cid, std::string& uri, LONG64 start, LONG64 end) { struct ns__QueryDBEpisodeByTime *_p = soap_instantiate_ns__QueryDBEpisodeByTime(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__QueryDBEpisodeByTime(soap, _p); _p->cid = cid; _p->uri = uri; _p->start = start; _p->end = end; } return _p; }

inline void soap_delete_ns__QueryDBEpisodeByTime(struct soap *soap, struct ns__QueryDBEpisodeByTime *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBEpisodeByTime(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__QueryDBEpisode
#define SOAP_TYPE_tx_soap_ns__QueryDBEpisode (39)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryDBEpisode(struct soap*, struct ns__QueryDBEpisode *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryDBEpisode(struct soap*, const struct ns__QueryDBEpisode *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBEpisode(struct soap*, const char*, int, const struct ns__QueryDBEpisode *, const char*);
SOAP_FMAC3 struct ns__QueryDBEpisode * SOAP_FMAC4 soap_in_ns__QueryDBEpisode(struct soap*, const char*, struct ns__QueryDBEpisode *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryDBEpisode(struct soap*, const struct ns__QueryDBEpisode *, const char*, const char*);

#ifndef soap_write_ns__QueryDBEpisode
#define soap_write_ns__QueryDBEpisode(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_ns__QueryDBEpisode(soap, data),0) || tx_soap::soap_put_ns__QueryDBEpisode(soap, data, "ns:QueryDBEpisode", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__QueryDBEpisode * SOAP_FMAC4 soap_get_ns__QueryDBEpisode(struct soap*, struct ns__QueryDBEpisode *, const char*, const char*);

#ifndef soap_read_ns__QueryDBEpisode
#define soap_read_ns__QueryDBEpisode(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__QueryDBEpisode(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__QueryDBEpisode * SOAP_FMAC2 soap_instantiate_ns__QueryDBEpisode(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__QueryDBEpisode * soap_new_ns__QueryDBEpisode(struct soap *soap, int n = -1) { return soap_instantiate_ns__QueryDBEpisode(soap, n, NULL, NULL, NULL); }

inline struct ns__QueryDBEpisode * soap_new_req_ns__QueryDBEpisode(struct soap *soap, int cid, std::string& uri, int offset, int count) { struct ns__QueryDBEpisode *_p = soap_instantiate_ns__QueryDBEpisode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__QueryDBEpisode(soap, _p); _p->cid = cid; _p->uri = uri; _p->offset = offset; _p->count = count; } return _p; }

inline struct ns__QueryDBEpisode * soap_new_set_ns__QueryDBEpisode(struct soap *soap, int cid, std::string& uri, int offset, int count) { struct ns__QueryDBEpisode *_p = soap_instantiate_ns__QueryDBEpisode(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__QueryDBEpisode(soap, _p); _p->cid = cid; _p->uri = uri; _p->offset = offset; _p->count = count; } return _p; }

inline void soap_delete_ns__QueryDBEpisode(struct soap *soap, struct ns__QueryDBEpisode *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBEpisode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDates
#define SOAP_TYPE_tx_soap_ns__QueryDBEpisodeDates (36)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryDBEpisodeDates(struct soap*, struct ns__QueryDBEpisodeDates *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryDBEpisodeDates(struct soap*, const struct ns__QueryDBEpisodeDates *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBEpisodeDates(struct soap*, const char*, int, const struct ns__QueryDBEpisodeDates *, const char*);
SOAP_FMAC3 struct ns__QueryDBEpisodeDates * SOAP_FMAC4 soap_in_ns__QueryDBEpisodeDates(struct soap*, const char*, struct ns__QueryDBEpisodeDates *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryDBEpisodeDates(struct soap*, const struct ns__QueryDBEpisodeDates *, const char*, const char*);

#ifndef soap_write_ns__QueryDBEpisodeDates
#define soap_write_ns__QueryDBEpisodeDates(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_ns__QueryDBEpisodeDates(soap, data),0) || tx_soap::soap_put_ns__QueryDBEpisodeDates(soap, data, "ns:QueryDBEpisodeDates", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__QueryDBEpisodeDates * SOAP_FMAC4 soap_get_ns__QueryDBEpisodeDates(struct soap*, struct ns__QueryDBEpisodeDates *, const char*, const char*);

#ifndef soap_read_ns__QueryDBEpisodeDates
#define soap_read_ns__QueryDBEpisodeDates(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__QueryDBEpisodeDates(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__QueryDBEpisodeDates * SOAP_FMAC2 soap_instantiate_ns__QueryDBEpisodeDates(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__QueryDBEpisodeDates * soap_new_ns__QueryDBEpisodeDates(struct soap *soap, int n = -1) { return soap_instantiate_ns__QueryDBEpisodeDates(soap, n, NULL, NULL, NULL); }

inline struct ns__QueryDBEpisodeDates * soap_new_req_ns__QueryDBEpisodeDates(struct soap *soap, int cid, std::string& uri) { struct ns__QueryDBEpisodeDates *_p = soap_instantiate_ns__QueryDBEpisodeDates(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__QueryDBEpisodeDates(soap, _p); _p->cid = cid; _p->uri = uri; } return _p; }

inline struct ns__QueryDBEpisodeDates * soap_new_set_ns__QueryDBEpisodeDates(struct soap *soap, int cid, std::string& uri) { struct ns__QueryDBEpisodeDates *_p = soap_instantiate_ns__QueryDBEpisodeDates(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__QueryDBEpisodeDates(soap, _p); _p->cid = cid; _p->uri = uri; } return _p; }

inline void soap_delete_ns__QueryDBEpisodeDates(struct soap *soap, struct ns__QueryDBEpisodeDates *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBEpisodeDates(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__QueryDBTerminal
#define SOAP_TYPE_tx_soap_ns__QueryDBTerminal (33)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryDBTerminal(struct soap*, struct ns__QueryDBTerminal *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryDBTerminal(struct soap*, const struct ns__QueryDBTerminal *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBTerminal(struct soap*, const char*, int, const struct ns__QueryDBTerminal *, const char*);
SOAP_FMAC3 struct ns__QueryDBTerminal * SOAP_FMAC4 soap_in_ns__QueryDBTerminal(struct soap*, const char*, struct ns__QueryDBTerminal *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryDBTerminal(struct soap*, const struct ns__QueryDBTerminal *, const char*, const char*);

#ifndef soap_write_ns__QueryDBTerminal
#define soap_write_ns__QueryDBTerminal(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_ns__QueryDBTerminal(soap, data),0) || tx_soap::soap_put_ns__QueryDBTerminal(soap, data, "ns:QueryDBTerminal", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__QueryDBTerminal * SOAP_FMAC4 soap_get_ns__QueryDBTerminal(struct soap*, struct ns__QueryDBTerminal *, const char*, const char*);

#ifndef soap_read_ns__QueryDBTerminal
#define soap_read_ns__QueryDBTerminal(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__QueryDBTerminal(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__QueryDBTerminal * SOAP_FMAC2 soap_instantiate_ns__QueryDBTerminal(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__QueryDBTerminal * soap_new_ns__QueryDBTerminal(struct soap *soap, int n = -1) { return soap_instantiate_ns__QueryDBTerminal(soap, n, NULL, NULL, NULL); }

inline struct ns__QueryDBTerminal * soap_new_req_ns__QueryDBTerminal(struct soap *soap, int cid) { struct ns__QueryDBTerminal *_p = soap_instantiate_ns__QueryDBTerminal(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__QueryDBTerminal(soap, _p); _p->cid = cid; } return _p; }

inline struct ns__QueryDBTerminal * soap_new_set_ns__QueryDBTerminal(struct soap *soap, int cid) { struct ns__QueryDBTerminal *_p = soap_instantiate_ns__QueryDBTerminal(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__QueryDBTerminal(soap, _p); _p->cid = cid; } return _p; }

inline void soap_delete_ns__QueryDBTerminal(struct soap *soap, struct ns__QueryDBTerminal *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBTerminal(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_ns__QueryDBConference
#define SOAP_TYPE_tx_soap_ns__QueryDBConference (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns__QueryDBConference(struct soap*, struct ns__QueryDBConference *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns__QueryDBConference(struct soap*, const struct ns__QueryDBConference *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns__QueryDBConference(struct soap*, const char*, int, const struct ns__QueryDBConference *, const char*);
SOAP_FMAC3 struct ns__QueryDBConference * SOAP_FMAC4 soap_in_ns__QueryDBConference(struct soap*, const char*, struct ns__QueryDBConference *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns__QueryDBConference(struct soap*, const struct ns__QueryDBConference *, const char*, const char*);

#ifndef soap_write_ns__QueryDBConference
#define soap_write_ns__QueryDBConference(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_ns__QueryDBConference(soap, data),0) || tx_soap::soap_put_ns__QueryDBConference(soap, data, "ns:QueryDBConference", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns__QueryDBConference * SOAP_FMAC4 soap_get_ns__QueryDBConference(struct soap*, struct ns__QueryDBConference *, const char*, const char*);

#ifndef soap_read_ns__QueryDBConference
#define soap_read_ns__QueryDBConference(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_ns__QueryDBConference(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct ns__QueryDBConference * SOAP_FMAC2 soap_instantiate_ns__QueryDBConference(struct soap*, int, const char*, const char*, size_t*);

inline struct ns__QueryDBConference * soap_new_ns__QueryDBConference(struct soap *soap, int n = -1) { return soap_instantiate_ns__QueryDBConference(soap, n, NULL, NULL, NULL); }

inline struct ns__QueryDBConference * soap_new_req_ns__QueryDBConference(struct soap *soap, int offset, int count) { struct ns__QueryDBConference *_p = soap_instantiate_ns__QueryDBConference(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__QueryDBConference(soap, _p); _p->offset = offset; _p->count = count; } return _p; }

inline struct ns__QueryDBConference * soap_new_set_ns__QueryDBConference(struct soap *soap, int offset, int count) { struct ns__QueryDBConference *_p = soap_instantiate_ns__QueryDBConference(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_ns__QueryDBConference(soap, _p); _p->offset = offset; _p->count = count; } return _p; }

inline void soap_delete_ns__QueryDBConference(struct soap *soap, struct ns__QueryDBConference *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns__QueryDBConference(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_tx_soap_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_tx_soap_PointerToSOAP_ENV__Reason (71)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || tx_soap::soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_tx_soap_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_tx_soap_PointerToSOAP_ENV__Detail (70)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || tx_soap::soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_tx_soap_PointerToSOAP_ENV__Code
#define SOAP_TYPE_tx_soap_PointerToSOAP_ENV__Code (64)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || tx_soap::soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_tx_soap_PointerTons__GetRecordStatusResult
#define SOAP_TYPE_tx_soap_PointerTons__GetRecordStatusResult (59)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__GetRecordStatusResult(struct soap*, ns__GetRecordStatusResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__GetRecordStatusResult(struct soap*, const char *, int, ns__GetRecordStatusResult *const*, const char *);
SOAP_FMAC3 ns__GetRecordStatusResult ** SOAP_FMAC4 soap_in_PointerTons__GetRecordStatusResult(struct soap*, const char*, ns__GetRecordStatusResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__GetRecordStatusResult(struct soap*, ns__GetRecordStatusResult *const*, const char*, const char*);

#ifndef soap_write_PointerTons__GetRecordStatusResult
#define soap_write_PointerTons__GetRecordStatusResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_PointerTons__GetRecordStatusResult(soap, data),0) || tx_soap::soap_put_PointerTons__GetRecordStatusResult(soap, data, "ns:GetRecordStatusResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__GetRecordStatusResult ** SOAP_FMAC4 soap_get_PointerTons__GetRecordStatusResult(struct soap*, ns__GetRecordStatusResult **, const char*, const char*);

#ifndef soap_read_PointerTons__GetRecordStatusResult
#define soap_read_PointerTons__GetRecordStatusResult(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_PointerTons__GetRecordStatusResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap_PointerToint
#define SOAP_TYPE_tx_soap_PointerToint (52)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);

#ifndef soap_write_PointerToint
#define soap_write_PointerToint(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_PointerToint(soap, data),0) || tx_soap::soap_put_PointerToint(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);

#ifndef soap_read_PointerToint
#define soap_read_PointerToint(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_PointerToint(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap_PointerTons__QueryDBViewResult
#define SOAP_TYPE_tx_soap_PointerTons__QueryDBViewResult (42)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__QueryDBViewResult(struct soap*, ns__QueryDBViewResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__QueryDBViewResult(struct soap*, const char *, int, ns__QueryDBViewResult *const*, const char *);
SOAP_FMAC3 ns__QueryDBViewResult ** SOAP_FMAC4 soap_in_PointerTons__QueryDBViewResult(struct soap*, const char*, ns__QueryDBViewResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__QueryDBViewResult(struct soap*, ns__QueryDBViewResult *const*, const char*, const char*);

#ifndef soap_write_PointerTons__QueryDBViewResult
#define soap_write_PointerTons__QueryDBViewResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_PointerTons__QueryDBViewResult(soap, data),0) || tx_soap::soap_put_PointerTons__QueryDBViewResult(soap, data, "ns:QueryDBViewResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__QueryDBViewResult ** SOAP_FMAC4 soap_get_PointerTons__QueryDBViewResult(struct soap*, ns__QueryDBViewResult **, const char*, const char*);

#ifndef soap_read_PointerTons__QueryDBViewResult
#define soap_read_PointerTons__QueryDBViewResult(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_PointerTons__QueryDBViewResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap_PointerTons__QueryDBEpisodeResult
#define SOAP_TYPE_tx_soap_PointerTons__QueryDBEpisodeResult (37)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__QueryDBEpisodeResult(struct soap*, ns__QueryDBEpisodeResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__QueryDBEpisodeResult(struct soap*, const char *, int, ns__QueryDBEpisodeResult *const*, const char *);
SOAP_FMAC3 ns__QueryDBEpisodeResult ** SOAP_FMAC4 soap_in_PointerTons__QueryDBEpisodeResult(struct soap*, const char*, ns__QueryDBEpisodeResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__QueryDBEpisodeResult(struct soap*, ns__QueryDBEpisodeResult *const*, const char*, const char*);

#ifndef soap_write_PointerTons__QueryDBEpisodeResult
#define soap_write_PointerTons__QueryDBEpisodeResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_PointerTons__QueryDBEpisodeResult(soap, data),0) || tx_soap::soap_put_PointerTons__QueryDBEpisodeResult(soap, data, "ns:QueryDBEpisodeResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__QueryDBEpisodeResult ** SOAP_FMAC4 soap_get_PointerTons__QueryDBEpisodeResult(struct soap*, ns__QueryDBEpisodeResult **, const char*, const char*);

#ifndef soap_read_PointerTons__QueryDBEpisodeResult
#define soap_read_PointerTons__QueryDBEpisodeResult(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_PointerTons__QueryDBEpisodeResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap_PointerTons__QueryDBEpisodeDatesResult
#define SOAP_TYPE_tx_soap_PointerTons__QueryDBEpisodeDatesResult (34)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__QueryDBEpisodeDatesResult(struct soap*, ns__QueryDBEpisodeDatesResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__QueryDBEpisodeDatesResult(struct soap*, const char *, int, ns__QueryDBEpisodeDatesResult *const*, const char *);
SOAP_FMAC3 ns__QueryDBEpisodeDatesResult ** SOAP_FMAC4 soap_in_PointerTons__QueryDBEpisodeDatesResult(struct soap*, const char*, ns__QueryDBEpisodeDatesResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__QueryDBEpisodeDatesResult(struct soap*, ns__QueryDBEpisodeDatesResult *const*, const char*, const char*);

#ifndef soap_write_PointerTons__QueryDBEpisodeDatesResult
#define soap_write_PointerTons__QueryDBEpisodeDatesResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_PointerTons__QueryDBEpisodeDatesResult(soap, data),0) || tx_soap::soap_put_PointerTons__QueryDBEpisodeDatesResult(soap, data, "ns:QueryDBEpisodeDatesResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__QueryDBEpisodeDatesResult ** SOAP_FMAC4 soap_get_PointerTons__QueryDBEpisodeDatesResult(struct soap*, ns__QueryDBEpisodeDatesResult **, const char*, const char*);

#ifndef soap_read_PointerTons__QueryDBEpisodeDatesResult
#define soap_read_PointerTons__QueryDBEpisodeDatesResult(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_PointerTons__QueryDBEpisodeDatesResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap_PointerTons__QueryDBTerminalResult
#define SOAP_TYPE_tx_soap_PointerTons__QueryDBTerminalResult (31)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__QueryDBTerminalResult(struct soap*, ns__QueryDBTerminalResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__QueryDBTerminalResult(struct soap*, const char *, int, ns__QueryDBTerminalResult *const*, const char *);
SOAP_FMAC3 ns__QueryDBTerminalResult ** SOAP_FMAC4 soap_in_PointerTons__QueryDBTerminalResult(struct soap*, const char*, ns__QueryDBTerminalResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__QueryDBTerminalResult(struct soap*, ns__QueryDBTerminalResult *const*, const char*, const char*);

#ifndef soap_write_PointerTons__QueryDBTerminalResult
#define soap_write_PointerTons__QueryDBTerminalResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_PointerTons__QueryDBTerminalResult(soap, data),0) || tx_soap::soap_put_PointerTons__QueryDBTerminalResult(soap, data, "ns:QueryDBTerminalResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__QueryDBTerminalResult ** SOAP_FMAC4 soap_get_PointerTons__QueryDBTerminalResult(struct soap*, ns__QueryDBTerminalResult **, const char*, const char*);

#ifndef soap_read_PointerTons__QueryDBTerminalResult
#define soap_read_PointerTons__QueryDBTerminalResult(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_PointerTons__QueryDBTerminalResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap_PointerTons__QueryDBConferenceResult
#define SOAP_TYPE_tx_soap_PointerTons__QueryDBConferenceResult (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons__QueryDBConferenceResult(struct soap*, ns__QueryDBConferenceResult *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons__QueryDBConferenceResult(struct soap*, const char *, int, ns__QueryDBConferenceResult *const*, const char *);
SOAP_FMAC3 ns__QueryDBConferenceResult ** SOAP_FMAC4 soap_in_PointerTons__QueryDBConferenceResult(struct soap*, const char*, ns__QueryDBConferenceResult **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons__QueryDBConferenceResult(struct soap*, ns__QueryDBConferenceResult *const*, const char*, const char*);

#ifndef soap_write_PointerTons__QueryDBConferenceResult
#define soap_write_PointerTons__QueryDBConferenceResult(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_PointerTons__QueryDBConferenceResult(soap, data),0) || tx_soap::soap_put_PointerTons__QueryDBConferenceResult(soap, data, "ns:QueryDBConferenceResult", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 ns__QueryDBConferenceResult ** SOAP_FMAC4 soap_get_PointerTons__QueryDBConferenceResult(struct soap*, ns__QueryDBConferenceResult **, const char*, const char*);

#ifndef soap_read_PointerTons__QueryDBConferenceResult
#define soap_read_PointerTons__QueryDBConferenceResult(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_PointerTons__QueryDBConferenceResult(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap__QName
#define SOAP_TYPE_tx_soap__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize__QName(soap, data),0) || tx_soap::soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap_string
#define SOAP_TYPE_tx_soap_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (tx_soap::soap_serialize_string(soap, data),0) || tx_soap::soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !tx_soap::soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_tx_soap_std__vectorTemplateOfns__RecordTerminalStatus
#define SOAP_TYPE_tx_soap_std__vectorTemplateOfns__RecordTerminalStatus (51)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__RecordTerminalStatus(struct soap*, std::vector<ns__RecordTerminalStatus >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__RecordTerminalStatus(struct soap*, const std::vector<ns__RecordTerminalStatus >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__RecordTerminalStatus(struct soap*, const char*, int, const std::vector<ns__RecordTerminalStatus >*, const char*);
SOAP_FMAC3 std::vector<ns__RecordTerminalStatus >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns__RecordTerminalStatus(struct soap*, const char*, std::vector<ns__RecordTerminalStatus >*, const char*);
SOAP_FMAC1 std::vector<ns__RecordTerminalStatus > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__RecordTerminalStatus(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__RecordTerminalStatus > * soap_new_std__vectorTemplateOfns__RecordTerminalStatus(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns__RecordTerminalStatus(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns__RecordTerminalStatus(struct soap *soap, std::vector<ns__RecordTerminalStatus >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns__RecordTerminalStatus(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBViewNode
#define SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBViewNode (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__DBViewNode(struct soap*, std::vector<ns__DBViewNode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__DBViewNode(struct soap*, const std::vector<ns__DBViewNode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__DBViewNode(struct soap*, const char*, int, const std::vector<ns__DBViewNode >*, const char*);
SOAP_FMAC3 std::vector<ns__DBViewNode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns__DBViewNode(struct soap*, const char*, std::vector<ns__DBViewNode >*, const char*);
SOAP_FMAC1 std::vector<ns__DBViewNode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__DBViewNode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__DBViewNode > * soap_new_std__vectorTemplateOfns__DBViewNode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns__DBViewNode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns__DBViewNode(struct soap *soap, std::vector<ns__DBViewNode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns__DBViewNode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBEpisodeNode
#define SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBEpisodeNode (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__DBEpisodeNode(struct soap*, std::vector<ns__DBEpisodeNode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__DBEpisodeNode(struct soap*, const std::vector<ns__DBEpisodeNode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__DBEpisodeNode(struct soap*, const char*, int, const std::vector<ns__DBEpisodeNode >*, const char*);
SOAP_FMAC3 std::vector<ns__DBEpisodeNode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns__DBEpisodeNode(struct soap*, const char*, std::vector<ns__DBEpisodeNode >*, const char*);
SOAP_FMAC1 std::vector<ns__DBEpisodeNode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__DBEpisodeNode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__DBEpisodeNode > * soap_new_std__vectorTemplateOfns__DBEpisodeNode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns__DBEpisodeNode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns__DBEpisodeNode(struct soap *soap, std::vector<ns__DBEpisodeNode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns__DBEpisodeNode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_std__vectorTemplateOfshort
#define SOAP_TYPE_tx_soap_std__vectorTemplateOfshort (18)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfshort(struct soap*, std::vector<short >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfshort(struct soap*, const std::vector<short >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfshort(struct soap*, const char*, int, const std::vector<short >*, const char*);
SOAP_FMAC3 std::vector<short >* SOAP_FMAC4 soap_in_std__vectorTemplateOfshort(struct soap*, const char*, std::vector<short >*, const char*);
SOAP_FMAC1 std::vector<short > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfshort(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<short > * soap_new_std__vectorTemplateOfshort(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfshort(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfshort(struct soap *soap, std::vector<short >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfshort(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBTerminalNode
#define SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBTerminalNode (15)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__DBTerminalNode(struct soap*, std::vector<ns__DBTerminalNode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__DBTerminalNode(struct soap*, const std::vector<ns__DBTerminalNode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__DBTerminalNode(struct soap*, const char*, int, const std::vector<ns__DBTerminalNode >*, const char*);
SOAP_FMAC3 std::vector<ns__DBTerminalNode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns__DBTerminalNode(struct soap*, const char*, std::vector<ns__DBTerminalNode >*, const char*);
SOAP_FMAC1 std::vector<ns__DBTerminalNode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__DBTerminalNode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__DBTerminalNode > * soap_new_std__vectorTemplateOfns__DBTerminalNode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns__DBTerminalNode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns__DBTerminalNode(struct soap *soap, std::vector<ns__DBTerminalNode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns__DBTerminalNode(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBConferenceNode
#define SOAP_TYPE_tx_soap_std__vectorTemplateOfns__DBConferenceNode (12)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfns__DBConferenceNode(struct soap*, std::vector<ns__DBConferenceNode >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfns__DBConferenceNode(struct soap*, const std::vector<ns__DBConferenceNode >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfns__DBConferenceNode(struct soap*, const char*, int, const std::vector<ns__DBConferenceNode >*, const char*);
SOAP_FMAC3 std::vector<ns__DBConferenceNode >* SOAP_FMAC4 soap_in_std__vectorTemplateOfns__DBConferenceNode(struct soap*, const char*, std::vector<ns__DBConferenceNode >*, const char*);
SOAP_FMAC1 std::vector<ns__DBConferenceNode > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfns__DBConferenceNode(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns__DBConferenceNode > * soap_new_std__vectorTemplateOfns__DBConferenceNode(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfns__DBConferenceNode(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfns__DBConferenceNode(struct soap *soap, std::vector<ns__DBConferenceNode >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfns__DBConferenceNode(struct soap*, int, int, void*, size_t, const void*, size_t);

} // namespace tx_soap


#endif

/* End of tx_soapH.h */
