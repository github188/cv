/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp com.dcampus.coolview.im.jabber.xml -c CvMsgAccountProxy -p accountproxy.h:accountproxy.cpp
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ACCOUNTPROXY_H_1293770605
#define ACCOUNTPROXY_H_1293770605

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.dcampus.coolview.im.jabber
 */
class CvMsgAccountProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.dcampus.coolview.im.jabber"; }

public:
    CvMsgAccountProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~CvMsgAccountProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> acceptSubscription(const QString &jid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(jid);
        return asyncCallWithArgumentList(QLatin1String("acceptSubscription"), argumentList);
    }

    inline QDBusPendingReply<> groupChatChangeNick(const QString &host, const QString &room, const QString &nick, int status)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(host) << qVariantFromValue(room) << qVariantFromValue(nick) << qVariantFromValue(status);
        return asyncCallWithArgumentList(QLatin1String("groupChatChangeNick"), argumentList);
    }

    inline QDBusPendingReply<> groupChatInvite(const QString &room, const QString &jid, const QString &msg)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(room) << qVariantFromValue(jid) << qVariantFromValue(msg);
        return asyncCallWithArgumentList(QLatin1String("groupChatInvite"), argumentList);
    }

    inline QDBusPendingReply<bool> groupChatJoin(const QString &host, const QString &room, const QString &nick)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(host) << qVariantFromValue(room) << qVariantFromValue(nick);
        return asyncCallWithArgumentList(QLatin1String("groupChatJoin"), argumentList);
    }

    inline QDBusPendingReply<bool> groupChatJoin(const QString &host, const QString &room, const QString &nick, const QString &password)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(host) << qVariantFromValue(room) << qVariantFromValue(nick) << qVariantFromValue(password);
        return asyncCallWithArgumentList(QLatin1String("groupChatJoin"), argumentList);
    }

    inline QDBusPendingReply<bool> groupChatJoin(const QString &host, const QString &room, const QString &nick, const QString &password, int maxchars)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(host) << qVariantFromValue(room) << qVariantFromValue(nick) << qVariantFromValue(password) << qVariantFromValue(maxchars);
        return asyncCallWithArgumentList(QLatin1String("groupChatJoin"), argumentList);
    }

    inline QDBusPendingReply<bool> groupChatJoin(const QString &host, const QString &room, const QString &nick, const QString &password, int maxchars, int maxstanzas)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(host) << qVariantFromValue(room) << qVariantFromValue(nick) << qVariantFromValue(password) << qVariantFromValue(maxchars) << qVariantFromValue(maxstanzas);
        return asyncCallWithArgumentList(QLatin1String("groupChatJoin"), argumentList);
    }

    inline QDBusPendingReply<bool> groupChatJoin(const QString &host, const QString &room, const QString &nick, const QString &password, int maxchars, int maxstanzas, int seconds)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(host) << qVariantFromValue(room) << qVariantFromValue(nick) << qVariantFromValue(password) << qVariantFromValue(maxchars) << qVariantFromValue(maxstanzas) << qVariantFromValue(seconds);
        return asyncCallWithArgumentList(QLatin1String("groupChatJoin"), argumentList);
    }

    inline QDBusPendingReply<bool> groupChatJoin(const QString &host, const QString &room, const QString &nick, const QString &password, int maxchars, int maxstanzas, int seconds, int Status)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(host) << qVariantFromValue(room) << qVariantFromValue(nick) << qVariantFromValue(password) << qVariantFromValue(maxchars) << qVariantFromValue(maxstanzas) << qVariantFromValue(seconds) << qVariantFromValue(Status);
        return asyncCallWithArgumentList(QLatin1String("groupChatJoin"), argumentList);
    }

    inline QDBusPendingReply<> groupChatLeave(const QString &host, const QString &room)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(host) << qVariantFromValue(room);
        return asyncCallWithArgumentList(QLatin1String("groupChatLeave"), argumentList);
    }

    inline QDBusPendingReply<> groupChatSetStatus(const QString &host, const QString &room, int status)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(host) << qVariantFromValue(room) << qVariantFromValue(status);
        return asyncCallWithArgumentList(QLatin1String("groupChatSetStatus"), argumentList);
    }

    inline QDBusPendingReply<int> initAccount(const QString &j, const QString &p)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(j) << qVariantFromValue(p);
        return asyncCallWithArgumentList(QLatin1String("initAccount"), argumentList);
    }

    inline QDBusPendingReply<int> initAccount(const QString &j, const QString &p, bool overwrite)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(j) << qVariantFromValue(p) << qVariantFromValue(overwrite);
        return asyncCallWithArgumentList(QLatin1String("initAccount"), argumentList);
    }

    inline QDBusPendingReply<int> login(int status)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(status);
        return asyncCallWithArgumentList(QLatin1String("login"), argumentList);
    }

    inline QDBusPendingReply<> logout()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("logout"), argumentList);
    }

    inline QDBusPendingReply<> sendMessage(const QString &to, const QString &subject, const QString &body)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(to) << qVariantFromValue(subject) << qVariantFromValue(body);
        return asyncCallWithArgumentList(QLatin1String("sendMessage"), argumentList);
    }

    inline QDBusPendingReply<int> setPresence(int status)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(status);
        return asyncCallWithArgumentList(QLatin1String("setPresence"), argumentList);
    }

    inline QDBusPendingReply<> subscribe(const QString &jid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(jid);
        return asyncCallWithArgumentList(QLatin1String("subscribe"), argumentList);
    }

    inline QDBusPendingReply<> subscribe(const QString &jid, const QString &nick)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(jid) << qVariantFromValue(nick);
        return asyncCallWithArgumentList(QLatin1String("subscribe"), argumentList);
    }

    inline QDBusPendingReply<> unsubscribe(const QString &jid)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(jid);
        return asyncCallWithArgumentList(QLatin1String("unsubscribe"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void accountError(int errCode, const QString &details);
    void accountPresenceChanged(const QString &jid, int presence);
    void accountStateChanged(const QString &jid, int state);
    void connectionClose();
    void groupChatError(const QString &j, int code, const QString &detail);
    void groupChatInvited(const QString &gc, const QString &from, const QString &reason);
    void groupChatJoined(const QString &j);
    void groupChatLeft(const QString &j);
    void groupChatPresence(const QString &j, int status);
    void loginSuccess(const QString &jid);
    void messageReceived(const QString &from, const QString &to, const QString &subject, const QString &body, const QString &time);
    void presenceChanged(int status);
    void subscriptionAccepted(const QString &j);
    void subscriptionDenied(const QString &j);
    void subscriptionReceived(const QString &j, const QString &nick);
};

namespace com {
  namespace dcampus {
    namespace coolview {
      namespace im {
        typedef ::CvMsgAccountProxy jabber;
      }
    }
  }
}
#endif
