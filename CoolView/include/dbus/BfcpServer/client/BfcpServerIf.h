/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -v -c BfcpServerIf -p BfcpServerIf.h:BfcpServerIf.cpp .\com.dcampus.coolview.BfcpServer.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef BFCPSERVERIF_H_1427875940
#define BFCPSERVERIF_H_1427875940

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.dcampus.coolview.BfcpServer
 */
class BfcpServerIf: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.dcampus.coolview.BfcpServer"; }

public:
    BfcpServerIf(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~BfcpServerIf();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> AddConference(uint conference_id, const QByteArray &conference_arg)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(conference_id) << QVariant::fromValue(conference_arg);
        return asyncCallWithArgumentList(QLatin1String("AddConference"), argumentList);
    }

    inline QDBusPendingReply<> AddFloor(uint conference_id, ushort floor_id, const QByteArray &floor_arg)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(conference_id) << QVariant::fromValue(floor_id) << QVariant::fromValue(floor_arg);
        return asyncCallWithArgumentList(QLatin1String("AddFloor"), argumentList);
    }

    inline QDBusPendingReply<> AddUser(uint conference_id, ushort user_id, const QByteArray &user_arg)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(conference_id) << QVariant::fromValue(user_id) << QVariant::fromValue(user_arg);
        return asyncCallWithArgumentList(QLatin1String("AddUser"), argumentList);
    }

    inline QDBusPendingReply<> GetConferenceIDs()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetConferenceIDs"), argumentList);
    }

    inline QDBusPendingReply<> GetConferenceInfo(uint conference_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(conference_id);
        return asyncCallWithArgumentList(QLatin1String("GetConferenceInfo"), argumentList);
    }

    inline QDBusPendingReply<> ModifyConference(uint conference_id, const QByteArray &conference_arg)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(conference_id) << QVariant::fromValue(conference_arg);
        return asyncCallWithArgumentList(QLatin1String("ModifyConference"), argumentList);
    }

    inline QDBusPendingReply<> ModifyFloor(uint conference_id, ushort floor_id, const QByteArray &floor_arg)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(conference_id) << QVariant::fromValue(floor_id) << QVariant::fromValue(floor_arg);
        return asyncCallWithArgumentList(QLatin1String("ModifyFloor"), argumentList);
    }

    inline QDBusPendingReply<> Quit()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Quit"), argumentList);
    }

    inline QDBusPendingReply<> RemoveChair(uint conference_id, ushort floor_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(conference_id) << QVariant::fromValue(floor_id);
        return asyncCallWithArgumentList(QLatin1String("RemoveChair"), argumentList);
    }

    inline QDBusPendingReply<> RemoveConference(uint conference_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(conference_id);
        return asyncCallWithArgumentList(QLatin1String("RemoveConference"), argumentList);
    }

    inline QDBusPendingReply<> RemoveFloor(uint conference_id, ushort floor_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(conference_id) << QVariant::fromValue(floor_id);
        return asyncCallWithArgumentList(QLatin1String("RemoveFloor"), argumentList);
    }

    inline QDBusPendingReply<> RemoveUser(uint conference_id, ushort user_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(conference_id) << QVariant::fromValue(user_id);
        return asyncCallWithArgumentList(QLatin1String("RemoveUser"), argumentList);
    }

    inline QDBusPendingReply<> SetChair(uint conference_id, ushort floor_id, ushort user_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(conference_id) << QVariant::fromValue(floor_id) << QVariant::fromValue(user_id);
        return asyncCallWithArgumentList(QLatin1String("SetChair"), argumentList);
    }

    inline QDBusPendingReply<> Start(const QByteArray &server_arg)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(server_arg);
        return asyncCallWithArgumentList(QLatin1String("Start"), argumentList);
    }

    inline QDBusPendingReply<> Stop()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("Stop"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ChairControlSignal(int control_error, uint conference_id, ushort floor_id, ushort user_id);
    void ConferenceControlSignal(int control_error, uint conference_id);
    void ConferenceIDsSignal(int control_error, const QByteArray &conference_ids);
    void ConferenceInfoSignal(int control_error, uint conference_id, const QString &conference_info);
    void FloorControlSignal(int control_error, uint conference_id, ushort floor_id);
    void ServerControlSignal(int control_error);
    void UserControlSignal(int control_error, uint conference_id, ushort user_id);
};

namespace com {
  namespace dcampus {
    namespace coolview {
      typedef ::BfcpServerIf BfcpServer;
    }
  }
}
#endif
