/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -c CvPerfMonitorAdaptor -a CvPerfMonitorAdaptor.h:CvPerfMonitorAdaptor.cpp .\com.dcampus.coolview.performance.monitor.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#ifndef CVPERFMONITORADAPTOR_H_1346919646
#define CVPERFMONITORADAPTOR_H_1346919646

#include <QtCore/QObject>
#include <QtDBus/QtDBus>
class QByteArray;
template<class T> class QList;
template<class Key, class Value> class QMap;
class QString;
class QStringList;
class QVariant;

/*
 * Adaptor class for interface com.dcampus.coolview.performance.monitor
 */
class CvPerfMonitorAdaptor: public QDBusAbstractAdaptor
{
    Q_OBJECT
    Q_CLASSINFO("D-Bus Interface", "com.dcampus.coolview.performance.monitor")
    Q_CLASSINFO("D-Bus Introspection", ""
"  <interface name=\"com.dcampus.coolview.performance.monitor\">\n"
"    <signal name=\"cvMonitorCofMessageReceivedEvent\">\n"
"      <arg direction=\"out\" type=\"ay\" name=\"MonitorCofInfo\"/>\n"
"    </signal>&#xd;\n"
"	&#xd;\n"
"	//向监控进程注册被监控信息&#xd;\n"
"	<method name=\"RegisterProcess\">\n"
"      <arg direction=\"in\" type=\"ay\" name=\"processInfo\"/>		//MonitoredProcess&#xd;\n"
"	</method>&#xd;\n"
"	&#xd;\n"
"	//向监控进程注册媒体进程监控信息&#xd;\n"
"	<method name=\"RegisterMediaProcess\">\n"
"      <arg direction=\"in\" type=\"ay\" name=\"processInfo\"/>		//MonitoredMediaProcess&#xd;\n"
"	</method>&#xd;\n"
"	&#xd;\n"
"   //取消监控进程对指定进程的监控&#xd;\n"
"	<method name=\"UnregisterProcess\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"processID\"/>\n"
"    </method>&#xd;\n"
" &#xd;\n"
"    //取消监控进程对指定进程的监控&#xd;\n"
"	<method name=\"UnregisterMediaProcess\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"processID\"/>\n"
"    </method>&#xd;\n"
"&#xd;\n"
"	//Hello报文，包含了进程的运行状态的二进制信息&#xd;\n"
"	<method name=\"HelloInfo\">\n"
"      <arg direction=\"in\" type=\"i\" name=\"processID\"/>\n"
"      <arg direction=\"in\" type=\"ay\" name=\"processImage\"/>	//进程二进制信息，用于恢复进程&#xd;\n"
"	</method>&#xd;\n"
"	&#xd;\n"
"	//创建测试媒体&#xd;\n"
"	<method name=\"CreateTestMedia\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"media_id\"/>\n"
"      <!--channel_id -->\n"
"      <arg direction=\"in\" type=\"ay\" name=\"input_garray\"/>\n"
"      <!--params for channel-->\n"
"    </method>&#xd;\n"
"	&#xd;\n"
"	//销毁测试媒体&#xd;\n"
"	<method name=\"ReleaseTestMedia\">\n"
"      <arg direction=\"in\" type=\"s\" name=\"media_id\"/>\n"
"      <!--channel_id-->\n"
"    </method>\n"
"  </interface>\n"
        "")
public:
    CvPerfMonitorAdaptor(QObject *parent);
    virtual ~CvPerfMonitorAdaptor();

public: // PROPERTIES
public Q_SLOTS: // METHODS
    void CreateTestMedia(const QString &media_id, const QByteArray &input_garray);
    void HelloInfo(int processID, const QByteArray &processImage);
    void RegisterMediaProcess(const QByteArray &processInfo);
    void RegisterProcess(const QByteArray &processInfo);
    void ReleaseTestMedia(const QString &media_id);
    void UnregisterMediaProcess(int processID);
    void UnregisterProcess(int processID);
Q_SIGNALS: // SIGNALS
    void cvMonitorCofMessageReceivedEvent(const QByteArray &MonitorCofInfo);
};

#endif
