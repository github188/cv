/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -v -c BfcpClientIf -p BfcpClientIf.h:BfcpClientIf.cpp .\com.dcampus.coolview.BfcpClient.xml
 *
 * qdbusxml2cpp is Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef BFCPCLIENTIF_H_1427284498
#define BFCPCLIENTIF_H_1427284498

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.dcampus.coolview.BfcpClient
 */
class BfcpClientIf: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.dcampus.coolview.BfcpClient"; }

public:
    BfcpClientIf(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~BfcpClientIf();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> CreateClient(const QByteArray &client_arg)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(client_arg);
        return asyncCallWithArgumentList(QLatin1String("CreateClient"), argumentList);
    }

    inline QDBusPendingReply<> DestroyClient(int client_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(client_id);
        return asyncCallWithArgumentList(QLatin1String("DestroyClient"), argumentList);
    }

    inline QDBusPendingReply<> SendChairAction(int client_id, const QByteArray &chair_action_arg)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(client_id) << QVariant::fromValue(chair_action_arg);
        return asyncCallWithArgumentList(QLatin1String("SendChairAction"), argumentList);
    }

    inline QDBusPendingReply<> SendFloorQuery(int client_id, const QByteArray &floor_ids)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(client_id) << QVariant::fromValue(floor_ids);
        return asyncCallWithArgumentList(QLatin1String("SendFloorQuery"), argumentList);
    }

    inline QDBusPendingReply<> SendFloorRelease(int client_id, ushort floor_request_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(client_id) << QVariant::fromValue(floor_request_id);
        return asyncCallWithArgumentList(QLatin1String("SendFloorRelease"), argumentList);
    }

    inline QDBusPendingReply<> SendFloorRequest(int client_id, const QByteArray &floor_request_arg)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(client_id) << QVariant::fromValue(floor_request_arg);
        return asyncCallWithArgumentList(QLatin1String("SendFloorRequest"), argumentList);
    }

    inline QDBusPendingReply<> SendFloorRequestQuery(int client_id, ushort floor_request_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(client_id) << QVariant::fromValue(floor_request_id);
        return asyncCallWithArgumentList(QLatin1String("SendFloorRequestQuery"), argumentList);
    }

    inline QDBusPendingReply<> SendGoodBye(int client_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(client_id);
        return asyncCallWithArgumentList(QLatin1String("SendGoodBye"), argumentList);
    }

    inline QDBusPendingReply<> SendHello(int client_id)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(client_id);
        return asyncCallWithArgumentList(QLatin1String("SendHello"), argumentList);
    }

    inline QDBusPendingReply<> SendUserQuery(int client_id, const QByteArray &user_query_arg)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(client_id) << QVariant::fromValue(user_query_arg);
        return asyncCallWithArgumentList(QLatin1String("SendUserQuery"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ClientControlSignal(int control_error, int client_id, const QByteArray &client_arg);
    void ErrorReceivedSignal(int client_id, const QByteArray &data);
    void FloorRequestInfoReceivedSignal(int client_id, const QByteArray &data);
    void FloorStatusReceivedSignal(int client_id, const QByteArray &data);
    void StateChangedSignal(int client_id, int state);
    void UserStatusReceivedSignal(int client_id, const QByteArray &data);
};

namespace com {
  namespace dcampus {
    namespace coolview {
      typedef ::BfcpClientIf BfcpClient;
    }
  }
}
#endif
